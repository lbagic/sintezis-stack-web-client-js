// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/air_hotel_reservation_search/response.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {SessionInfo} from "../commons/session_info_pb.js";
import type {Location} from "../models/location_pb.js";
import type {FlightOption, GDSHotel, GDSItinerary, Price, TicketInfo} from "../commons/flow_common_pb.js";
import type {Status} from "../commons/status_pb.js";
import type {HotelSearchTypeEnum} from "../commons/enum_pb.js";
import type {Timestamp} from "../commons/timestamp_pb.js";
import type {Auth} from "../commons/auth_pb.js";

/**
 * ItineraryResponse is used in all internal and external GDS search rpc calls. Used in different calls to return booking information.
 *
 * @generated from message elude.proto.ItineraryResponse
 */
export declare class ItineraryResponse extends Message<ItineraryResponse> {
  /**
   * TODO include list of GDS uses, for error messages.
   *
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Departure Location.
   *
   * @generated from field: elude.proto.Location departure_location = 2;
   */
  departureLocation?: Location;

  /**
   * Arrival Location.
   *
   * @generated from field: elude.proto.Location arrival_location = 3;
   */
  arrivalLocation?: Location;

  /**
   * List of available flights after gds search.
   *
   * @generated from field: repeated elude.proto.FlightOption flight_options = 4;
   */
  flightOptions: FlightOption[];

  /**
   * List of available hotels after gds search.
   *
   * @generated from field: repeated elude.proto.GDSHotel hotels = 5;
   */
  hotels: GDSHotel[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 6;
   */
  status?: Status;

  /**
   * Type of hotel search.
   *
   * @generated from field: elude.proto.HotelSearchTypeEnum hotel_search_type = 7;
   */
  hotelSearchType: HotelSearchTypeEnum;

  constructor(data?: PartialMessage<ItineraryResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.ItineraryResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ItineraryResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ItineraryResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ItineraryResponse;

  static equals(a: ItineraryResponse | PlainMessage<ItineraryResponse> | undefined, b: ItineraryResponse | PlainMessage<ItineraryResponse> | undefined): boolean;
}

/**
 * ReservationResponse is used in all internal and external GDS reservation rpc calls. Contains information about reservation.
 *
 * @generated from message elude.proto.ReservationResponse
 */
export declare class ReservationResponse extends Message<ReservationResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Booking id after successful reservation in database bookings table.
   *
   * @generated from field: int32 booking_id = 2;
   */
  bookingId: number;

  /**
   * Hotel identifiers from gds. Saved in database.
   *
   * @generated from field: string hotel_reservation_identifier = 3;
   */
  hotelReservationIdentifier: string;

  /**
   * Air identifiers from gds. Saved in database.
   *
   * @generated from field: string air_reservation_identifier = 4;
   */
  airReservationIdentifier: string;

  /**
   * Information about gds itinerary.
   *
   * @generated from field: elude.proto.GDSItinerary itinerary = 5;
   */
  itinerary?: GDSItinerary;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 6;
   */
  status?: Status;

  /**
   * Elude Pnr. Saved in database.
   *
   * @generated from field: string elude_reference = 7;
   */
  eludeReference: string;

  /**
   * Airline ref identifier from gds. Saved in database.
   *
   * @generated from field: string airline_reservation_identifier = 8;
   */
  airlineReservationIdentifier: string;

  constructor(data?: PartialMessage<ReservationResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.ReservationResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReservationResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReservationResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReservationResponse;

  static equals(a: ReservationResponse | PlainMessage<ReservationResponse> | undefined, b: ReservationResponse | PlainMessage<ReservationResponse> | undefined): boolean;
}

/**
 * CancelResponse is used in CancelReservation requests.
 *
 * @generated from message elude.proto.CancelResponse
 */
export declare class CancelResponse extends Message<CancelResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Booking id for cancel reservation in database bookings table.
   *
   * @generated from field: int32 booking_id = 2;
   */
  bookingId: number;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 5;
   */
  status?: Status;

  constructor(data?: PartialMessage<CancelResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CancelResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelResponse;

  static equals(a: CancelResponse | PlainMessage<CancelResponse> | undefined, b: CancelResponse | PlainMessage<CancelResponse> | undefined): boolean;
}

/**
 * TicketResponse is used only in internal GDS rpc calls. TicketResponse is used in Ticket requests.
 *
 * @generated from message elude.proto.TicketResponse
 */
export declare class TicketResponse extends Message<TicketResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Itinerary price information.
   *
   * @generated from field: elude.proto.Price price = 2;
   */
  price?: Price;

  /**
   * Used to mark when was the ticket ticketed.
   *
   * @generated from field: elude.proto.Timestamp issued_at_datetime = 3;
   */
  issuedAtDatetime?: Timestamp;

  /**
   * Ticket information.
   *
   * @generated from field: repeated elude.proto.TicketInfo ticket_infos = 4;
   */
  ticketInfos: TicketInfo[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 5;
   */
  status?: Status;

  constructor(data?: PartialMessage<TicketResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.TicketResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TicketResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TicketResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TicketResponse;

  static equals(a: TicketResponse | PlainMessage<TicketResponse> | undefined, b: TicketResponse | PlainMessage<TicketResponse> | undefined): boolean;
}

/**
 * VoidTicketResponse is used only in internal GDS rpc calls. Used in VoidTicket request.
 *
 * @generated from message elude.proto.VoidTicketResponse
 */
export declare class VoidTicketResponse extends Message<VoidTicketResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Used to mark when was the ticket canceled.
   *
   * @generated from field: elude.proto.Timestamp cancel_at_datetime = 2;
   */
  cancelAtDatetime?: Timestamp;

  /**
   * Ticket document number for void ticket.
   *
   * @generated from field: string document_number = 3;
   */
  documentNumber: string;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 4;
   */
  status?: Status;

  constructor(data?: PartialMessage<VoidTicketResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.VoidTicketResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoidTicketResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoidTicketResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoidTicketResponse;

  static equals(a: VoidTicketResponse | PlainMessage<VoidTicketResponse> | undefined, b: VoidTicketResponse | PlainMessage<VoidTicketResponse> | undefined): boolean;
}

/**
 * GetPriceResponse is used only in internal GDS rpc calls. Used to return hotel/air price requests.
 *
 * @generated from message elude.proto.GetPriceResponse
 */
export declare class GetPriceResponse extends Message<GetPriceResponse> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Hotel price.
   *
   * @generated from field: elude.proto.Price hotel_price = 3;
   */
  hotelPrice?: Price;

  /**
   * Flight price.
   *
   * @generated from field: elude.proto.Price flight_price = 4;
   */
  flightPrice?: Price;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 5;
   */
  status?: Status;

  constructor(data?: PartialMessage<GetPriceResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetPriceResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPriceResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPriceResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPriceResponse;

  static equals(a: GetPriceResponse | PlainMessage<GetPriceResponse> | undefined, b: GetPriceResponse | PlainMessage<GetPriceResponse> | undefined): boolean;
}

/**
 * RetrieveResponse is used in all internal and external GDS RetrieveReservation rpc calls. Used to retrieve hotel/air reservations.
 *
 * @generated from message elude.proto.RetrieveResponse
 */
export declare class RetrieveResponse extends Message<RetrieveResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Booking id for retrieve reservation in database bookings table.
   *
   * @generated from field: int32 booking_id = 2;
   */
  bookingId: number;

  /**
   * @generated from field: elude.proto.GDSItinerary itinerary = 3;
   */
  itinerary?: GDSItinerary;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 4;
   */
  status?: Status;

  constructor(data?: PartialMessage<RetrieveResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.RetrieveResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetrieveResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetrieveResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetrieveResponse;

  static equals(a: RetrieveResponse | PlainMessage<RetrieveResponse> | undefined, b: RetrieveResponse | PlainMessage<RetrieveResponse> | undefined): boolean;
}

/**
 * GetAbandonTripSearchResponse is used in GetAbandonTripSearch rpc calls. Used to return a search request based on abandon trip information.
 *
 * @generated from message elude.proto.GetAbandonTripSearchResponse
 */
export declare class GetAbandonTripSearchResponse extends Message<GetAbandonTripSearchResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * If true means Itinerary is cached.
   *
   * @generated from field: bool is_cached = 2;
   */
  isCached: boolean;

  /**
   * Itinerary response data.
   *
   * @generated from field: elude.proto.ItineraryResponse itinerary_response = 3;
   */
  itineraryResponse?: ItineraryResponse;

  /**
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 4;
   */
  status?: Status;

  constructor(data?: PartialMessage<GetAbandonTripSearchResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetAbandonTripSearchResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAbandonTripSearchResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAbandonTripSearchResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAbandonTripSearchResponse;

  static equals(a: GetAbandonTripSearchResponse | PlainMessage<GetAbandonTripSearchResponse> | undefined, b: GetAbandonTripSearchResponse | PlainMessage<GetAbandonTripSearchResponse> | undefined): boolean;
}

/**
 * RevalidateItineraryResponse is used in all internal and external GDS RevalidateItinerary rpc calls.
 *
 * @generated from message elude.proto.RevalidateItineraryResponse
 */
export declare class RevalidateItineraryResponse extends Message<RevalidateItineraryResponse> {
  /**
   * TODO include list of GDS uses, for error messages.
   *
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Price difference while revalidating flight prices.
   *
   * @generated from field: float flight_price_difference = 2;
   */
  flightPriceDifference: number;

  /**
   * Price difference while revalidating hotel prices.
   *
   * @generated from field: float hotel_price_difference = 3;
   */
  hotelPriceDifference: number;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 4;
   */
  status?: Status;

  constructor(data?: PartialMessage<RevalidateItineraryResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.RevalidateItineraryResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevalidateItineraryResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevalidateItineraryResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevalidateItineraryResponse;

  static equals(a: RevalidateItineraryResponse | PlainMessage<RevalidateItineraryResponse> | undefined, b: RevalidateItineraryResponse | PlainMessage<RevalidateItineraryResponse> | undefined): boolean;
}

/**
 * HotelDetailsResponse is used in all internal and external GDS GetHotelDetails rpc calls.
 *
 * @generated from message elude.proto.HotelDetailsResponse
 */
export declare class HotelDetailsResponse extends Message<HotelDetailsResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Hotel data from gds.
   *
   * @generated from field: elude.proto.GDSHotel hotel = 2;
   */
  hotel?: GDSHotel;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<HotelDetailsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.HotelDetailsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HotelDetailsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HotelDetailsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HotelDetailsResponse;

  static equals(a: HotelDetailsResponse | PlainMessage<HotelDetailsResponse> | undefined, b: HotelDetailsResponse | PlainMessage<HotelDetailsResponse> | undefined): boolean;
}

/**
 * AbandonTripResponse is used in AbandonTrip rpc calls.
 *
 * @generated from message elude.proto.AbandonTripResponse
 */
export declare class AbandonTripResponse extends Message<AbandonTripResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 2;
   */
  status?: Status;

  constructor(data?: PartialMessage<AbandonTripResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.AbandonTripResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AbandonTripResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AbandonTripResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AbandonTripResponse;

  static equals(a: AbandonTripResponse | PlainMessage<AbandonTripResponse> | undefined, b: AbandonTripResponse | PlainMessage<AbandonTripResponse> | undefined): boolean;
}

/**
 * BuildHotelResponse is used in internal GDS BuildHotel rpc calls. Travelport gds currently not used.
 *
 * @generated from message elude.proto.BuildHotelResponse
 */
export declare class BuildHotelResponse extends Message<BuildHotelResponse> {
  /**
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * @generated from field: elude.proto.GDSHotel hotel = 2;
   */
  hotel?: GDSHotel;

  /**
   * Required: status code.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<BuildHotelResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.BuildHotelResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildHotelResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildHotelResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildHotelResponse;

  static equals(a: BuildHotelResponse | PlainMessage<BuildHotelResponse> | undefined, b: BuildHotelResponse | PlainMessage<BuildHotelResponse> | undefined): boolean;
}

/**
 * SetSearchCacheResponse is used in internal GDS SeatSearchCache rpc calls. Currently not used.
 *
 * @generated from message elude.proto.SetSearchCacheResponse
 */
export declare class SetSearchCacheResponse extends Message<SetSearchCacheResponse> {
  /**
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Required: status code.
   *
   * @generated from field: elude.proto.Status status = 2;
   */
  status?: Status;

  constructor(data?: PartialMessage<SetSearchCacheResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.SetSearchCacheResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSearchCacheResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSearchCacheResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSearchCacheResponse;

  static equals(a: SetSearchCacheResponse | PlainMessage<SetSearchCacheResponse> | undefined, b: SetSearchCacheResponse | PlainMessage<SetSearchCacheResponse> | undefined): boolean;
}

/**
 * AveragePriceResponse .
 *
 * @generated from message elude.proto.AveragePriceResponse
 */
export declare class AveragePriceResponse extends Message<AveragePriceResponse> {
  /**
   * TODO include list of GDS uses, for error messages.
   *
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Flight average price.
   *
   * @generated from field: int32 average_flight_price = 2;
   */
  averageFlightPrice: number;

  /**
   * Median hotel price
   *
   * @generated from field: int32 median_hotel_price = 3;
   */
  medianHotelPrice: number;

  /**
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 4;
   */
  status?: Status;

  constructor(data?: PartialMessage<AveragePriceResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.AveragePriceResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AveragePriceResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AveragePriceResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AveragePriceResponse;

  static equals(a: AveragePriceResponse | PlainMessage<AveragePriceResponse> | undefined, b: AveragePriceResponse | PlainMessage<AveragePriceResponse> | undefined): boolean;
}

