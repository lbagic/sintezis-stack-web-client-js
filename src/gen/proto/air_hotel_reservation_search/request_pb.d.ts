// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/air_hotel_reservation_search/request.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {Auth} from "../commons/auth_pb.js";
import type {AirRequirements, Budget, Dates, GDSBackend, GDSHotel, GDSTraveller, GDSUser, HotelRequirements, LocationsRequirements, PriceQuote, Travellers} from "../commons/flow_common_pb.js";
import type {Options} from "../commons/options_pb.js";
import type {SessionInfo} from "../commons/session_info_pb.js";
import type {AbandonedStageEnum, BudgetTierEnum, HotelSearchTypeEnum} from "../commons/enum_pb.js";
import type {PaymentMethod} from "../models/user_pb.js";
import type {Status} from "../commons/status_pb.js";

/**
 * ItineraryRequest is used in all internal and external GDS search rpc calls. Used in different calls to populate the booking. Clients should only use this when using RunSearch rpc in Search service.
 *
 * @generated from message elude.proto.ItineraryRequest
 */
export declare class ItineraryRequest extends Message<ItineraryRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Expected number of search results.
   *
   * @generated from field: int32 num_results = 2;
   */
  numResults: number;

  /**
   * Trip travellers.
   *
   * @generated from field: elude.proto.Travellers travellers = 3;
   */
  travellers?: Travellers;

  /**
   * Financial search budget.
   *
   * @generated from field: elude.proto.Budget budget = 4;
   */
  budget?: Budget;

  /**
   * Hotel search filters.
   *
   * @generated from field: elude.proto.HotelRequirements hotel_requirements = 5;
   */
  hotelRequirements?: HotelRequirements;

  /**
   * Flight search filters.
   *
   * @generated from field: elude.proto.AirRequirements air_requirements = 6;
   */
  airRequirements?: AirRequirements;

  /**
   * Beginning and end trip dates.
   *
   * @generated from field: elude.proto.Dates dates = 7;
   */
  dates?: Dates;

  /**
   * Locations search filters.
   *
   * @generated from field: elude.proto.LocationsRequirements locations_requirements = 8;
   */
  locationsRequirements?: LocationsRequirements;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 9;
   */
  options?: Options;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 10;
   */
  sessionInfo?: SessionInfo;

  /**
   * Used for hotel priority searches.
   *
   * @generated from field: bool priority_search = 11;
   */
  prioritySearch: boolean;

  /**
   * Used for budget tier searches.
   *
   * @generated from field: elude.proto.BudgetTierEnum budget_tier = 12;
   */
  budgetTier: BudgetTierEnum;

  /**
   * Used to create an additional hotel search if flight arrival and departure dates don't match. Clients shouldn't set this.
   *
   * @generated from field: bool additional_date_search = 13;
   */
  additionalDateSearch: boolean;

  /**
   * Used to get the complete itinerary request from cache. Clients shouldn't set this.
   *
   * @generated from field: int32 additional_date_search_flight_id = 14;
   */
  additionalDateSearchFlightId: number;

  /**
   * Id that determines where the id counter starts for searches. Clients shouldn't set this.
   *
   * @generated from field: int32 search_id_prefix = 15;
   */
  searchIdPrefix: number;

  /**
   * Enum that specifies the type of the hotel search. Clients shouldn't set this.
   *
   * @generated from field: elude.proto.HotelSearchTypeEnum hotel_search_type = 16;
   */
  hotelSearchType: HotelSearchTypeEnum;

  /**
   * List of iata codes for parent locations.
   *
   * @generated from field: repeated string location_iata_codes = 17;
   */
  locationIataCodes: string[];

  /**
   * If true, rerun search with same params. Ignore cache and run new search with new results.
   *
   * @generated from field: bool rerun = 18;
   */
  rerun: boolean;

  /**
   * Budget calculated for flights. Clients shouldn't set this.
   *
   * @generated from field: elude.proto.Budget air_budget = 19;
   */
  airBudget?: Budget;

  /**
   * Budget calculated for hotels. Clients shouldn't set this.
   *
   * @generated from field: elude.proto.Budget hotel_budget = 20;
   */
  hotelBudget?: Budget;

  constructor(data?: PartialMessage<ItineraryRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.ItineraryRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ItineraryRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ItineraryRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ItineraryRequest;

  static equals(a: ItineraryRequest | PlainMessage<ItineraryRequest> | undefined, b: ItineraryRequest | PlainMessage<ItineraryRequest> | undefined): boolean;
}

/**
 * ReservationRequest is used in all internal and external GDS reservation rpc calls. Clients should only use this when using StreamCreateReservation
 * rpc in Reservation service.
 *
 * @generated from message elude.proto.ReservationRequest
 */
export declare class ReservationRequest extends Message<ReservationRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 2;
   */
  options?: Options;

  /**
   * Hotel id for reservation request in database hotels table.
   *
   * @generated from field: int32 hotel_id = 3;
   */
  hotelId: number;

  /**
   * Room id for reservation request in database rooms table.
   *
   * @generated from field: int32 room_id = 4;
   */
  roomId: number;

  /**
   * Flight id for reservation request in database flights table.
   *
   * @generated from field: int32 flight_id = 5;
   */
  flightId: number;

  /**
   * Payment method id for reservation request in database payment methods table.
   *
   * @generated from field: int32 payment_method_id = 7;
   */
  paymentMethodId: number;

  /**
   * List of traveller ids for reservation request in database travellers table.
   *
   * @generated from field: repeated int32 traveller_ids = 8;
   */
  travellerIds: number[];

  /**
   * User who is making the reservation.
   *
   * @generated from field: elude.proto.GDSUser user = 9;
   */
  user?: GDSUser;

  /**
   * Payment method used to create a reservation.
   *
   * @generated from field: elude.proto.PaymentMethod payment_method = 10;
   */
  paymentMethod?: PaymentMethod;

  /**
   * Travellers on the trip.
   *
   * @generated from field: repeated elude.proto.GDSTraveller travellers = 11;
   */
  travellers: GDSTraveller[];

  /**
   * Gds for hotel reservation.
   *
   * @generated from field: elude.proto.GDSBackend hotel_gds = 12;
   */
  hotelGds?: GDSBackend;

  /**
   * Gds for flight reservation.
   *
   * @generated from field: elude.proto.GDSBackend flight_gds = 13;
   */
  flightGds?: GDSBackend;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 14;
   */
  sessionInfo?: SessionInfo;

  /**
   * Promotion code for payment discount.
   *
   * @generated from field: string promotion_code = 15;
   */
  promotionCode: string;

  constructor(data?: PartialMessage<ReservationRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.ReservationRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReservationRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReservationRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReservationRequest;

  static equals(a: ReservationRequest | PlainMessage<ReservationRequest> | undefined, b: ReservationRequest | PlainMessage<ReservationRequest> | undefined): boolean;
}

/**
 * CancelRequest is used in CancelReservation requests.
 *
 * @generated from message elude.proto.CancelRequest
 */
export declare class CancelRequest extends Message<CancelRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 2;
   */
  options?: Options;

  /**
   * Booking id in database bookings table for cancel reservation.
   *
   * @generated from field: int32 booking_id = 3;
   */
  bookingId: number;

  /**
   * Hotel identifiers from gds. Saved in database.
   *
   * @generated from field: string hotel_reservation_identifier = 4;
   */
  hotelReservationIdentifier: string;

  /**
   * Air identifiers from gds. Saved in database.
   *
   * @generated from field: string air_reservation_identifier = 5;
   */
  airReservationIdentifier: string;

  /**
   * Gds for hotel cancel reservation.
   *
   * @generated from field: elude.proto.GDSBackend hotel_gds = 6;
   */
  hotelGds?: GDSBackend;

  /**
   * Gds for flight cancel reservation.
   *
   * @generated from field: elude.proto.GDSBackend flight_gds = 7;
   */
  flightGds?: GDSBackend;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 8;
   */
  sessionInfo?: SessionInfo;

  /**
   * Used for flight ticket operations.
   *
   * @generated from field: bool void_tickets = 9;
   */
  voidTickets: boolean;

  constructor(data?: PartialMessage<CancelRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CancelRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelRequest;

  static equals(a: CancelRequest | PlainMessage<CancelRequest> | undefined, b: CancelRequest | PlainMessage<CancelRequest> | undefined): boolean;
}

/**
 * TicketRequest is used only in internal GDS rpc calls. Used in Ticket request. Clients should not use this.
 *
 * @generated from message elude.proto.TicketRequest
 */
export declare class TicketRequest extends Message<TicketRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 2;
   */
  options?: Options;

  /**
   * Gds for ticket request.
   *
   * @generated from field: elude.proto.GDSBackend gds = 3;
   */
  gds?: GDSBackend;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 4;
   */
  sessionInfo?: SessionInfo;

  /**
   * Air gds identifier for specific flight. Saved in database.
   *
   * @generated from field: string air_reservation_identifier = 5;
   */
  airReservationIdentifier: string;

  /**
   * Used for sabre query price quotes.
   *
   * @generated from field: repeated elude.proto.PriceQuote price_quotes = 6;
   */
  priceQuotes: PriceQuote[];

  constructor(data?: PartialMessage<TicketRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.TicketRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TicketRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TicketRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TicketRequest;

  static equals(a: TicketRequest | PlainMessage<TicketRequest> | undefined, b: TicketRequest | PlainMessage<TicketRequest> | undefined): boolean;
}

/**
 * VoidTicketRequest is used only in internal GDS rpc calls. Used in VoidTicket request. Clients should not use this.
 *
 * @generated from message elude.proto.VoidTicketRequest
 */
export declare class VoidTicketRequest extends Message<VoidTicketRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 2;
   */
  options?: Options;

  /**
   * Gds for void ticket request.
   *
   * @generated from field: elude.proto.GDSBackend gds = 3;
   */
  gds?: GDSBackend;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 4;
   */
  sessionInfo?: SessionInfo;

  /**
   * // Air gds identifier for specific flight. Saved in database.
   *
   * @generated from field: string air_reservation_identifier = 5;
   */
  airReservationIdentifier: string;

  /**
   * Identifier used for a specific ticket.
   *
   * @generated from field: string ticket_identifier = 6;
   */
  ticketIdentifier: string;

  constructor(data?: PartialMessage<VoidTicketRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.VoidTicketRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoidTicketRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoidTicketRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoidTicketRequest;

  static equals(a: VoidTicketRequest | PlainMessage<VoidTicketRequest> | undefined, b: VoidTicketRequest | PlainMessage<VoidTicketRequest> | undefined): boolean;
}

/**
 * GetPriceRequest is used only in internal GDS rpc calls. Used to get hotel/air price requests. Clients should not use this.
 *
 * @generated from message elude.proto.GetPriceRequest
 */
export declare class GetPriceRequest extends Message<GetPriceRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 2;
   */
  options?: Options;

  /**
   * Hotel id for get price request in database hotels table.
   *
   * @generated from field: int32 hotel_id = 3;
   */
  hotelId: number;

  /**
   * Room id for get price request in database rooms table.
   *
   * @generated from field: int32 room_id = 4;
   */
  roomId: number;

  /**
   * Flight id for get price request in database flights table.
   *
   * @generated from field: int32 flight_id = 5;
   */
  flightId: number;

  /**
   * Gds for hotel reservation.
   *
   * @generated from field: elude.proto.GDSBackend hotel_gds = 6;
   */
  hotelGds?: GDSBackend;

  /**
   * Gds for flight reservation.
   *
   * @generated from field: elude.proto.GDSBackend flight_gds = 7;
   */
  flightGds?: GDSBackend;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 8;
   */
  sessionInfo?: SessionInfo;

  constructor(data?: PartialMessage<GetPriceRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetPriceRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPriceRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPriceRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPriceRequest;

  static equals(a: GetPriceRequest | PlainMessage<GetPriceRequest> | undefined, b: GetPriceRequest | PlainMessage<GetPriceRequest> | undefined): boolean;
}

/**
 * RetrieveRequest is used in all internal and external GDS RetrieveReservation rpc calls. Used to retrieve hotel/air reservations.
 * Clients should only use this when using RetrieveReservation rpc in Reservation service.
 *
 * @generated from message elude.proto.RetrieveRequest
 */
export declare class RetrieveRequest extends Message<RetrieveRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 2;
   */
  options?: Options;

  /**
   * Booking id for retrieve reservation in database bookings table.
   *
   * @generated from field: int32 booking_id = 3;
   */
  bookingId: number;

  /**
   * Hotel Identifiers from gds. Saved in database.
   *
   * @generated from field: string hotel_reservation_identifier = 4;
   */
  hotelReservationIdentifier: string;

  /**
   * Air Identifiers from gds. Saved in database.
   *
   * @generated from field: string air_reservation_identifier = 5;
   */
  airReservationIdentifier: string;

  /**
   * Gds for hotel reservation.
   *
   * @generated from field: elude.proto.GDSBackend hotel_gds = 6;
   */
  hotelGds?: GDSBackend;

  /**
   * Gds for flight reservation.
   *
   * @generated from field: elude.proto.GDSBackend flight_gds = 7;
   */
  flightGds?: GDSBackend;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 8;
   */
  sessionInfo?: SessionInfo;

  constructor(data?: PartialMessage<RetrieveRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.RetrieveRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetrieveRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetrieveRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetrieveRequest;

  static equals(a: RetrieveRequest | PlainMessage<RetrieveRequest> | undefined, b: RetrieveRequest | PlainMessage<RetrieveRequest> | undefined): boolean;
}

/**
 * GetAbandonTripSearchRequest is used in GetAbandonTripSearch rpc calls. Used to make a search request based on abandon trip information.
 *
 * @generated from message elude.proto.GetAbandonTripSearchRequest
 */
export declare class GetAbandonTripSearchRequest extends Message<GetAbandonTripSearchRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Booking related information.
   *
   * @generated from field: elude.proto.ItineraryRequest itinerary_request = 3;
   */
  itineraryRequest?: ItineraryRequest;

  /**
   * Flight id for get abandon trip search in database flights table.
   *
   * @generated from field: int32 flight_id = 4;
   */
  flightId: number;

  /**
   * Hotel id for get abandon strip search in database hotels table.
   *
   * @generated from field: int32 hotel_id = 5;
   */
  hotelId: number;

  /**
   * Gds for flight reservation. Saved in database.
   *
   * @generated from field: elude.proto.GDSBackend flight_gds = 6;
   */
  flightGds?: GDSBackend;

  /**
   * Gds for hotel reservation. Saved in database.
   *
   * @generated from field: elude.proto.GDSBackend hotel_gds = 7;
   */
  hotelGds?: GDSBackend;

  /**
   * Used to save abandon stage.
   *
   * @generated from field: elude.proto.AbandonedStageEnum abandoned_stage = 8;
   */
  abandonedStage: AbandonedStageEnum;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 9;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetAbandonTripSearchRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetAbandonTripSearchRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAbandonTripSearchRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAbandonTripSearchRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAbandonTripSearchRequest;

  static equals(a: GetAbandonTripSearchRequest | PlainMessage<GetAbandonTripSearchRequest> | undefined, b: GetAbandonTripSearchRequest | PlainMessage<GetAbandonTripSearchRequest> | undefined): boolean;
}

/**
 * RevalidateItineraryRequest is used in all internal and external GDS RevalidateItinerary rpc calls.
 * Clients should only use this when using RevalidateItinerary rpc in Reservation service.
 *
 * @generated from message elude.proto.RevalidateItineraryRequest
 */
export declare class RevalidateItineraryRequest extends Message<RevalidateItineraryRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 2;
   */
  options?: Options;

  /**
   * Hotel id for revalidate itinerary in database hotels table.
   *
   * @generated from field: int32 hotel_id = 3;
   */
  hotelId: number;

  /**
   * Room id for revalidate itinerary in database rooms table.
   *
   * @generated from field: int32 room_id = 4;
   */
  roomId: number;

  /**
   * Flight id for revalidate itinerary in database flights table.
   *
   * @generated from field: int32 flight_id = 5;
   */
  flightId: number;

  /**
   * Gds for hotel reservation.
   *
   * @generated from field: elude.proto.GDSBackend hotel_gds = 6;
   */
  hotelGds?: GDSBackend;

  /**
   * Gds for flight reservation.
   *
   * @generated from field: elude.proto.GDSBackend flight_gds = 7;
   */
  flightGds?: GDSBackend;

  /**
   * Travellers on a trip.
   *
   * @generated from field: repeated elude.proto.GDSTraveller travellers = 8;
   */
  travellers: GDSTraveller[];

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 9;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of traveller ids for revalidate itinerary in database travellers table.
   *
   * @generated from field: repeated int32 traveller_ids = 10;
   */
  travellerIds: number[];

  constructor(data?: PartialMessage<RevalidateItineraryRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.RevalidateItineraryRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevalidateItineraryRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevalidateItineraryRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevalidateItineraryRequest;

  static equals(a: RevalidateItineraryRequest | PlainMessage<RevalidateItineraryRequest> | undefined, b: RevalidateItineraryRequest | PlainMessage<RevalidateItineraryRequest> | undefined): boolean;
}

/**
 * HotelDetailsRequest is used in all internal and external GDS GetHotelDetails rpc calls.
 * Clients should only use this when using GetHotelDetails rpc in Search service.
 *
 * @generated from message elude.proto.HotelDetailsRequest
 */
export declare class HotelDetailsRequest extends Message<HotelDetailsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Gds for hotel reservation.
   *
   * @generated from field: elude.proto.GDSBackend gds = 3;
   */
  gds?: GDSBackend;

  /**
   * Hotel id for hotel details in database hotels table.
   *
   * @generated from field: int32 hotel_id = 4;
   */
  hotelId: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 5;
   */
  options?: Options;

  constructor(data?: PartialMessage<HotelDetailsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.HotelDetailsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HotelDetailsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HotelDetailsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HotelDetailsRequest;

  static equals(a: HotelDetailsRequest | PlainMessage<HotelDetailsRequest> | undefined, b: HotelDetailsRequest | PlainMessage<HotelDetailsRequest> | undefined): boolean;
}

/**
 * AbandonTripRequest is used in AbandonTrip rpc calls.
 *
 * @generated from message elude.proto.AbandonTripRequest
 */
export declare class AbandonTripRequest extends Message<AbandonTripRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Beginning and end trip dates.
   *
   * @generated from field: elude.proto.Dates dates = 5;
   */
  dates?: Dates;

  /**
   * Travellers on a trip.
   *
   * @generated from field: elude.proto.Travellers travellers = 6;
   */
  travellers?: Travellers;

  /**
   * Max budget price.
   *
   * @generated from field: int32 budget = 7;
   */
  budget: number;

  /**
   * Flight id for abandon trip in database flights table.
   *
   * @generated from field: int32 flight_id = 8;
   */
  flightId: number;

  /**
   * Hotel id for abandon trip in database hotels table.
   *
   * @generated from field: int32 hotel_id = 9;
   */
  hotelId: number;

  /**
   * Room id for abandon trip in database rooms table.
   *
   * @generated from field: int32 room_id = 10;
   */
  roomId: number;

  /**
   * Used to save abandon stage.
   *
   * @generated from field: elude.proto.AbandonedStageEnum abandoned_stage = 11;
   */
  abandonedStage: AbandonedStageEnum;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 12;
   */
  options?: Options;

  /**
   * Air search filters.
   *
   * @generated from field: elude.proto.AirRequirements air_requirements = 13;
   */
  airRequirements?: AirRequirements;

  /**
   * Hotel search filters.d
   *
   * @generated from field: elude.proto.HotelRequirements hotel_requirements = 14;
   */
  hotelRequirements?: HotelRequirements;

  /**
   * Departure and arrival location data for abandon trip.
   *
   * @generated from field: elude.proto.LocationsRequirements locations_requirements = 15;
   */
  locationsRequirements?: LocationsRequirements;

  /**
   * Budget tier for abandon trip search query.
   *
   * @generated from field: elude.proto.BudgetTierEnum budget_tier = 16;
   */
  budgetTier: BudgetTierEnum;

  /**
   * Abandon trip search type (combo, package, flight, hotel).
   *
   * @generated from field: string search_type = 17;
   */
  searchType: string;

  constructor(data?: PartialMessage<AbandonTripRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.AbandonTripRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AbandonTripRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AbandonTripRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AbandonTripRequest;

  static equals(a: AbandonTripRequest | PlainMessage<AbandonTripRequest> | undefined, b: AbandonTripRequest | PlainMessage<AbandonTripRequest> | undefined): boolean;
}

/**
 * BuildHotelRequest is used in internal GDS BuildHotel rpc calls. Travelport gds currently not used.
 *
 * @generated from message elude.proto.BuildHotelRequest
 */
export declare class BuildHotelRequest extends Message<BuildHotelRequest> {
  /**
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * @generated from field: elude.proto.GDSHotel hotel = 2;
   */
  hotel?: GDSHotel;

  /**
   * @generated from field: elude.proto.Travellers travellers = 3;
   */
  travellers?: Travellers;

  /**
   * @generated from field: elude.proto.Budget budget = 4;
   */
  budget?: Budget;

  /**
   * Required: status code.
   *
   * @generated from field: elude.proto.Status status = 5;
   */
  status?: Status;

  /**
   * @generated from field: elude.proto.Options options = 6;
   */
  options?: Options;

  constructor(data?: PartialMessage<BuildHotelRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.BuildHotelRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildHotelRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildHotelRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildHotelRequest;

  static equals(a: BuildHotelRequest | PlainMessage<BuildHotelRequest> | undefined, b: BuildHotelRequest | PlainMessage<BuildHotelRequest> | undefined): boolean;
}

/**
 * SetSearchCacheRequest is used in internal GDS SeatSearchCache rpc calls. Currently not used.
 *
 * @generated from message elude.proto.SetSearchCacheRequest
 */
export declare class SetSearchCacheRequest extends Message<SetSearchCacheRequest> {
  /**
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * @generated from field: elude.proto.GDSBackend flight_gds = 2;
   */
  flightGds?: GDSBackend;

  /**
   * Required: status code.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<SetSearchCacheRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.SetSearchCacheRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSearchCacheRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSearchCacheRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSearchCacheRequest;

  static equals(a: SetSearchCacheRequest | PlainMessage<SetSearchCacheRequest> | undefined, b: SetSearchCacheRequest | PlainMessage<SetSearchCacheRequest> | undefined): boolean;
}

