// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/models/role.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {Permission} from "./permission_pb.js";

/**
 * Role message is returned in Role CRUD rpc calls. Contains info on the role, including all the permissions assigned to
 * the role and all the parent roles.
 *
 * @generated from message elude.proto.Role
 */
export declare class Role extends Message<Role> {
  /**
   * Role id.
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * Role name.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * List of parent roles data.
   *
   * @generated from field: repeated elude.proto.Role parents = 3;
   */
  parents: Role[];

  /**
   * List of role permissions data.
   *
   * @generated from field: repeated elude.proto.Permission permissions = 4;
   */
  permissions: Permission[];

  constructor(data?: PartialMessage<Role>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.Role";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Role;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Role;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Role;

  static equals(a: Role | PlainMessage<Role> | undefined, b: Role | PlainMessage<Role> | undefined): boolean;
}

