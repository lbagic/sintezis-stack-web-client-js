// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/models/region.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {Country} from "./country_pb.js";

/**
 * Region message is returned in Region CRUD rpc calls and as part of the City message. Contains info on a specific region.
 *
 * @generated from message elude.proto.Region
 */
export declare class Region extends Message<Region> {
  /**
   * Region id.
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * Region name.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Region type (e.g. district/county).
   *
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * Region local code.
   *
   * @generated from field: string local_code = 4;
   */
  localCode: string;

  /**
   * Region iso code. Short text (e.g. UG-318).
   *
   * @generated from field: string iso_code = 5;
   */
  isoCode: string;

  /**
   * Region country id.
   *
   * @generated from field: int32 country_id = 6;
   */
  countryId: number;

  /**
   * Region country data.
   *
   * @generated from field: elude.proto.Country country = 7;
   */
  country?: Country;

  constructor(data?: PartialMessage<Region>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.Region";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Region;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Region;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Region;

  static equals(a: Region | PlainMessage<Region> | undefined, b: Region | PlainMessage<Region> | undefined): boolean;
}

