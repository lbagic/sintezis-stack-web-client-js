// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/models/media.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * Media message is returned as part of every resource that has an image or other media associated with it. Contains all
 * the info about a specific media.
 *
 * @generated from message elude.proto.Media
 */
export declare class Media extends Message<Media> {
  /**
   * Media id.
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * Media title.
   *
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * Media caption.
   *
   * @generated from field: string caption = 3;
   */
  caption: string;

  /**
   * Media filename.
   *
   * @generated from field: string filename = 4;
   */
  filename: string;

  /**
   * Media original filename. If file name needed use this.
   *
   * @generated from field: string orginal_filename = 5;
   */
  orginalFilename: string;

  /**
   * Media image mime type.
   *
   * @generated from field: string mime_type = 6;
   */
  mimeType: string;

  /**
   * Folder where image is saved.
   *
   * @generated from field: string folder = 7;
   */
  folder: string;

  /**
   * Media image url. Mapped internally with media path. Not used in DB.
   *
   * @generated from field: string image_url = 8;
   */
  imageUrl: string;

  constructor(data?: PartialMessage<Media>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.Media";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Media;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Media;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Media;

  static equals(a: Media | PlainMessage<Media> | undefined, b: Media | PlainMessage<Media> | undefined): boolean;
}

