// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/models/city.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {Country} from "./country_pb.js";
import type {Media} from "./media_pb.js";
import type {Region} from "./region_pb.js";
import type {Weather} from "../commons/weather_pb.js";
import type {PropertyType} from "./property_type_pb.js";
import type {PropertyChain} from "./property_chain_pb.js";
import type {Gds} from "./gds_pb.js";

/**
 * City message is returned in most of the city CRUD operations and as an association for multiple different messages. Contains all the info for a specific city.
 *
 * @generated from message elude.proto.City
 */
export declare class City extends Message<City> {
  /**
   * City id.
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * City name.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * City description.
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * City iata code.
   *
   * @generated from field: string iata_code = 4;
   */
  iataCode: string;

  /**
   * If true city is connected. For now only connected cities are used.
   *
   * @generated from field: bool is_connected = 5;
   */
  isConnected: boolean;

  /**
   * City latitude coordinate.
   *
   * @generated from field: string lat = 6;
   */
  lat: string;

  /**
   * City longitude coordinate.
   *
   * @generated from field: string long = 7;
   */
  long: string;

  /**
   * City country id.
   *
   * @generated from field: int32 country_id = 8;
   */
  countryId: number;

  /**
   * City country data.
   *
   * @generated from field: elude.proto.Country country = 9;
   */
  country?: Country;

  /**
   * City image id in database media table.
   *
   * @generated from field: int32 image_id = 10;
   */
  imageId: number;

  /**
   * City media data.
   *
   * @generated from field: elude.proto.Media media = 11;
   */
  media?: Media;

  /**
   * City region id.
   *
   * @generated from field: int32 region_id = 12;
   */
  regionId: number;

  /**
   * City region data.
   *
   * @generated from field: elude.proto.Region region = 13;
   */
  region?: Region;

  /**
   * List od city airports data.
   *
   * @generated from field: repeated elude.proto.Airport airports = 14;
   */
  airports: Airport[];

  /**
   * City weather. Not used in DB.
   *
   * @generated from field: elude.proto.Weather weather = 15;
   */
  weather?: Weather;

  /**
   * Nearest connected city data.
   *
   * @generated from field: elude.proto.City nearest_connected_city = 16;
   */
  nearestConnectedCity?: City;

  /**
   * Distance in miles. Currently not used. Not used in DB.
   *
   * @generated from field: float distance_mi = 17;
   */
  distanceMi: number;

  /**
   * List of city properties data.
   *
   * @generated from field: repeated elude.proto.Property properties = 18;
   */
  properties: Property[];

  /**
   * If true city is prioritised in package search and shown as featured location.
   *
   * @generated from field: bool is_recommended = 19;
   */
  isRecommended: boolean;

  constructor(data?: PartialMessage<City>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.City";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): City;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): City;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): City;

  static equals(a: City | PlainMessage<City> | undefined, b: City | PlainMessage<City> | undefined): boolean;
}

/**
 * Airport message is returned in most of the airport CRUD operations and as an association for multiple different messages. Contains all the info for a specific airport.
 *
 * @generated from message elude.proto.Airport
 */
export declare class Airport extends Message<Airport> {
  /**
   * Airport id.
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * Airport name.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Airport iata code.
   *
   * @generated from field: string iata_code = 3;
   */
  iataCode: string;

  /**
   * Airport identity. Short airport code (e.g. FNBG).
   *
   * @generated from field: string identity = 4;
   */
  identity: string;

  /**
   * Airport elevation. In feet.
   *
   * @generated from field: string elevation = 5;
   */
  elevation: string;

  /**
   * Airport gds code. Short code (e.g. KCNY).
   *
   * @generated from field: string gps_code = 6;
   */
  gpsCode: string;

  /**
   * Airport latitude coordinate.
   *
   * @generated from field: string lat = 7;
   */
  lat: string;

  /**
   * Airport longitude coordinate.
   *
   * @generated from field: string long = 8;
   */
  long: string;

  /**
   * Airport type (e.g. small_airport, seaplane_base).
   *
   * @generated from field: string type = 9;
   */
  type: string;

  /**
   * If true airport is active.
   *
   * @generated from field: bool is_active = 10;
   */
  isActive: boolean;

  /**
   * Airport city id.
   *
   * @generated from field: int32 city_id = 11;
   */
  cityId: number;

  /**
   * Airport city data.
   *
   * @generated from field: elude.proto.City city = 12;
   */
  city?: City;

  constructor(data?: PartialMessage<Airport>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.Airport";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Airport;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Airport;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Airport;

  static equals(a: Airport | PlainMessage<Airport> | undefined, b: Airport | PlainMessage<Airport> | undefined): boolean;
}

/**
 * Property message is returned as a part of a City message. Contains information on a recommended property for a connected city. Used in budget tier searches.
 *
 * @generated from message elude.proto.Property
 */
export declare class Property extends Message<Property> {
  /**
   * Property id.
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * Property name.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Property address.
   *
   * @generated from field: string address = 3;
   */
  address: string;

  /**
   * Property iata code.
   *
   * @generated from field: string iata_code = 4;
   */
  iataCode: string;

  /**
   * Property postal code.
   *
   * @generated from field: string postal_code = 5;
   */
  postalCode: string;

  /**
   * Property rating (10 is highest).
   *
   * @generated from field: string rating = 6;
   */
  rating: string;

  /**
   * Property city id.
   *
   * @generated from field: int32 city_id = 7;
   */
  cityId: number;

  /**
   * Property city data.
   *
   * @generated from field: elude.proto.City city = 8;
   */
  city?: City;

  /**
   * Property type id.
   *
   * @generated from field: int32 property_type_id = 9;
   */
  propertyTypeId: number;

  /**
   * Property type data.
   *
   * @generated from field: elude.proto.PropertyType property_type = 10;
   */
  propertyType?: PropertyType;

  /**
   * Property chain id.
   *
   * @generated from field: int32 property_chain_id = 11;
   */
  propertyChainId: number;

  /**
   * Property chain data.
   *
   * @generated from field: elude.proto.PropertyChain property_chain = 12;
   */
  propertyChain?: PropertyChain;

  /**
   * List of property gds data.
   *
   * @generated from field: repeated elude.proto.PropertyGds property_gds = 13;
   */
  propertyGds: PropertyGds[];

  constructor(data?: PartialMessage<Property>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.Property";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Property;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Property;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Property;

  static equals(a: Property | PlainMessage<Property> | undefined, b: Property | PlainMessage<Property> | undefined): boolean;
}

/**
 * PropertyGds is returned as part of a property message. Contains a unique identifier for a property and GDS provider pair.
 *
 * @generated from message elude.proto.PropertyGds
 */
export declare class PropertyGds extends Message<PropertyGds> {
  /**
   * Property id.
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * Property id.
   *
   * @generated from field: int32 property_id = 2;
   */
  propertyId: number;

  /**
   * Property data.
   *
   * @generated from field: elude.proto.Property property = 3;
   */
  property?: Property;

  /**
   * Property gds id.
   *
   * @generated from field: int32 gds_id = 4;
   */
  gdsId: number;

  /**
   * Property gds data.
   *
   * @generated from field: elude.proto.Gds gds = 5;
   */
  gds?: Gds;

  /**
   * Property identifier (e.g. 100012584).
   *
   * @generated from field: string identifier = 6;
   */
  identifier: string;

  constructor(data?: PartialMessage<PropertyGds>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.PropertyGds";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PropertyGds;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PropertyGds;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PropertyGds;

  static equals(a: PropertyGds | PlainMessage<PropertyGds> | undefined, b: PropertyGds | PlainMessage<PropertyGds> | undefined): boolean;
}

