// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/models/location.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {LocationTypeEnum} from "../commons/enum_pb.js";
import type {LocationMetadata} from "../commons/metadata_pb.js";

/**
 * Location message is returned as part of location requests. Contains all the info about locations.
 *
 * @generated from message elude.proto.Location
 */
export declare class Location extends Message<Location> {
  /**
   * Location id.
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * Location name.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Location description.
   *
   * @generated from field: string display_description = 3;
   */
  displayDescription: string;

  /**
   * Location image url.
   *
   * @generated from field: string image_url = 4;
   */
  imageUrl: string;

  /**
   * Location iata code.
   *
   * @generated from field: string iata_code = 5;
   */
  iataCode: string;

  /**
   * Location type (metropolitan area/city/airport/region/country/location)
   *
   * @generated from field: elude.proto.LocationTypeEnum location_type = 6;
   */
  locationType: LocationTypeEnum;

  /**
   * Every location can have multiple sub locations.
   *
   * @generated from field: repeated elude.proto.Location sublocations = 7;
   */
  sublocations: Location[];

  /**
   * Contains location data. Depends on location type.
   *
   * @generated from field: elude.proto.LocationMetadata metadata = 8;
   */
  metadata?: LocationMetadata;

  constructor(data?: PartialMessage<Location>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.Location";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Location;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Location;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Location;

  static equals(a: Location | PlainMessage<Location> | undefined, b: Location | PlainMessage<Location> | undefined): boolean;
}

