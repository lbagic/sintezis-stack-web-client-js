// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/booking/booking_response.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {SessionInfo} from "../commons/session_info_pb.js";
import type {Booking} from "../models/booking_pb.js";
import type {Status} from "../commons/status_pb.js";
import type {Traveller} from "../models/traveller_pb.js";
import type {Pagination} from "../commons/pagination_pb.js";
import type {Sticker} from "../models/sticker_pb.js";
import type {StickerUser} from "../models/sticker_user_pb.js";
import type {Amenity} from "../models/amenity_pb.js";
import type {Gds} from "../models/gds_pb.js";
import type {FlightType} from "../models/flight_type_pb.js";
import type {MealPlan} from "../models/meal_plan_pb.js";
import type {RoomViewType} from "../models/room_view_type_pb.js";

/**
 * BookingResponse is used for all rpc calls that return booking. 
 *
 * @generated from message elude.proto.BookingResponse
 */
export declare class BookingResponse extends Message<BookingResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Booking data from booking requests.
   *
   * @generated from field: elude.proto.Booking booking = 2;
   */
  booking?: Booking;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<BookingResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.BookingResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BookingResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BookingResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BookingResponse;

  static equals(a: BookingResponse | PlainMessage<BookingResponse> | undefined, b: BookingResponse | PlainMessage<BookingResponse> | undefined): boolean;
}

/**
 * BookingResponse is used for all rpc calls that return multiple bookings.
 *
 * @generated from message elude.proto.GetBookingsResponse
 */
export declare class GetBookingsResponse extends Message<GetBookingsResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 2;
   */
  status?: Status;

  /**
   * List of Bookings data from bookings requests.
   *
   * @generated from field: repeated elude.proto.Booking bookings = 3;
   */
  bookings: Booking[];

  constructor(data?: PartialMessage<GetBookingsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetBookingsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBookingsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBookingsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBookingsResponse;

  static equals(a: GetBookingsResponse | PlainMessage<GetBookingsResponse> | undefined, b: GetBookingsResponse | PlainMessage<GetBookingsResponse> | undefined): boolean;
}

/**
 * @generated from message elude.proto.GetHomeBookingsResponse
 */
export declare class GetHomeBookingsResponse extends Message<GetHomeBookingsResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 2;
   */
  status?: Status;

  /**
   * Current booking data.
   *
   * @generated from field: elude.proto.Booking current_booking = 3;
   */
  currentBooking?: Booking;

  /**
   * Upcoming booking data.
   *
   * @generated from field: elude.proto.Booking upcoming_booking = 4;
   */
  upcomingBooking?: Booking;

  constructor(data?: PartialMessage<GetHomeBookingsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetHomeBookingsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHomeBookingsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHomeBookingsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHomeBookingsResponse;

  static equals(a: GetHomeBookingsResponse | PlainMessage<GetHomeBookingsResponse> | undefined, b: GetHomeBookingsResponse | PlainMessage<GetHomeBookingsResponse> | undefined): boolean;
}

/**
 * @generated from message elude.proto.GetTravelStatsResponse
 */
export declare class GetTravelStatsResponse extends Message<GetTravelStatsResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 2;
   */
  status?: Status;

  /**
   * Number of completed trips.
   *
   * @generated from field: int32 total_trips = 3;
   */
  totalTrips: number;

  /**
   * Total miles traveled.
   *
   * @generated from field: float miles_traveled = 4;
   */
  milesTraveled: number;

  /**
   * Number of countries visited.
   *
   * @generated from field: int32 countries_visited = 5;
   */
  countriesVisited: number;

  constructor(data?: PartialMessage<GetTravelStatsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetTravelStatsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTravelStatsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTravelStatsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTravelStatsResponse;

  static equals(a: GetTravelStatsResponse | PlainMessage<GetTravelStatsResponse> | undefined, b: GetTravelStatsResponse | PlainMessage<GetTravelStatsResponse> | undefined): boolean;
}

/**
 * Empty response for all rpc calls that dump emails for testing purposes
 *
 * @generated from message elude.proto.SendEmailsResponse
 */
export declare class SendEmailsResponse extends Message<SendEmailsResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 2;
   */
  status?: Status;

  constructor(data?: PartialMessage<SendEmailsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.SendEmailsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendEmailsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendEmailsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendEmailsResponse;

  static equals(a: SendEmailsResponse | PlainMessage<SendEmailsResponse> | undefined, b: SendEmailsResponse | PlainMessage<SendEmailsResponse> | undefined): boolean;
}

/**
 * @generated from message elude.proto.TravellersResponse
 */
export declare class TravellersResponse extends Message<TravellersResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of traveller data from travellers requests.
   *
   * @generated from field: repeated elude.proto.Traveller travellers = 2;
   */
  travellers: Traveller[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<TravellersResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.TravellersResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TravellersResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TravellersResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TravellersResponse;

  static equals(a: TravellersResponse | PlainMessage<TravellersResponse> | undefined, b: TravellersResponse | PlainMessage<TravellersResponse> | undefined): boolean;
}

/**
 * @generated from message elude.proto.TravellerResponse
 */
export declare class TravellerResponse extends Message<TravellerResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Traveller data from traveller requests.
   *
   * @generated from field: elude.proto.Traveller traveller = 2;
   */
  traveller?: Traveller;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<TravellerResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.TravellerResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TravellerResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TravellerResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TravellerResponse;

  static equals(a: TravellerResponse | PlainMessage<TravellerResponse> | undefined, b: TravellerResponse | PlainMessage<TravellerResponse> | undefined): boolean;
}

/**
 * @generated from message elude.proto.StickerResponse
 */
export declare class StickerResponse extends Message<StickerResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Sticker data from sticker requests.
   *
   * @generated from field: elude.proto.Sticker sticker = 2;
   */
  sticker?: Sticker;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<StickerResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.StickerResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StickerResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StickerResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StickerResponse;

  static equals(a: StickerResponse | PlainMessage<StickerResponse> | undefined, b: StickerResponse | PlainMessage<StickerResponse> | undefined): boolean;
}

/**
 * @generated from message elude.proto.StickersResponse
 */
export declare class StickersResponse extends Message<StickersResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of stickers data from stickers requests.
   *
   * @generated from field: repeated elude.proto.Sticker stickers = 2;
   */
  stickers: Sticker[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * Used to paginate resposne data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<StickersResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.StickersResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StickersResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StickersResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StickersResponse;

  static equals(a: StickersResponse | PlainMessage<StickersResponse> | undefined, b: StickersResponse | PlainMessage<StickersResponse> | undefined): boolean;
}

/**
 * @generated from message elude.proto.StickerUserResponse
 */
export declare class StickerUserResponse extends Message<StickerUserResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of sticker users from sticker users requests.
   *
   * @generated from field: repeated elude.proto.StickerUser stickers = 2;
   */
  stickers: StickerUser[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<StickerUserResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.StickerUserResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StickerUserResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StickerUserResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StickerUserResponse;

  static equals(a: StickerUserResponse | PlainMessage<StickerUserResponse> | undefined, b: StickerUserResponse | PlainMessage<StickerUserResponse> | undefined): boolean;
}

/**
 * @generated from message elude.proto.AmenityResponse
 */
export declare class AmenityResponse extends Message<AmenityResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Amenity data from amenity requests.
   *
   * @generated from field: elude.proto.Amenity amenity = 2;
   */
  amenity?: Amenity;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<AmenityResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.AmenityResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AmenityResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AmenityResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AmenityResponse;

  static equals(a: AmenityResponse | PlainMessage<AmenityResponse> | undefined, b: AmenityResponse | PlainMessage<AmenityResponse> | undefined): boolean;
}

/**
 * @generated from message elude.proto.AmenitiesResponse
 */
export declare class AmenitiesResponse extends Message<AmenitiesResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List amenities data from amenities requests.
   *
   * @generated from field: repeated elude.proto.Amenity amenities = 2;
   */
  amenities: Amenity[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<AmenitiesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.AmenitiesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AmenitiesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AmenitiesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AmenitiesResponse;

  static equals(a: AmenitiesResponse | PlainMessage<AmenitiesResponse> | undefined, b: AmenitiesResponse | PlainMessage<AmenitiesResponse> | undefined): boolean;
}

/**
 * @generated from message elude.proto.GdsResponse
 */
export declare class GdsResponse extends Message<GdsResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Gds data from gds requests.
   *
   * @generated from field: elude.proto.Gds gds = 2;
   */
  gds?: Gds;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<GdsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GdsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GdsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GdsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GdsResponse;

  static equals(a: GdsResponse | PlainMessage<GdsResponse> | undefined, b: GdsResponse | PlainMessage<GdsResponse> | undefined): boolean;
}

/**
 * @generated from message elude.proto.AllGdsResponse
 */
export declare class AllGdsResponse extends Message<AllGdsResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List all gds data from all gds requests.
   *
   * @generated from field: repeated elude.proto.Gds gds = 2;
   */
  gds: Gds[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<AllGdsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.AllGdsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllGdsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllGdsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllGdsResponse;

  static equals(a: AllGdsResponse | PlainMessage<AllGdsResponse> | undefined, b: AllGdsResponse | PlainMessage<AllGdsResponse> | undefined): boolean;
}

/**
 * @generated from message elude.proto.FlightTypeResponse
 */
export declare class FlightTypeResponse extends Message<FlightTypeResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Flight type data from flight type requests.
   *
   * @generated from field: elude.proto.FlightType flight_type = 2;
   */
  flightType?: FlightType;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<FlightTypeResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.FlightTypeResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlightTypeResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlightTypeResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlightTypeResponse;

  static equals(a: FlightTypeResponse | PlainMessage<FlightTypeResponse> | undefined, b: FlightTypeResponse | PlainMessage<FlightTypeResponse> | undefined): boolean;
}

/**
 * @generated from message elude.proto.FlightTypesResponse
 */
export declare class FlightTypesResponse extends Message<FlightTypesResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List flight types data from flight types requests.
   *
   * @generated from field: repeated elude.proto.FlightType flight_types = 2;
   */
  flightTypes: FlightType[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<FlightTypesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.FlightTypesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlightTypesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlightTypesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlightTypesResponse;

  static equals(a: FlightTypesResponse | PlainMessage<FlightTypesResponse> | undefined, b: FlightTypesResponse | PlainMessage<FlightTypesResponse> | undefined): boolean;
}

/**
 * @generated from message elude.proto.MealPlanResponse
 */
export declare class MealPlanResponse extends Message<MealPlanResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Meal plan data from meal plan requests.
   *
   * @generated from field: elude.proto.MealPlan meal_plan = 2;
   */
  mealPlan?: MealPlan;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<MealPlanResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.MealPlanResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MealPlanResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MealPlanResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MealPlanResponse;

  static equals(a: MealPlanResponse | PlainMessage<MealPlanResponse> | undefined, b: MealPlanResponse | PlainMessage<MealPlanResponse> | undefined): boolean;
}

/**
 * @generated from message elude.proto.MealPlansResponse
 */
export declare class MealPlansResponse extends Message<MealPlansResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List meal plans data from meal plans requests.
   *
   * @generated from field: repeated elude.proto.MealPlan meal_plans = 2;
   */
  mealPlans: MealPlan[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<MealPlansResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.MealPlansResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MealPlansResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MealPlansResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MealPlansResponse;

  static equals(a: MealPlansResponse | PlainMessage<MealPlansResponse> | undefined, b: MealPlansResponse | PlainMessage<MealPlansResponse> | undefined): boolean;
}

/**
 * @generated from message elude.proto.RoomViewTypeResponse
 */
export declare class RoomViewTypeResponse extends Message<RoomViewTypeResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Room view type data from room view type requests.
   *
   * @generated from field: elude.proto.RoomViewType room_view_type = 2;
   */
  roomViewType?: RoomViewType;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<RoomViewTypeResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.RoomViewTypeResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoomViewTypeResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoomViewTypeResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoomViewTypeResponse;

  static equals(a: RoomViewTypeResponse | PlainMessage<RoomViewTypeResponse> | undefined, b: RoomViewTypeResponse | PlainMessage<RoomViewTypeResponse> | undefined): boolean;
}

/**
 * @generated from message elude.proto.RoomViewTypesResponse
 */
export declare class RoomViewTypesResponse extends Message<RoomViewTypesResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List room view types data from room view types requests.
   *
   * @generated from field: repeated elude.proto.RoomViewType room_view_types = 2;
   */
  roomViewTypes: RoomViewType[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<RoomViewTypesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.RoomViewTypesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoomViewTypesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoomViewTypesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoomViewTypesResponse;

  static equals(a: RoomViewTypesResponse | PlainMessage<RoomViewTypesResponse> | undefined, b: RoomViewTypesResponse | PlainMessage<RoomViewTypesResponse> | undefined): boolean;
}

