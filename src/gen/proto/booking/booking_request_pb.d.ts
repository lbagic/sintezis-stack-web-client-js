// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/booking/booking_request.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {Auth} from "../commons/auth_pb.js";
import type {SessionInfo} from "../commons/session_info_pb.js";
import type {Options} from "../commons/options_pb.js";
import type {Pagination} from "../commons/pagination_pb.js";
import type {FilterOptions} from "../commons/filter_options_pb.js";
import type {Traveller} from "../models/traveller_pb.js";
import type {Sticker} from "../models/sticker_pb.js";
import type {UpdateAmenityWithImageData, UpdateStickerWithImageData} from "../commons/image_data_pb.js";
import type {Amenity} from "../models/amenity_pb.js";
import type {Gds} from "../models/gds_pb.js";
import type {MealPlan} from "../models/meal_plan_pb.js";
import type {RoomViewType} from "../models/room_view_type_pb.js";
import type {FlightType} from "../models/flight_type_pb.js";

/**
 * GetBookingsRequest is used for all rpc calls that return multiple bookings based on a user ID. Currently used in GetBookings,
 * GetCompletedBookings, GetUpcomingBookings, GetCurrentBookings, GetHomeBookings.
 *
 * @generated from message elude.proto.GetBookingsRequest
 */
export declare class GetBookingsRequest extends Message<GetBookingsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Bookings user id.
   *
   * @generated from field: int32 user_id = 4;
   */
  userId: number;

  constructor(data?: PartialMessage<GetBookingsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetBookingsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBookingsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBookingsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBookingsRequest;

  static equals(a: GetBookingsRequest | PlainMessage<GetBookingsRequest> | undefined, b: GetBookingsRequest | PlainMessage<GetBookingsRequest> | undefined): boolean;
}

/**
 * GetBookingRequest is used for GetBooking rpc calls. Used to fetch a single booking by ID from DB.
 *
 * @generated from message elude.proto.GetBookingRequest
 */
export declare class GetBookingRequest extends Message<GetBookingRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Booking id for get booking in database bookings table.
   *
   * @generated from field: int32 id = 4;
   */
  id: number;

  constructor(data?: PartialMessage<GetBookingRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetBookingRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBookingRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBookingRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBookingRequest;

  static equals(a: GetBookingRequest | PlainMessage<GetBookingRequest> | undefined, b: GetBookingRequest | PlainMessage<GetBookingRequest> | undefined): boolean;
}

/**
 * ChangeBookingStatusRequest is used in ChangeBookingStatus rpc calls.
 *
 * @generated from message elude.proto.ChangeBookingStatusRequest
 */
export declare class ChangeBookingStatusRequest extends Message<ChangeBookingStatusRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Booking id for change booking in database bookings table.
   *
   * @generated from field: int32 id = 4;
   */
  id: number;

  /**
   * Booking status id for change booking status in booking statuses table.
   *
   * @generated from field: int32 booking_status_id = 5;
   */
  bookingStatusId: number;

  constructor(data?: PartialMessage<ChangeBookingStatusRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.ChangeBookingStatusRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeBookingStatusRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeBookingStatusRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeBookingStatusRequest;

  static equals(a: ChangeBookingStatusRequest | PlainMessage<ChangeBookingStatusRequest> | undefined, b: ChangeBookingStatusRequest | PlainMessage<ChangeBookingStatusRequest> | undefined): boolean;
}

/**
 * GetBookingByEludeReferenceRequest is used for GetBooking rpc calls. Used to fetch a single booking by ID from DB.
 *
 * @generated from message elude.proto.GetBookingByEludeReferenceRequest
 */
export declare class GetBookingByEludeReferenceRequest extends Message<GetBookingByEludeReferenceRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Elude pnr for get booking by elude pnr in database bookings table.
   *
   * @generated from field: string elude_reference = 4;
   */
  eludeReference: string;

  constructor(data?: PartialMessage<GetBookingByEludeReferenceRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetBookingByEludeReferenceRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBookingByEludeReferenceRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBookingByEludeReferenceRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBookingByEludeReferenceRequest;

  static equals(a: GetBookingByEludeReferenceRequest | PlainMessage<GetBookingByEludeReferenceRequest> | undefined, b: GetBookingByEludeReferenceRequest | PlainMessage<GetBookingByEludeReferenceRequest> | undefined): boolean;
}

/**
 * GetTravelStatsRequest is used in GetTravelStats rpc calls. Clients should use this to get all travel stats for a single user.
 *
 * @generated from message elude.proto.GetTravelStatsRequest
 */
export declare class GetTravelStatsRequest extends Message<GetTravelStatsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * User id for get travel stats in database users table.
   *
   * @generated from field: int32 user_id = 4;
   */
  userId: number;

  constructor(data?: PartialMessage<GetTravelStatsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetTravelStatsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTravelStatsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTravelStatsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTravelStatsRequest;

  static equals(a: GetTravelStatsRequest | PlainMessage<GetTravelStatsRequest> | undefined, b: GetTravelStatsRequest | PlainMessage<GetTravelStatsRequest> | undefined): boolean;
}

/**
 * SendEmailsRequest is used in all rpc calls that dump emails for testing purposes
 *
 * @generated from message elude.proto.SendEmailsRequest
 */
export declare class SendEmailsRequest extends Message<SendEmailsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Booking id for send booking emails in database bookings table.
   *
   * @generated from field: int32 id = 4;
   */
  id: number;

  constructor(data?: PartialMessage<SendEmailsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.SendEmailsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendEmailsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendEmailsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendEmailsRequest;

  static equals(a: SendEmailsRequest | PlainMessage<SendEmailsRequest> | undefined, b: SendEmailsRequest | PlainMessage<SendEmailsRequest> | undefined): boolean;
}

/**
 * GetTravellersRequest is used for GetTravellers rpc calls. Used to fetch all travellers from DB.
 *
 * @generated from message elude.proto.GetTravellersRequest
 */
export declare class GetTravellersRequest extends Message<GetTravellersRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * User id for get travellers in database users table.
   *
   * @generated from field: int32 userId = 3;
   */
  userId: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 5;
   */
  pagination?: Pagination;

  /**
   * Used to filter response data.
   *
   * @generated from field: elude.proto.FilterOptions filter_options = 6;
   */
  filterOptions?: FilterOptions;

  constructor(data?: PartialMessage<GetTravellersRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetTravellersRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTravellersRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTravellersRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTravellersRequest;

  static equals(a: GetTravellersRequest | PlainMessage<GetTravellersRequest> | undefined, b: GetTravellersRequest | PlainMessage<GetTravellersRequest> | undefined): boolean;
}

/**
 * GetTravellerRequest is used for GetTraveller rpc calls. Used to fetch a single traveller by ID from DB.
 *
 * @generated from message elude.proto.GetTravellerRequest
 */
export declare class GetTravellerRequest extends Message<GetTravellerRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Travellers id for get travellers in database travellers table.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetTravellerRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetTravellerRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTravellerRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTravellerRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTravellerRequest;

  static equals(a: GetTravellerRequest | PlainMessage<GetTravellerRequest> | undefined, b: GetTravellerRequest | PlainMessage<GetTravellerRequest> | undefined): boolean;
}

/**
 * CreateTravellerRequest is used for CreateTraveller rpc calls. Used to add a new traveller to DB.
 *
 * @generated from message elude.proto.CreateTravellerRequest
 */
export declare class CreateTravellerRequest extends Message<CreateTravellerRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Traveller data for create traveller.
   *
   * @generated from field: elude.proto.Traveller traveller = 3;
   */
  traveller?: Traveller;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreateTravellerRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreateTravellerRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTravellerRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTravellerRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTravellerRequest;

  static equals(a: CreateTravellerRequest | PlainMessage<CreateTravellerRequest> | undefined, b: CreateTravellerRequest | PlainMessage<CreateTravellerRequest> | undefined): boolean;
}

/**
 * UpdateTravellerRequest is used for UpdateTraveller rpc calls. Used to update an existing traveller in DB.
 *
 * @generated from message elude.proto.UpdateTravellerRequest
 */
export declare class UpdateTravellerRequest extends Message<UpdateTravellerRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Traveller data for update traveller.
   *
   * @generated from field: elude.proto.Traveller traveller = 3;
   */
  traveller?: Traveller;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdateTravellerRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateTravellerRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTravellerRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTravellerRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTravellerRequest;

  static equals(a: UpdateTravellerRequest | PlainMessage<UpdateTravellerRequest> | undefined, b: UpdateTravellerRequest | PlainMessage<UpdateTravellerRequest> | undefined): boolean;
}

/**
 * DeleteTravellerRequest is used for DeleteTraveller rpc calls. Used to soft delete an existing traveller in DB.
 *
 * @generated from message elude.proto.DeleteTravellerRequest
 */
export declare class DeleteTravellerRequest extends Message<DeleteTravellerRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Traveller id for delete traveller in database travellers table.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeleteTravellerRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeleteTravellerRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTravellerRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTravellerRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTravellerRequest;

  static equals(a: DeleteTravellerRequest | PlainMessage<DeleteTravellerRequest> | undefined, b: DeleteTravellerRequest | PlainMessage<DeleteTravellerRequest> | undefined): boolean;
}

/**
 * GetStickerRequest is used for GetSticker rpc calls. Used to fetch a single sticker by ID from DB.
 *
 * @generated from message elude.proto.GetStickerRequest
 */
export declare class GetStickerRequest extends Message<GetStickerRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Sticker id for get sticker in database stickers table.
   *
   * @generated from field: int32 id = 4;
   */
  id: number;

  constructor(data?: PartialMessage<GetStickerRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetStickerRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStickerRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStickerRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStickerRequest;

  static equals(a: GetStickerRequest | PlainMessage<GetStickerRequest> | undefined, b: GetStickerRequest | PlainMessage<GetStickerRequest> | undefined): boolean;
}

/**
 * GetStickersRequest is used for GetStickers rpc calls. Used to fetch all stickers from DB.
 *
 * @generated from message elude.proto.GetStickersRequest
 */
export declare class GetStickersRequest extends Message<GetStickersRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  /**
   * Used to filter by sticker name.
   *
   * @generated from field: string search = 5;
   */
  search: string;

  /**
   * Used to filter response data.
   *
   * @generated from field: elude.proto.FilterOptions filter_options = 6;
   */
  filterOptions?: FilterOptions;

  constructor(data?: PartialMessage<GetStickersRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetStickersRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStickersRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStickersRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStickersRequest;

  static equals(a: GetStickersRequest | PlainMessage<GetStickersRequest> | undefined, b: GetStickersRequest | PlainMessage<GetStickersRequest> | undefined): boolean;
}

/**
 * GetStickersForUserRequest is used for GetStickersForUser rpc calls. Clients should always use this when fetching
 * stickers for a specific user
 *
 * @generated from message elude.proto.GetStickersForUserRequest
 */
export declare class GetStickersForUserRequest extends Message<GetStickersForUserRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * User id for get stickers for user in database sticker_user table
   *
   * @generated from field: int32 user_id = 4;
   */
  userId: number;

  constructor(data?: PartialMessage<GetStickersForUserRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetStickersForUserRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStickersForUserRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStickersForUserRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStickersForUserRequest;

  static equals(a: GetStickersForUserRequest | PlainMessage<GetStickersForUserRequest> | undefined, b: GetStickersForUserRequest | PlainMessage<GetStickersForUserRequest> | undefined): boolean;
}

/**
 * CreateStickerRequest is used for CreateSticker rpc calls. Used to add a new sticker to DB.
 *
 * @generated from message elude.proto.CreateStickerRequest
 */
export declare class CreateStickerRequest extends Message<CreateStickerRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Sticker data for create sticker.
   *
   * @generated from field: elude.proto.Sticker sticker = 3;
   */
  sticker?: Sticker;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreateStickerRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreateStickerRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateStickerRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateStickerRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateStickerRequest;

  static equals(a: CreateStickerRequest | PlainMessage<CreateStickerRequest> | undefined, b: CreateStickerRequest | PlainMessage<CreateStickerRequest> | undefined): boolean;
}

/**
 * UpdateStickerRequest is used for UpdateSticker rpc calls. Used to update an existing sticker in DB.
 *
 * @generated from message elude.proto.UpdateStickerRequest
 */
export declare class UpdateStickerRequest extends Message<UpdateStickerRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Sticker data for update sticker.
   *
   * @generated from field: elude.proto.Sticker sticker = 3;
   */
  sticker?: Sticker;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdateStickerRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateStickerRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateStickerRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateStickerRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateStickerRequest;

  static equals(a: UpdateStickerRequest | PlainMessage<UpdateStickerRequest> | undefined, b: UpdateStickerRequest | PlainMessage<UpdateStickerRequest> | undefined): boolean;
}

/**
 * DeleteStickerRequest is used for DeleteSticker rpc calls. Used to soft delete an existing sticker in DB.
 *
 * @generated from message elude.proto.DeleteStickerRequest
 */
export declare class DeleteStickerRequest extends Message<DeleteStickerRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Sticker id for delete sticker.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeleteStickerRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeleteStickerRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteStickerRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteStickerRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteStickerRequest;

  static equals(a: DeleteStickerRequest | PlainMessage<DeleteStickerRequest> | undefined, b: DeleteStickerRequest | PlainMessage<DeleteStickerRequest> | undefined): boolean;
}

/**
 * UpdateStickerWithImageRequest is used in UpdateStickerWithImage rpc calls.
 * Clients should use this when they want to add a new image to a sticker.
 *
 * @generated from message elude.proto.UpdateStickerWithImageRequest
 */
export declare class UpdateStickerWithImageRequest extends Message<UpdateStickerWithImageRequest> {
  /**
   * @generated from oneof elude.proto.UpdateStickerWithImageRequest.data
   */
  data: {
    /**
     * Update request data for update sticker with image.
     *
     * @generated from field: elude.proto.UpdateStickerWithImageData updateReq = 1;
     */
    value: UpdateStickerWithImageData;
    case: "updateReq";
  } | {
    /**
     * Image data in byte chunks.
     *
     * @generated from field: bytes chunk_data = 2;
     */
    value: Uint8Array;
    case: "chunkData";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<UpdateStickerWithImageRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateStickerWithImageRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateStickerWithImageRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateStickerWithImageRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateStickerWithImageRequest;

  static equals(a: UpdateStickerWithImageRequest | PlainMessage<UpdateStickerWithImageRequest> | undefined, b: UpdateStickerWithImageRequest | PlainMessage<UpdateStickerWithImageRequest> | undefined): boolean;
}

/**
 * UpdateStickerWithImageUnaryRequest is used in UpdateStickerWithImageUnary rpc calls. Needed for web clients until grpc-web starts supporting
 * client-side streaming.
 *
 * @generated from message elude.proto.UpdateStickerWithImageUnaryRequest
 */
export declare class UpdateStickerWithImageUnaryRequest extends Message<UpdateStickerWithImageUnaryRequest> {
  /**
   * Update request for update sticker with image unary.
   *
   * @generated from field: elude.proto.UpdateStickerWithImageData updateReq = 1;
   */
  updateReq?: UpdateStickerWithImageData;

  /**
   * Image data in bytes.
   *
   * @generated from field: bytes image = 2;
   */
  image: Uint8Array;

  constructor(data?: PartialMessage<UpdateStickerWithImageUnaryRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateStickerWithImageUnaryRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateStickerWithImageUnaryRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateStickerWithImageUnaryRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateStickerWithImageUnaryRequest;

  static equals(a: UpdateStickerWithImageUnaryRequest | PlainMessage<UpdateStickerWithImageUnaryRequest> | undefined, b: UpdateStickerWithImageUnaryRequest | PlainMessage<UpdateStickerWithImageUnaryRequest> | undefined): boolean;
}

/**
 * GetAmenityRequest is used for GetAmenity rpc calls. Used to fetch a single amenity by ID from DB.
 *
 * @generated from message elude.proto.GetAmenityRequest
 */
export declare class GetAmenityRequest extends Message<GetAmenityRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Amenity id for get amenity in database amenities table.
   *
   * @generated from field: int32 id = 4;
   */
  id: number;

  constructor(data?: PartialMessage<GetAmenityRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetAmenityRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAmenityRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAmenityRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAmenityRequest;

  static equals(a: GetAmenityRequest | PlainMessage<GetAmenityRequest> | undefined, b: GetAmenityRequest | PlainMessage<GetAmenityRequest> | undefined): boolean;
}

/**
 * GetAmenitiesRequest is used for GetAmenities rpc calls. Used to fetch all amenities from DB.
 *
 * @generated from message elude.proto.GetAmenitiesRequest
 */
export declare class GetAmenitiesRequest extends Message<GetAmenitiesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  /**
   * Used to filter by amenity name.
   *
   * @generated from field: string search = 5;
   */
  search: string;

  constructor(data?: PartialMessage<GetAmenitiesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetAmenitiesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAmenitiesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAmenitiesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAmenitiesRequest;

  static equals(a: GetAmenitiesRequest | PlainMessage<GetAmenitiesRequest> | undefined, b: GetAmenitiesRequest | PlainMessage<GetAmenitiesRequest> | undefined): boolean;
}

/**
 * CreateAmenityRequest is used for CreateAmenity rpc calls. Used to add a new amenity to DB.
 *
 * @generated from message elude.proto.CreateAmenityRequest
 */
export declare class CreateAmenityRequest extends Message<CreateAmenityRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Amenity data for create amenity.
   *
   * @generated from field: elude.proto.Amenity amenity = 3;
   */
  amenity?: Amenity;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreateAmenityRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreateAmenityRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAmenityRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAmenityRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAmenityRequest;

  static equals(a: CreateAmenityRequest | PlainMessage<CreateAmenityRequest> | undefined, b: CreateAmenityRequest | PlainMessage<CreateAmenityRequest> | undefined): boolean;
}

/**
 * UpdateAmenityRequest is used for UpdateAmenity rpc calls. Used to update an existing amenity in DB.
 *
 * @generated from message elude.proto.UpdateAmenityRequest
 */
export declare class UpdateAmenityRequest extends Message<UpdateAmenityRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Amenity data for update amenity.
   *
   * @generated from field: elude.proto.Amenity amenity = 3;
   */
  amenity?: Amenity;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdateAmenityRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateAmenityRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAmenityRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAmenityRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAmenityRequest;

  static equals(a: UpdateAmenityRequest | PlainMessage<UpdateAmenityRequest> | undefined, b: UpdateAmenityRequest | PlainMessage<UpdateAmenityRequest> | undefined): boolean;
}

/**
 * DeleteAmenityRequest is used for DeleteAmenity rpc calls. Used to soft delete an existing amenity in DB.
 *
 * @generated from message elude.proto.DeleteAmenityRequest
 */
export declare class DeleteAmenityRequest extends Message<DeleteAmenityRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Amenity id for delete amenity.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeleteAmenityRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeleteAmenityRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAmenityRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAmenityRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAmenityRequest;

  static equals(a: DeleteAmenityRequest | PlainMessage<DeleteAmenityRequest> | undefined, b: DeleteAmenityRequest | PlainMessage<DeleteAmenityRequest> | undefined): boolean;
}

/**
 * UpdateAmenityWithImageRequest is used in UpdateAmenityWithImage rpc calls.
 * Clients should use this when they want to add a new image to an amenity.
 *
 * @generated from message elude.proto.UpdateAmenityWithImageRequest
 */
export declare class UpdateAmenityWithImageRequest extends Message<UpdateAmenityWithImageRequest> {
  /**
   * @generated from oneof elude.proto.UpdateAmenityWithImageRequest.data
   */
  data: {
    /**
     * Update request data for update amenity with image.
     *
     * @generated from field: elude.proto.UpdateAmenityWithImageData updateReq = 1;
     */
    value: UpdateAmenityWithImageData;
    case: "updateReq";
  } | {
    /**
     * Image data in byte chunks.
     *
     * @generated from field: bytes chunk_data = 2;
     */
    value: Uint8Array;
    case: "chunkData";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<UpdateAmenityWithImageRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateAmenityWithImageRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAmenityWithImageRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAmenityWithImageRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAmenityWithImageRequest;

  static equals(a: UpdateAmenityWithImageRequest | PlainMessage<UpdateAmenityWithImageRequest> | undefined, b: UpdateAmenityWithImageRequest | PlainMessage<UpdateAmenityWithImageRequest> | undefined): boolean;
}

/**
 * UpdateAmenityWithImageUnaryRequest is used in UpdateAmenityWithImageUnary rpc calls. Needed for web clients until grpc-web starts supporting
 * client-side streaming.
 *
 * @generated from message elude.proto.UpdateAmenityWithImageUnaryRequest
 */
export declare class UpdateAmenityWithImageUnaryRequest extends Message<UpdateAmenityWithImageUnaryRequest> {
  /**
   * Update request for update amenity with image unary.
   *
   * @generated from field: elude.proto.UpdateAmenityWithImageData updateReq = 1;
   */
  updateReq?: UpdateAmenityWithImageData;

  /**
   * Image data in bytes.
   *
   * @generated from field: bytes image = 2;
   */
  image: Uint8Array;

  constructor(data?: PartialMessage<UpdateAmenityWithImageUnaryRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateAmenityWithImageUnaryRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAmenityWithImageUnaryRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAmenityWithImageUnaryRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAmenityWithImageUnaryRequest;

  static equals(a: UpdateAmenityWithImageUnaryRequest | PlainMessage<UpdateAmenityWithImageUnaryRequest> | undefined, b: UpdateAmenityWithImageUnaryRequest | PlainMessage<UpdateAmenityWithImageUnaryRequest> | undefined): boolean;
}

/**
 * GetGdsRequest is used for GetGds rpc calls. Used to fetch a single gds by ID from DB.
 *
 * @generated from message elude.proto.GetGdsRequest
 */
export declare class GetGdsRequest extends Message<GetGdsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Gds id for get gds in database gds table.
   *
   * @generated from field: int32 id = 4;
   */
  id: number;

  constructor(data?: PartialMessage<GetGdsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetGdsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGdsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGdsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGdsRequest;

  static equals(a: GetGdsRequest | PlainMessage<GetGdsRequest> | undefined, b: GetGdsRequest | PlainMessage<GetGdsRequest> | undefined): boolean;
}

/**
 * GetAllGdsRequest is used for GetAllGds rpc calls. Used to fetch all gds from DB.
 *
 * @generated from message elude.proto.GetAllGdsRequest
 */
export declare class GetAllGdsRequest extends Message<GetAllGdsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  /**
   * Used to filter by gds name.
   *
   * @generated from field: string search = 5;
   */
  search: string;

  constructor(data?: PartialMessage<GetAllGdsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetAllGdsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllGdsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllGdsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllGdsRequest;

  static equals(a: GetAllGdsRequest | PlainMessage<GetAllGdsRequest> | undefined, b: GetAllGdsRequest | PlainMessage<GetAllGdsRequest> | undefined): boolean;
}

/**
 * CreateGdsRequest is used for CreateGds rpc calls. Used to add a new gds to DB.
 *
 * @generated from message elude.proto.CreateGdsRequest
 */
export declare class CreateGdsRequest extends Message<CreateGdsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Gds data for create gds.
   *
   * @generated from field: elude.proto.Gds gds = 3;
   */
  gds?: Gds;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreateGdsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreateGdsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateGdsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateGdsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateGdsRequest;

  static equals(a: CreateGdsRequest | PlainMessage<CreateGdsRequest> | undefined, b: CreateGdsRequest | PlainMessage<CreateGdsRequest> | undefined): boolean;
}

/**
 * UpdateGdsRequest is used for UpdateGds rpc calls. Used to update an existing gds in DB.
 *
 * @generated from message elude.proto.UpdateGdsRequest
 */
export declare class UpdateGdsRequest extends Message<UpdateGdsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Gds data for update gds.
   *
   * @generated from field: elude.proto.Gds gds = 3;
   */
  gds?: Gds;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdateGdsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateGdsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateGdsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateGdsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateGdsRequest;

  static equals(a: UpdateGdsRequest | PlainMessage<UpdateGdsRequest> | undefined, b: UpdateGdsRequest | PlainMessage<UpdateGdsRequest> | undefined): boolean;
}

/**
 * DeleteGdsRequest is used for DeleteGds rpc calls. Used to soft delete an existing gds in DB.
 *
 * @generated from message elude.proto.DeleteGdsRequest
 */
export declare class DeleteGdsRequest extends Message<DeleteGdsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Gds id for delete gds.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeleteGdsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeleteGdsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteGdsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteGdsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteGdsRequest;

  static equals(a: DeleteGdsRequest | PlainMessage<DeleteGdsRequest> | undefined, b: DeleteGdsRequest | PlainMessage<DeleteGdsRequest> | undefined): boolean;
}

/**
 * GetMealPlanRequest is used for GetMealPlan rpc calls. Used to fetch a single meal plan by ID from DB.
 *
 * @generated from message elude.proto.GetMealPlanRequest
 */
export declare class GetMealPlanRequest extends Message<GetMealPlanRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Meal plan id for get meal plan in database meal_plans table.
   *
   * @generated from field: int32 id = 4;
   */
  id: number;

  constructor(data?: PartialMessage<GetMealPlanRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetMealPlanRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMealPlanRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMealPlanRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMealPlanRequest;

  static equals(a: GetMealPlanRequest | PlainMessage<GetMealPlanRequest> | undefined, b: GetMealPlanRequest | PlainMessage<GetMealPlanRequest> | undefined): boolean;
}

/**
 * GetMealPlansRequest is used for GetMealPlans rpc calls. Used to fetch all meal plans from DB.
 *
 * @generated from message elude.proto.GetMealPlansRequest
 */
export declare class GetMealPlansRequest extends Message<GetMealPlansRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  /**
   * Used to filter meal plan name.
   *
   * @generated from field: string search = 5;
   */
  search: string;

  constructor(data?: PartialMessage<GetMealPlansRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetMealPlansRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMealPlansRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMealPlansRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMealPlansRequest;

  static equals(a: GetMealPlansRequest | PlainMessage<GetMealPlansRequest> | undefined, b: GetMealPlansRequest | PlainMessage<GetMealPlansRequest> | undefined): boolean;
}

/**
 * CreateMealPlanRequest is used for CreateMealPlan rpc calls. Used to add a new meal plan to DB.
 *
 * @generated from message elude.proto.CreateMealPlanRequest
 */
export declare class CreateMealPlanRequest extends Message<CreateMealPlanRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Meal plan data for create meal plan.
   *
   * @generated from field: elude.proto.MealPlan meal_plan = 3;
   */
  mealPlan?: MealPlan;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreateMealPlanRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreateMealPlanRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateMealPlanRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateMealPlanRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateMealPlanRequest;

  static equals(a: CreateMealPlanRequest | PlainMessage<CreateMealPlanRequest> | undefined, b: CreateMealPlanRequest | PlainMessage<CreateMealPlanRequest> | undefined): boolean;
}

/**
 * UpdateMealPlanRequest is used for UpdateMealPlan rpc calls. Used to update an existing meal lan in DB.
 *
 * @generated from message elude.proto.UpdateMealPlanRequest
 */
export declare class UpdateMealPlanRequest extends Message<UpdateMealPlanRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Meal plan data for update meal plan.
   *
   * @generated from field: elude.proto.MealPlan meal_plan = 3;
   */
  mealPlan?: MealPlan;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdateMealPlanRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateMealPlanRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateMealPlanRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateMealPlanRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateMealPlanRequest;

  static equals(a: UpdateMealPlanRequest | PlainMessage<UpdateMealPlanRequest> | undefined, b: UpdateMealPlanRequest | PlainMessage<UpdateMealPlanRequest> | undefined): boolean;
}

/**
 * DeleteMealPlanRequest is used for DeleteMealPlan rpc calls. Used to soft delete an existing meal plan in DB.
 *
 * @generated from message elude.proto.DeleteMealPlanRequest
 */
export declare class DeleteMealPlanRequest extends Message<DeleteMealPlanRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Meal plan id for delete meal plan.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeleteMealPlanRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeleteMealPlanRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMealPlanRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMealPlanRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMealPlanRequest;

  static equals(a: DeleteMealPlanRequest | PlainMessage<DeleteMealPlanRequest> | undefined, b: DeleteMealPlanRequest | PlainMessage<DeleteMealPlanRequest> | undefined): boolean;
}

/**
 * GetRoomViewTypeRequest is used for GetRoomViewType rpc calls. Used to fetch a single room view type by ID from DB.
 *
 * @generated from message elude.proto.GetRoomViewTypeRequest
 */
export declare class GetRoomViewTypeRequest extends Message<GetRoomViewTypeRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Room view type id for get room view type in database room_view_types table.
   *
   * @generated from field: int32 id = 4;
   */
  id: number;

  constructor(data?: PartialMessage<GetRoomViewTypeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetRoomViewTypeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoomViewTypeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoomViewTypeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoomViewTypeRequest;

  static equals(a: GetRoomViewTypeRequest | PlainMessage<GetRoomViewTypeRequest> | undefined, b: GetRoomViewTypeRequest | PlainMessage<GetRoomViewTypeRequest> | undefined): boolean;
}

/**
 * GetRoomViewTypesRequest is used for GetRoomViewTypes rpc calls. Used to fetch all room view types from DB.
 *
 * @generated from message elude.proto.GetRoomViewTypesRequest
 */
export declare class GetRoomViewTypesRequest extends Message<GetRoomViewTypesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  /**
   * Used to filter room view type name.
   *
   * @generated from field: string search = 5;
   */
  search: string;

  constructor(data?: PartialMessage<GetRoomViewTypesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetRoomViewTypesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoomViewTypesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoomViewTypesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoomViewTypesRequest;

  static equals(a: GetRoomViewTypesRequest | PlainMessage<GetRoomViewTypesRequest> | undefined, b: GetRoomViewTypesRequest | PlainMessage<GetRoomViewTypesRequest> | undefined): boolean;
}

/**
 * CreateRoomViewTypeRequest is used for CreateRoomViewType rpc calls. Used to add a new room view type to DB.
 *
 * @generated from message elude.proto.CreateRoomViewTypeRequest
 */
export declare class CreateRoomViewTypeRequest extends Message<CreateRoomViewTypeRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Room view type data for create room view type.
   *
   * @generated from field: elude.proto.RoomViewType room_view_type = 3;
   */
  roomViewType?: RoomViewType;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreateRoomViewTypeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreateRoomViewTypeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRoomViewTypeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRoomViewTypeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRoomViewTypeRequest;

  static equals(a: CreateRoomViewTypeRequest | PlainMessage<CreateRoomViewTypeRequest> | undefined, b: CreateRoomViewTypeRequest | PlainMessage<CreateRoomViewTypeRequest> | undefined): boolean;
}

/**
 * UpdateRoomViewTypeRequest is used for UpdateRoomViewType rpc calls. Used to update an existing room view type in DB.
 *
 * @generated from message elude.proto.UpdateRoomViewTypeRequest
 */
export declare class UpdateRoomViewTypeRequest extends Message<UpdateRoomViewTypeRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Room view type data for update room view type.
   *
   * @generated from field: elude.proto.RoomViewType room_view_type = 3;
   */
  roomViewType?: RoomViewType;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdateRoomViewTypeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateRoomViewTypeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRoomViewTypeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRoomViewTypeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRoomViewTypeRequest;

  static equals(a: UpdateRoomViewTypeRequest | PlainMessage<UpdateRoomViewTypeRequest> | undefined, b: UpdateRoomViewTypeRequest | PlainMessage<UpdateRoomViewTypeRequest> | undefined): boolean;
}

/**
 * DeleteRoomViewTypeRequest is used for DeleteRoomViewType rpc calls. Used to soft delete an existing room view type in DB.
 *
 * @generated from message elude.proto.DeleteRoomViewTypeRequest
 */
export declare class DeleteRoomViewTypeRequest extends Message<DeleteRoomViewTypeRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Room view type id for delete room view type.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeleteRoomViewTypeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeleteRoomViewTypeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRoomViewTypeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRoomViewTypeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRoomViewTypeRequest;

  static equals(a: DeleteRoomViewTypeRequest | PlainMessage<DeleteRoomViewTypeRequest> | undefined, b: DeleteRoomViewTypeRequest | PlainMessage<DeleteRoomViewTypeRequest> | undefined): boolean;
}

/**
 * GetFlightTypeRequest is used for GetFlightType rpc calls. Used to fetch a single flight type by ID from DB.
 *
 * @generated from message elude.proto.GetFlightTypeRequest
 */
export declare class GetFlightTypeRequest extends Message<GetFlightTypeRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Flight type id for get flight type in database flight_types table.
   *
   * @generated from field: int32 id = 4;
   */
  id: number;

  constructor(data?: PartialMessage<GetFlightTypeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetFlightTypeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFlightTypeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFlightTypeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFlightTypeRequest;

  static equals(a: GetFlightTypeRequest | PlainMessage<GetFlightTypeRequest> | undefined, b: GetFlightTypeRequest | PlainMessage<GetFlightTypeRequest> | undefined): boolean;
}

/**
 * GetFlightTypesRequest is used for GetFlightTypes rpc calls. Used to fetch all flight types from DB.
 *
 * @generated from message elude.proto.GetFlightTypesRequest
 */
export declare class GetFlightTypesRequest extends Message<GetFlightTypesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  /**
   * Used to filter flight type name.
   *
   * @generated from field: string search = 5;
   */
  search: string;

  constructor(data?: PartialMessage<GetFlightTypesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetFlightTypesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFlightTypesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFlightTypesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFlightTypesRequest;

  static equals(a: GetFlightTypesRequest | PlainMessage<GetFlightTypesRequest> | undefined, b: GetFlightTypesRequest | PlainMessage<GetFlightTypesRequest> | undefined): boolean;
}

/**
 * CreateFlightTypeRequest is used for CreateFlightType rpc calls. Used to add a new flight type to DB.
 *
 * @generated from message elude.proto.CreateFlightTypeRequest
 */
export declare class CreateFlightTypeRequest extends Message<CreateFlightTypeRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Flight type data for create flight type.
   *
   * @generated from field: elude.proto.FlightType flight_type = 3;
   */
  flightType?: FlightType;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreateFlightTypeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreateFlightTypeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFlightTypeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFlightTypeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFlightTypeRequest;

  static equals(a: CreateFlightTypeRequest | PlainMessage<CreateFlightTypeRequest> | undefined, b: CreateFlightTypeRequest | PlainMessage<CreateFlightTypeRequest> | undefined): boolean;
}

/**
 * UpdateFlightTypeRequest is used for UpdateFlightType rpc calls. Used to update an existing flight type in DB.
 *
 * @generated from message elude.proto.UpdateFlightTypeRequest
 */
export declare class UpdateFlightTypeRequest extends Message<UpdateFlightTypeRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Flight type data for update flight type.
   *
   * @generated from field: elude.proto.FlightType flight_type = 3;
   */
  flightType?: FlightType;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdateFlightTypeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateFlightTypeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateFlightTypeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateFlightTypeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateFlightTypeRequest;

  static equals(a: UpdateFlightTypeRequest | PlainMessage<UpdateFlightTypeRequest> | undefined, b: UpdateFlightTypeRequest | PlainMessage<UpdateFlightTypeRequest> | undefined): boolean;
}

/**
 * DeleteFlightTypeRequest is used for DeletFlightType rpc calls. Used to soft delete an existing flight type in DB.
 *
 * @generated from message elude.proto.DeleteFlightTypeRequest
 */
export declare class DeleteFlightTypeRequest extends Message<DeleteFlightTypeRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Flight type id for delete flight type.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeleteFlightTypeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeleteFlightTypeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFlightTypeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFlightTypeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFlightTypeRequest;

  static equals(a: DeleteFlightTypeRequest | PlainMessage<DeleteFlightTypeRequest> | undefined, b: DeleteFlightTypeRequest | PlainMessage<DeleteFlightTypeRequest> | undefined): boolean;
}

