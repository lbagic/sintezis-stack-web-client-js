// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/booking/booking_request.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3} from "@bufbuild/protobuf";
import {Auth} from "../commons/auth_pb.js";
import {SessionInfo} from "../commons/session_info_pb.js";
import {Options} from "../commons/options_pb.js";
import {Pagination} from "../commons/pagination_pb.js";
import {FilterOptions} from "../commons/filter_options_pb.js";
import {Traveller} from "../models/traveller_pb.js";
import {Sticker} from "../models/sticker_pb.js";
import {UpdateAmenityWithImageData, UpdateStickerWithImageData} from "../commons/image_data_pb.js";
import {Amenity} from "../models/amenity_pb.js";
import {Gds} from "../models/gds_pb.js";
import {MealPlan} from "../models/meal_plan_pb.js";
import {RoomViewType} from "../models/room_view_type_pb.js";
import {FlightType} from "../models/flight_type_pb.js";

/**
 * GetBookingsRequest is used for all rpc calls that return multiple bookings based on a user ID. Currently used in GetBookings,
 * GetCompletedBookings, GetUpcomingBookings, GetCurrentBookings, GetHomeBookings.
 *
 * @generated from message elude.proto.GetBookingsRequest
 */
export const GetBookingsRequest = proto3.makeMessageType(
  "elude.proto.GetBookingsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetBookingRequest is used for GetBooking rpc calls. Used to fetch a single booking by ID from DB.
 *
 * @generated from message elude.proto.GetBookingRequest
 */
export const GetBookingRequest = proto3.makeMessageType(
  "elude.proto.GetBookingRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * ChangeBookingStatusRequest is used in ChangeBookingStatus rpc calls.
 *
 * @generated from message elude.proto.ChangeBookingStatusRequest
 */
export const ChangeBookingStatusRequest = proto3.makeMessageType(
  "elude.proto.ChangeBookingStatusRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "booking_status_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetBookingByEludeReferenceRequest is used for GetBooking rpc calls. Used to fetch a single booking by ID from DB.
 *
 * @generated from message elude.proto.GetBookingByEludeReferenceRequest
 */
export const GetBookingByEludeReferenceRequest = proto3.makeMessageType(
  "elude.proto.GetBookingByEludeReferenceRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "elude_reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * GetTravelStatsRequest is used in GetTravelStats rpc calls. Clients should use this to get all travel stats for a single user.
 *
 * @generated from message elude.proto.GetTravelStatsRequest
 */
export const GetTravelStatsRequest = proto3.makeMessageType(
  "elude.proto.GetTravelStatsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * SendEmailsRequest is used in all rpc calls that dump emails for testing purposes
 *
 * @generated from message elude.proto.SendEmailsRequest
 */
export const SendEmailsRequest = proto3.makeMessageType(
  "elude.proto.SendEmailsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetTravellersRequest is used for GetTravellers rpc calls. Used to fetch all travellers from DB.
 *
 * @generated from message elude.proto.GetTravellersRequest
 */
export const GetTravellersRequest = proto3.makeMessageType(
  "elude.proto.GetTravellersRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "userId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
    { no: 5, name: "pagination", kind: "message", T: Pagination },
    { no: 6, name: "filter_options", kind: "message", T: FilterOptions },
  ],
);

/**
 * GetTravellerRequest is used for GetTraveller rpc calls. Used to fetch a single traveller by ID from DB.
 *
 * @generated from message elude.proto.GetTravellerRequest
 */
export const GetTravellerRequest = proto3.makeMessageType(
  "elude.proto.GetTravellerRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * CreateTravellerRequest is used for CreateTraveller rpc calls. Used to add a new traveller to DB.
 *
 * @generated from message elude.proto.CreateTravellerRequest
 */
export const CreateTravellerRequest = proto3.makeMessageType(
  "elude.proto.CreateTravellerRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "traveller", kind: "message", T: Traveller },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateTravellerRequest is used for UpdateTraveller rpc calls. Used to update an existing traveller in DB.
 *
 * @generated from message elude.proto.UpdateTravellerRequest
 */
export const UpdateTravellerRequest = proto3.makeMessageType(
  "elude.proto.UpdateTravellerRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "traveller", kind: "message", T: Traveller },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeleteTravellerRequest is used for DeleteTraveller rpc calls. Used to soft delete an existing traveller in DB.
 *
 * @generated from message elude.proto.DeleteTravellerRequest
 */
export const DeleteTravellerRequest = proto3.makeMessageType(
  "elude.proto.DeleteTravellerRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetStickerRequest is used for GetSticker rpc calls. Used to fetch a single sticker by ID from DB.
 *
 * @generated from message elude.proto.GetStickerRequest
 */
export const GetStickerRequest = proto3.makeMessageType(
  "elude.proto.GetStickerRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetStickersRequest is used for GetStickers rpc calls. Used to fetch all stickers from DB.
 *
 * @generated from message elude.proto.GetStickersRequest
 */
export const GetStickersRequest = proto3.makeMessageType(
  "elude.proto.GetStickersRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "filter_options", kind: "message", T: FilterOptions },
  ],
);

/**
 * GetStickersForUserRequest is used for GetStickersForUser rpc calls. Clients should always use this when fetching
 * stickers for a specific user
 *
 * @generated from message elude.proto.GetStickersForUserRequest
 */
export const GetStickersForUserRequest = proto3.makeMessageType(
  "elude.proto.GetStickersForUserRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * CreateStickerRequest is used for CreateSticker rpc calls. Used to add a new sticker to DB.
 *
 * @generated from message elude.proto.CreateStickerRequest
 */
export const CreateStickerRequest = proto3.makeMessageType(
  "elude.proto.CreateStickerRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "sticker", kind: "message", T: Sticker },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateStickerRequest is used for UpdateSticker rpc calls. Used to update an existing sticker in DB.
 *
 * @generated from message elude.proto.UpdateStickerRequest
 */
export const UpdateStickerRequest = proto3.makeMessageType(
  "elude.proto.UpdateStickerRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "sticker", kind: "message", T: Sticker },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeleteStickerRequest is used for DeleteSticker rpc calls. Used to soft delete an existing sticker in DB.
 *
 * @generated from message elude.proto.DeleteStickerRequest
 */
export const DeleteStickerRequest = proto3.makeMessageType(
  "elude.proto.DeleteStickerRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateStickerWithImageRequest is used in UpdateStickerWithImage rpc calls.
 * Clients should use this when they want to add a new image to a sticker.
 *
 * @generated from message elude.proto.UpdateStickerWithImageRequest
 */
export const UpdateStickerWithImageRequest = proto3.makeMessageType(
  "elude.proto.UpdateStickerWithImageRequest",
  () => [
    { no: 1, name: "updateReq", kind: "message", T: UpdateStickerWithImageData, oneof: "data" },
    { no: 2, name: "chunk_data", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "data" },
  ],
);

/**
 * UpdateStickerWithImageUnaryRequest is used in UpdateStickerWithImageUnary rpc calls. Needed for web clients until grpc-web starts supporting
 * client-side streaming.
 *
 * @generated from message elude.proto.UpdateStickerWithImageUnaryRequest
 */
export const UpdateStickerWithImageUnaryRequest = proto3.makeMessageType(
  "elude.proto.UpdateStickerWithImageUnaryRequest",
  () => [
    { no: 1, name: "updateReq", kind: "message", T: UpdateStickerWithImageData },
    { no: 2, name: "image", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * GetAmenityRequest is used for GetAmenity rpc calls. Used to fetch a single amenity by ID from DB.
 *
 * @generated from message elude.proto.GetAmenityRequest
 */
export const GetAmenityRequest = proto3.makeMessageType(
  "elude.proto.GetAmenityRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetAmenitiesRequest is used for GetAmenities rpc calls. Used to fetch all amenities from DB.
 *
 * @generated from message elude.proto.GetAmenitiesRequest
 */
export const GetAmenitiesRequest = proto3.makeMessageType(
  "elude.proto.GetAmenitiesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * CreateAmenityRequest is used for CreateAmenity rpc calls. Used to add a new amenity to DB.
 *
 * @generated from message elude.proto.CreateAmenityRequest
 */
export const CreateAmenityRequest = proto3.makeMessageType(
  "elude.proto.CreateAmenityRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "amenity", kind: "message", T: Amenity },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateAmenityRequest is used for UpdateAmenity rpc calls. Used to update an existing amenity in DB.
 *
 * @generated from message elude.proto.UpdateAmenityRequest
 */
export const UpdateAmenityRequest = proto3.makeMessageType(
  "elude.proto.UpdateAmenityRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "amenity", kind: "message", T: Amenity },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeleteAmenityRequest is used for DeleteAmenity rpc calls. Used to soft delete an existing amenity in DB.
 *
 * @generated from message elude.proto.DeleteAmenityRequest
 */
export const DeleteAmenityRequest = proto3.makeMessageType(
  "elude.proto.DeleteAmenityRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateAmenityWithImageRequest is used in UpdateAmenityWithImage rpc calls.
 * Clients should use this when they want to add a new image to an amenity.
 *
 * @generated from message elude.proto.UpdateAmenityWithImageRequest
 */
export const UpdateAmenityWithImageRequest = proto3.makeMessageType(
  "elude.proto.UpdateAmenityWithImageRequest",
  () => [
    { no: 1, name: "updateReq", kind: "message", T: UpdateAmenityWithImageData, oneof: "data" },
    { no: 2, name: "chunk_data", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "data" },
  ],
);

/**
 * UpdateAmenityWithImageUnaryRequest is used in UpdateAmenityWithImageUnary rpc calls. Needed for web clients until grpc-web starts supporting
 * client-side streaming.
 *
 * @generated from message elude.proto.UpdateAmenityWithImageUnaryRequest
 */
export const UpdateAmenityWithImageUnaryRequest = proto3.makeMessageType(
  "elude.proto.UpdateAmenityWithImageUnaryRequest",
  () => [
    { no: 1, name: "updateReq", kind: "message", T: UpdateAmenityWithImageData },
    { no: 2, name: "image", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * GetGdsRequest is used for GetGds rpc calls. Used to fetch a single gds by ID from DB.
 *
 * @generated from message elude.proto.GetGdsRequest
 */
export const GetGdsRequest = proto3.makeMessageType(
  "elude.proto.GetGdsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetAllGdsRequest is used for GetAllGds rpc calls. Used to fetch all gds from DB.
 *
 * @generated from message elude.proto.GetAllGdsRequest
 */
export const GetAllGdsRequest = proto3.makeMessageType(
  "elude.proto.GetAllGdsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * CreateGdsRequest is used for CreateGds rpc calls. Used to add a new gds to DB.
 *
 * @generated from message elude.proto.CreateGdsRequest
 */
export const CreateGdsRequest = proto3.makeMessageType(
  "elude.proto.CreateGdsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "gds", kind: "message", T: Gds },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateGdsRequest is used for UpdateGds rpc calls. Used to update an existing gds in DB.
 *
 * @generated from message elude.proto.UpdateGdsRequest
 */
export const UpdateGdsRequest = proto3.makeMessageType(
  "elude.proto.UpdateGdsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "gds", kind: "message", T: Gds },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeleteGdsRequest is used for DeleteGds rpc calls. Used to soft delete an existing gds in DB.
 *
 * @generated from message elude.proto.DeleteGdsRequest
 */
export const DeleteGdsRequest = proto3.makeMessageType(
  "elude.proto.DeleteGdsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetMealPlanRequest is used for GetMealPlan rpc calls. Used to fetch a single meal plan by ID from DB.
 *
 * @generated from message elude.proto.GetMealPlanRequest
 */
export const GetMealPlanRequest = proto3.makeMessageType(
  "elude.proto.GetMealPlanRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetMealPlansRequest is used for GetMealPlans rpc calls. Used to fetch all meal plans from DB.
 *
 * @generated from message elude.proto.GetMealPlansRequest
 */
export const GetMealPlansRequest = proto3.makeMessageType(
  "elude.proto.GetMealPlansRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * CreateMealPlanRequest is used for CreateMealPlan rpc calls. Used to add a new meal plan to DB.
 *
 * @generated from message elude.proto.CreateMealPlanRequest
 */
export const CreateMealPlanRequest = proto3.makeMessageType(
  "elude.proto.CreateMealPlanRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "meal_plan", kind: "message", T: MealPlan },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateMealPlanRequest is used for UpdateMealPlan rpc calls. Used to update an existing meal lan in DB.
 *
 * @generated from message elude.proto.UpdateMealPlanRequest
 */
export const UpdateMealPlanRequest = proto3.makeMessageType(
  "elude.proto.UpdateMealPlanRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "meal_plan", kind: "message", T: MealPlan },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeleteMealPlanRequest is used for DeleteMealPlan rpc calls. Used to soft delete an existing meal plan in DB.
 *
 * @generated from message elude.proto.DeleteMealPlanRequest
 */
export const DeleteMealPlanRequest = proto3.makeMessageType(
  "elude.proto.DeleteMealPlanRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetRoomViewTypeRequest is used for GetRoomViewType rpc calls. Used to fetch a single room view type by ID from DB.
 *
 * @generated from message elude.proto.GetRoomViewTypeRequest
 */
export const GetRoomViewTypeRequest = proto3.makeMessageType(
  "elude.proto.GetRoomViewTypeRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetRoomViewTypesRequest is used for GetRoomViewTypes rpc calls. Used to fetch all room view types from DB.
 *
 * @generated from message elude.proto.GetRoomViewTypesRequest
 */
export const GetRoomViewTypesRequest = proto3.makeMessageType(
  "elude.proto.GetRoomViewTypesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * CreateRoomViewTypeRequest is used for CreateRoomViewType rpc calls. Used to add a new room view type to DB.
 *
 * @generated from message elude.proto.CreateRoomViewTypeRequest
 */
export const CreateRoomViewTypeRequest = proto3.makeMessageType(
  "elude.proto.CreateRoomViewTypeRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "room_view_type", kind: "message", T: RoomViewType },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateRoomViewTypeRequest is used for UpdateRoomViewType rpc calls. Used to update an existing room view type in DB.
 *
 * @generated from message elude.proto.UpdateRoomViewTypeRequest
 */
export const UpdateRoomViewTypeRequest = proto3.makeMessageType(
  "elude.proto.UpdateRoomViewTypeRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "room_view_type", kind: "message", T: RoomViewType },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeleteRoomViewTypeRequest is used for DeleteRoomViewType rpc calls. Used to soft delete an existing room view type in DB.
 *
 * @generated from message elude.proto.DeleteRoomViewTypeRequest
 */
export const DeleteRoomViewTypeRequest = proto3.makeMessageType(
  "elude.proto.DeleteRoomViewTypeRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetFlightTypeRequest is used for GetFlightType rpc calls. Used to fetch a single flight type by ID from DB.
 *
 * @generated from message elude.proto.GetFlightTypeRequest
 */
export const GetFlightTypeRequest = proto3.makeMessageType(
  "elude.proto.GetFlightTypeRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetFlightTypesRequest is used for GetFlightTypes rpc calls. Used to fetch all flight types from DB.
 *
 * @generated from message elude.proto.GetFlightTypesRequest
 */
export const GetFlightTypesRequest = proto3.makeMessageType(
  "elude.proto.GetFlightTypesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * CreateFlightTypeRequest is used for CreateFlightType rpc calls. Used to add a new flight type to DB.
 *
 * @generated from message elude.proto.CreateFlightTypeRequest
 */
export const CreateFlightTypeRequest = proto3.makeMessageType(
  "elude.proto.CreateFlightTypeRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "flight_type", kind: "message", T: FlightType },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateFlightTypeRequest is used for UpdateFlightType rpc calls. Used to update an existing flight type in DB.
 *
 * @generated from message elude.proto.UpdateFlightTypeRequest
 */
export const UpdateFlightTypeRequest = proto3.makeMessageType(
  "elude.proto.UpdateFlightTypeRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "flight_type", kind: "message", T: FlightType },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeleteFlightTypeRequest is used for DeletFlightType rpc calls. Used to soft delete an existing flight type in DB.
 *
 * @generated from message elude.proto.DeleteFlightTypeRequest
 */
export const DeleteFlightTypeRequest = proto3.makeMessageType(
  "elude.proto.DeleteFlightTypeRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

