// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/auth/auth_request.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {Auth} from "../commons/auth_pb.js";
import type {Options} from "../commons/options_pb.js";
import type {SessionInfo} from "../commons/session_info_pb.js";
import type {AuthProviderEnum, DeviceTypeEnum} from "../commons/enum_pb.js";
import type {Pagination} from "../commons/pagination_pb.js";
import type {FilterOptions} from "../commons/filter_options_pb.js";
import type {User} from "../models/user_pb.js";
import type {Role} from "../models/role_pb.js";

/**
 * AuthRequest is used in Authorize rpc calls. Auth message should always contain a JWT token.
 *
 * @generated from message elude.proto.AuthRequest
 */
export declare class AuthRequest extends Message<AuthRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 2;
   */
  options?: Options;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 3;
   */
  sessionInfo?: SessionInfo;

  constructor(data?: PartialMessage<AuthRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.AuthRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthRequest;

  static equals(a: AuthRequest | PlainMessage<AuthRequest> | undefined, b: AuthRequest | PlainMessage<AuthRequest> | undefined): boolean;
}

/**
 * CheckPermissionRequest is used in internal permission check rpc calls.
 *
 * @generated from message elude.proto.CheckPermissionRequest
 */
export declare class CheckPermissionRequest extends Message<CheckPermissionRequest> {
  /**
   * Used to get user from token.
   *
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * Used to check permission.
   *
   * @generated from field: string permission = 2;
   */
  permission: string;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 4;
   */
  sessionInfo?: SessionInfo;

  constructor(data?: PartialMessage<CheckPermissionRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CheckPermissionRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckPermissionRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckPermissionRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckPermissionRequest;

  static equals(a: CheckPermissionRequest | PlainMessage<CheckPermissionRequest> | undefined, b: CheckPermissionRequest | PlainMessage<CheckPermissionRequest> | undefined): boolean;
}

/**
 * CheckAdditionalPermissionRequest is used in internal permission check rpc calls.
 *
 * @generated from message elude.proto.CheckAdditionalPermissionRequest
 */
export declare class CheckAdditionalPermissionRequest extends Message<CheckAdditionalPermissionRequest> {
  /**
   * Used to check role.
   *
   * @generated from field: string role = 1;
   */
  role: string;

  /**
   * Used to check permission.
   *
   * @generated from field: string permission = 2;
   */
  permission: string;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 4;
   */
  sessionInfo?: SessionInfo;

  constructor(data?: PartialMessage<CheckAdditionalPermissionRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CheckAdditionalPermissionRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckAdditionalPermissionRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckAdditionalPermissionRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckAdditionalPermissionRequest;

  static equals(a: CheckAdditionalPermissionRequest | PlainMessage<CheckAdditionalPermissionRequest> | undefined, b: CheckAdditionalPermissionRequest | PlainMessage<CheckAdditionalPermissionRequest> | undefined): boolean;
}

/**
 * RegisterRequest is used for Rergister rpc calls. Conatins all necessary information to sign up a new user.
 *
 * @generated from message elude.proto.RegisterRequest
 */
export declare class RegisterRequest extends Message<RegisterRequest> {
  /**
   * First name for sign up.
   *
   * @generated from field: string first_name = 1;
   */
  firstName: string;

  /**
   * Last name for sign up.
   *
   * @generated from field: string last_name = 2;
   */
  lastName: string;

  /**
   * Email for sign up.
   *
   * @generated from field: string email = 3;
   */
  email: string;

  /**
   * Password for sign up.
   *
   * @generated from field: string password = 4;
   */
  password: string;

  /**
   * Confirmation password for sign up.
   *
   * @generated from field: string password_confirmation = 5;
   */
  passwordConfirmation: string;

  /**
   * Auth provider for sign up.
   *
   * @generated from field: elude.proto.AuthProviderEnum provider = 11;
   */
  provider: AuthProviderEnum;

  /**
   * Token used for social sign up.
   *
   * @generated from field: string token = 7;
   */
  token: string;

  /**
   * Token secret for twitter sign up.
   *
   * @generated from field: string token_secret = 8;
   */
  tokenSecret: string;

  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 9;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 10;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 12;
   */
  options?: Options;

  /**
   * Enum that specifies the type of user device from which he sent the GRPC call. Clients shouldn't set this.
   *
   * @generated from field: elude.proto.DeviceTypeEnum device_type = 13;
   */
  deviceType: DeviceTypeEnum;

  constructor(data?: PartialMessage<RegisterRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.RegisterRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRequest;

  static equals(a: RegisterRequest | PlainMessage<RegisterRequest> | undefined, b: RegisterRequest | PlainMessage<RegisterRequest> | undefined): boolean;
}

/**
 * LoginRequest is used for Login rpc calls. Client should send this message for login regardless of auth provider used.
 *
 * @generated from message elude.proto.LoginRequest
 */
export declare class LoginRequest extends Message<LoginRequest> {
  /**
   * Auth provider for log in.
   *
   * @generated from field: elude.proto.AuthProviderEnum provider = 8;
   */
  provider: AuthProviderEnum;

  /**
   * Password for log in.
   *
   * @generated from field: string password = 2;
   */
  password: string;

  /**
   * Email for log in.
   *
   * @generated from field: string email = 3;
   */
  email: string;

  /**
   * Token used for social log in.
   *
   * @generated from field: string token = 4;
   */
  token: string;

  /**
   * Token secret used for twitter log in.
   *
   * @generated from field: string token_secret = 5;
   */
  tokenSecret: string;

  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 6;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 7;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 9;
   */
  options?: Options;

  constructor(data?: PartialMessage<LoginRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.LoginRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginRequest;

  static equals(a: LoginRequest | PlainMessage<LoginRequest> | undefined, b: LoginRequest | PlainMessage<LoginRequest> | undefined): boolean;
}

/**
 * VerifyEmailRequest is used for VerifyEmail rpc calls. Clients should send this to validate a new user.
 *
 * @generated from message elude.proto.VerifyEmailRequest
 */
export declare class VerifyEmailRequest extends Message<VerifyEmailRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Verify token used for verify email.
   *
   * @generated from field: string token = 2;
   */
  token: string;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 3;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<VerifyEmailRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.VerifyEmailRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyEmailRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyEmailRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyEmailRequest;

  static equals(a: VerifyEmailRequest | PlainMessage<VerifyEmailRequest> | undefined, b: VerifyEmailRequest | PlainMessage<VerifyEmailRequest> | undefined): boolean;
}

/**
 * PasswordRecoverRequest is used for PasswordRecover rpc calls. Used to generate password recovery token for user.
 *
 * @generated from message elude.proto.PasswordRecoverRequest
 */
export declare class PasswordRecoverRequest extends Message<PasswordRecoverRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Email used for recover user password.
   *
   * @generated from field: string email = 2;
   */
  email: string;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 3;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<PasswordRecoverRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.PasswordRecoverRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PasswordRecoverRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PasswordRecoverRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PasswordRecoverRequest;

  static equals(a: PasswordRecoverRequest | PlainMessage<PasswordRecoverRequest> | undefined, b: PasswordRecoverRequest | PlainMessage<PasswordRecoverRequest> | undefined): boolean;
}

/**
 * PasswordResetRequest is used for PasswordReset rpc calls. Used to change password for user that has an active recovery token.
 *
 * @generated from message elude.proto.PasswordResetRequest
 */
export declare class PasswordResetRequest extends Message<PasswordResetRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Recovery token used for reset user password.
   *
   * @generated from field: string recovery_token = 2;
   */
  recoveryToken: string;

  /**
   * Email used for reset user password.
   *
   * @generated from field: string email = 3;
   */
  email: string;

  /**
   * New user password.
   *
   * @generated from field: string password = 4;
   */
  password: string;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 5;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 6;
   */
  options?: Options;

  constructor(data?: PartialMessage<PasswordResetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.PasswordResetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PasswordResetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PasswordResetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PasswordResetRequest;

  static equals(a: PasswordResetRequest | PlainMessage<PasswordResetRequest> | undefined, b: PasswordResetRequest | PlainMessage<PasswordResetRequest> | undefined): boolean;
}

/**
 * VerifyRecoveryTokenRequest is used for VerifyRecoveryToken rpc calls. Used to verify recovery token for user.
 *
 * @generated from message elude.proto.VerifyRecoveryTokenRequest
 */
export declare class VerifyRecoveryTokenRequest extends Message<VerifyRecoveryTokenRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Recovery token used for verify recovery token from user.
   *
   * @generated from field: string recovery_token = 2;
   */
  recoveryToken: string;

  /**
   * Email used for verify recovery token from user.
   *
   * @generated from field: string email = 3;
   */
  email: string;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 4;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 5;
   */
  options?: Options;

  constructor(data?: PartialMessage<VerifyRecoveryTokenRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.VerifyRecoveryTokenRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyRecoveryTokenRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyRecoveryTokenRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyRecoveryTokenRequest;

  static equals(a: VerifyRecoveryTokenRequest | PlainMessage<VerifyRecoveryTokenRequest> | undefined, b: VerifyRecoveryTokenRequest | PlainMessage<VerifyRecoveryTokenRequest> | undefined): boolean;
}

/**
 * GetUsersRequest is used for GetUsers rpc calls. Used to fetch all users from DB.
 *
 * @generated from message elude.proto.GetUsersRequest
 */
export declare class GetUsersRequest extends Message<GetUsersRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  /**
   * Used to filter response data.
   *
   * @generated from field: elude.proto.FilterOptions filter_options = 5;
   */
  filterOptions?: FilterOptions;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 6;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetUsersRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetUsersRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsersRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsersRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsersRequest;

  static equals(a: GetUsersRequest | PlainMessage<GetUsersRequest> | undefined, b: GetUsersRequest | PlainMessage<GetUsersRequest> | undefined): boolean;
}

/**
 * GetUserRequest is used for GetUser rpc calls. Used to fetch a single user by ID from DB.
 *
 * @generated from message elude.proto.GetUserRequest
 */
export declare class GetUserRequest extends Message<GetUserRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * User id for get user in database user table.
   *
   * @generated from field: int32 id = 2;
   */
  id: number;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 3;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetUserRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetUserRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserRequest;

  static equals(a: GetUserRequest | PlainMessage<GetUserRequest> | undefined, b: GetUserRequest | PlainMessage<GetUserRequest> | undefined): boolean;
}

/**
 * CreateUserRequest is used for CreateUser rpc calls. Used to add a new user to DB.
 *
 * @generated from message elude.proto.CreateUserRequest
 */
export declare class CreateUserRequest extends Message<CreateUserRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Create user data.
   *
   * @generated from field: elude.proto.User user = 2;
   */
  user?: User;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 3;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreateUserRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreateUserRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserRequest;

  static equals(a: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined, b: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined): boolean;
}

/**
 * UpdateUserRequest is used for UpdateUser rpc calls. Used to update an existing user in DB.
 *
 * @generated from message elude.proto.UpdateUserRequest
 */
export declare class UpdateUserRequest extends Message<UpdateUserRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Create update data.
   *
   * @generated from field: elude.proto.User user = 2;
   */
  user?: User;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 3;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdateUserRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateUserRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserRequest;

  static equals(a: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined, b: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined): boolean;
}

/**
 * DeleteUserRequest is used for DeletUser rpc calls. Used to soft delete an existing user in DB.
 *
 * @generated from message elude.proto.DeleteUserRequest
 */
export declare class DeleteUserRequest extends Message<DeleteUserRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * User id for delete user in database user table.
   *
   * @generated from field: int32 id = 2;
   */
  id: number;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 3;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeleteUserRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeleteUserRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserRequest;

  static equals(a: DeleteUserRequest | PlainMessage<DeleteUserRequest> | undefined, b: DeleteUserRequest | PlainMessage<DeleteUserRequest> | undefined): boolean;
}

/**
 * ChangePasswordRequest is used for ChangePassword rpc calls. Used to directly change the user password.
 *
 * @generated from message elude.proto.ChangePasswordRequest
 */
export declare class ChangePasswordRequest extends Message<ChangePasswordRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * User id for change password in database user table.
   *
   * @generated from field: int32 id = 2;
   */
  id: number;

  /**
   * Password for verifying user password.
   *
   * @generated from field: string current_password = 3;
   */
  currentPassword: string;

  /**
   * New password for user.
   *
   * @generated from field: string password = 4;
   */
  password: string;

  /**
   * Confirmation new password for user.
   *
   * @generated from field: string password_confirmation = 5;
   */
  passwordConfirmation: string;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 6;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 7;
   */
  options?: Options;

  constructor(data?: PartialMessage<ChangePasswordRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.ChangePasswordRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangePasswordRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangePasswordRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangePasswordRequest;

  static equals(a: ChangePasswordRequest | PlainMessage<ChangePasswordRequest> | undefined, b: ChangePasswordRequest | PlainMessage<ChangePasswordRequest> | undefined): boolean;
}

/**
 * AddSocialRequest is used for AddSocial rpc calls. Clients should send this when adding a new social account to existing user.
 *
 * @generated from message elude.proto.AddSocialRequest
 */
export declare class AddSocialRequest extends Message<AddSocialRequest> {
  /**
   * Auth provider for add social.
   *
   * @generated from field: elude.proto.AuthProviderEnum provider = 2;
   */
  provider: AuthProviderEnum;

  /**
   * Token for add user social.
   *
   * @generated from field: string token = 3;
   */
  token: string;

  /**
   * Token for add user twitter social.
   *
   * @generated from field: string token_secret = 4;
   */
  tokenSecret: string;

  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 5;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 6;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 7;
   */
  options?: Options;

  constructor(data?: PartialMessage<AddSocialRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.AddSocialRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddSocialRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddSocialRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddSocialRequest;

  static equals(a: AddSocialRequest | PlainMessage<AddSocialRequest> | undefined, b: AddSocialRequest | PlainMessage<AddSocialRequest> | undefined): boolean;
}

/**
 * GetTitlesRequest is used for GetTitles rpc calls. Used to fetch all titles from DB.
 *
 * @generated from message elude.proto.GetTitlesRequest
 */
export declare class GetTitlesRequest extends Message<GetTitlesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetTitlesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetTitlesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTitlesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTitlesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTitlesRequest;

  static equals(a: GetTitlesRequest | PlainMessage<GetTitlesRequest> | undefined, b: GetTitlesRequest | PlainMessage<GetTitlesRequest> | undefined): boolean;
}

/**
 * GetRoleRequest is used for GetRole rpc calls. Used to fetch a single role by ID from DB.
 *
 * @generated from message elude.proto.GetRoleRequest
 */
export declare class GetRoleRequest extends Message<GetRoleRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Role id for get user in database roles table.
   *
   * @generated from field: int32 id = 2;
   */
  id: number;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 3;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetRoleRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetRoleRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoleRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoleRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoleRequest;

  static equals(a: GetRoleRequest | PlainMessage<GetRoleRequest> | undefined, b: GetRoleRequest | PlainMessage<GetRoleRequest> | undefined): boolean;
}

/**
 * GetRolesRequest is used for GetRoles rpc calls. Used to fetch all roles from DB.
 *
 * @generated from message elude.proto.GetRolesRequest
 */
export declare class GetRolesRequest extends Message<GetRolesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetRolesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetRolesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRolesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRolesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRolesRequest;

  static equals(a: GetRolesRequest | PlainMessage<GetRolesRequest> | undefined, b: GetRolesRequest | PlainMessage<GetRolesRequest> | undefined): boolean;
}

/**
 * CreateRoleRequest is used for CreateRoleRequest rpc calls. Used to add a new role to DB.
 *
 * @generated from message elude.proto.CreateRoleRequest
 */
export declare class CreateRoleRequest extends Message<CreateRoleRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Create role data.
   *
   * @generated from field: elude.proto.Role role = 2;
   */
  role?: Role;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 3;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreateRoleRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreateRoleRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRoleRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRoleRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRoleRequest;

  static equals(a: CreateRoleRequest | PlainMessage<CreateRoleRequest> | undefined, b: CreateRoleRequest | PlainMessage<CreateRoleRequest> | undefined): boolean;
}

/**
 * UpdateRoleRequest is used for UpdateRole rpc calls. Used to update an existing role in DB.
 *
 * @generated from message elude.proto.UpdateRoleRequest
 */
export declare class UpdateRoleRequest extends Message<UpdateRoleRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Update role data.
   *
   * @generated from field: elude.proto.Role role = 2;
   */
  role?: Role;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 3;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdateRoleRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateRoleRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRoleRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRoleRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRoleRequest;

  static equals(a: UpdateRoleRequest | PlainMessage<UpdateRoleRequest> | undefined, b: UpdateRoleRequest | PlainMessage<UpdateRoleRequest> | undefined): boolean;
}

/**
 * DeleteRoleRequest is used for DeleteRole rpc calls. Used to soft delete an existing role in DB.
 *
 * @generated from message elude.proto.DeleteRoleRequest
 */
export declare class DeleteRoleRequest extends Message<DeleteRoleRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Role id for delete user in database roles table.
   *
   * @generated from field: int32 id = 2;
   */
  id: number;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 3;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeleteRoleRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeleteRoleRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRoleRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRoleRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRoleRequest;

  static equals(a: DeleteRoleRequest | PlainMessage<DeleteRoleRequest> | undefined, b: DeleteRoleRequest | PlainMessage<DeleteRoleRequest> | undefined): boolean;
}

/**
 * GetPermissionsRequest is used for GetPermissions rpc calls. Used to fetch all permissions from DB.
 *
 * @generated from message elude.proto.GetPermissionsRequest
 */
export declare class GetPermissionsRequest extends Message<GetPermissionsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetPermissionsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetPermissionsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPermissionsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPermissionsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPermissionsRequest;

  static equals(a: GetPermissionsRequest | PlainMessage<GetPermissionsRequest> | undefined, b: GetPermissionsRequest | PlainMessage<GetPermissionsRequest> | undefined): boolean;
}

/**
 * ValidateJwtTokenRequest is used for ValidateJwtToken rpc calls. Used to validate an existing generated JWT token.
 *
 * @generated from message elude.proto.ValidateJwtTokenRequest
 */
export declare class ValidateJwtTokenRequest extends Message<ValidateJwtTokenRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 2;
   */
  options?: Options;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 3;
   */
  sessionInfo?: SessionInfo;

  constructor(data?: PartialMessage<ValidateJwtTokenRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.ValidateJwtTokenRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateJwtTokenRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateJwtTokenRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateJwtTokenRequest;

  static equals(a: ValidateJwtTokenRequest | PlainMessage<ValidateJwtTokenRequest> | undefined, b: ValidateJwtTokenRequest | PlainMessage<ValidateJwtTokenRequest> | undefined): boolean;
}

/**
 * ResendConfirmationEmailRequest is used in rpc calls for resending user confirmation mail.
 *
 * @generated from message elude.proto.ResendConfirmationEmailRequest
 */
export declare class ResendConfirmationEmailRequest extends Message<ResendConfirmationEmailRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * User id for send user emails.
   *
   * @generated from field: int32 user_id = 4;
   */
  userId: number;

  constructor(data?: PartialMessage<ResendConfirmationEmailRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.ResendConfirmationEmailRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResendConfirmationEmailRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResendConfirmationEmailRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResendConfirmationEmailRequest;

  static equals(a: ResendConfirmationEmailRequest | PlainMessage<ResendConfirmationEmailRequest> | undefined, b: ResendConfirmationEmailRequest | PlainMessage<ResendConfirmationEmailRequest> | undefined): boolean;
}

