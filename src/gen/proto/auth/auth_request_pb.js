// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/auth/auth_request.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3} from "@bufbuild/protobuf";
import {Auth} from "../commons/auth_pb.js";
import {Options} from "../commons/options_pb.js";
import {SessionInfo} from "../commons/session_info_pb.js";
import {AuthProviderEnum, DeviceTypeEnum} from "../commons/enum_pb.js";
import {Pagination} from "../commons/pagination_pb.js";
import {FilterOptions} from "../commons/filter_options_pb.js";
import {User} from "../models/user_pb.js";
import {Role} from "../models/role_pb.js";

/**
 * AuthRequest is used in Authorize rpc calls. Auth message should always contain a JWT token.
 *
 * @generated from message elude.proto.AuthRequest
 */
export const AuthRequest = proto3.makeMessageType(
  "elude.proto.AuthRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "options", kind: "message", T: Options },
    { no: 3, name: "session_info", kind: "message", T: SessionInfo },
  ],
);

/**
 * CheckPermissionRequest is used in internal permission check rpc calls.
 *
 * @generated from message elude.proto.CheckPermissionRequest
 */
export const CheckPermissionRequest = proto3.makeMessageType(
  "elude.proto.CheckPermissionRequest",
  () => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "session_info", kind: "message", T: SessionInfo },
  ],
);

/**
 * CheckAdditionalPermissionRequest is used in internal permission check rpc calls.
 *
 * @generated from message elude.proto.CheckAdditionalPermissionRequest
 */
export const CheckAdditionalPermissionRequest = proto3.makeMessageType(
  "elude.proto.CheckAdditionalPermissionRequest",
  () => [
    { no: 1, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "session_info", kind: "message", T: SessionInfo },
  ],
);

/**
 * RegisterRequest is used for Rergister rpc calls. Conatins all necessary information to sign up a new user.
 *
 * @generated from message elude.proto.RegisterRequest
 */
export const RegisterRequest = proto3.makeMessageType(
  "elude.proto.RegisterRequest",
  () => [
    { no: 1, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "password_confirmation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "provider", kind: "enum", T: proto3.getEnumType(AuthProviderEnum) },
    { no: 7, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "token_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "auth", kind: "message", T: Auth },
    { no: 10, name: "session_info", kind: "message", T: SessionInfo },
    { no: 12, name: "options", kind: "message", T: Options },
    { no: 13, name: "device_type", kind: "enum", T: proto3.getEnumType(DeviceTypeEnum) },
  ],
);

/**
 * LoginRequest is used for Login rpc calls. Client should send this message for login regardless of auth provider used.
 *
 * @generated from message elude.proto.LoginRequest
 */
export const LoginRequest = proto3.makeMessageType(
  "elude.proto.LoginRequest",
  () => [
    { no: 8, name: "provider", kind: "enum", T: proto3.getEnumType(AuthProviderEnum) },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "token_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "auth", kind: "message", T: Auth },
    { no: 7, name: "session_info", kind: "message", T: SessionInfo },
    { no: 9, name: "options", kind: "message", T: Options },
  ],
);

/**
 * VerifyEmailRequest is used for VerifyEmail rpc calls. Clients should send this to validate a new user.
 *
 * @generated from message elude.proto.VerifyEmailRequest
 */
export const VerifyEmailRequest = proto3.makeMessageType(
  "elude.proto.VerifyEmailRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "session_info", kind: "message", T: SessionInfo },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * PasswordRecoverRequest is used for PasswordRecover rpc calls. Used to generate password recovery token for user.
 *
 * @generated from message elude.proto.PasswordRecoverRequest
 */
export const PasswordRecoverRequest = proto3.makeMessageType(
  "elude.proto.PasswordRecoverRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "session_info", kind: "message", T: SessionInfo },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * PasswordResetRequest is used for PasswordReset rpc calls. Used to change password for user that has an active recovery token.
 *
 * @generated from message elude.proto.PasswordResetRequest
 */
export const PasswordResetRequest = proto3.makeMessageType(
  "elude.proto.PasswordResetRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "recovery_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "session_info", kind: "message", T: SessionInfo },
    { no: 6, name: "options", kind: "message", T: Options },
  ],
);

/**
 * VerifyRecoveryTokenRequest is used for VerifyRecoveryToken rpc calls. Used to verify recovery token for user.
 *
 * @generated from message elude.proto.VerifyRecoveryTokenRequest
 */
export const VerifyRecoveryTokenRequest = proto3.makeMessageType(
  "elude.proto.VerifyRecoveryTokenRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "recovery_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "session_info", kind: "message", T: SessionInfo },
    { no: 5, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetUsersRequest is used for GetUsers rpc calls. Used to fetch all users from DB.
 *
 * @generated from message elude.proto.GetUsersRequest
 */
export const GetUsersRequest = proto3.makeMessageType(
  "elude.proto.GetUsersRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
    { no: 5, name: "filter_options", kind: "message", T: FilterOptions },
    { no: 6, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetUserRequest is used for GetUser rpc calls. Used to fetch a single user by ID from DB.
 *
 * @generated from message elude.proto.GetUserRequest
 */
export const GetUserRequest = proto3.makeMessageType(
  "elude.proto.GetUserRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "session_info", kind: "message", T: SessionInfo },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * CreateUserRequest is used for CreateUser rpc calls. Used to add a new user to DB.
 *
 * @generated from message elude.proto.CreateUserRequest
 */
export const CreateUserRequest = proto3.makeMessageType(
  "elude.proto.CreateUserRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "user", kind: "message", T: User },
    { no: 3, name: "session_info", kind: "message", T: SessionInfo },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateUserRequest is used for UpdateUser rpc calls. Used to update an existing user in DB.
 *
 * @generated from message elude.proto.UpdateUserRequest
 */
export const UpdateUserRequest = proto3.makeMessageType(
  "elude.proto.UpdateUserRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "user", kind: "message", T: User },
    { no: 3, name: "session_info", kind: "message", T: SessionInfo },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeleteUserRequest is used for DeletUser rpc calls. Used to soft delete an existing user in DB.
 *
 * @generated from message elude.proto.DeleteUserRequest
 */
export const DeleteUserRequest = proto3.makeMessageType(
  "elude.proto.DeleteUserRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "session_info", kind: "message", T: SessionInfo },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * ChangePasswordRequest is used for ChangePassword rpc calls. Used to directly change the user password.
 *
 * @generated from message elude.proto.ChangePasswordRequest
 */
export const ChangePasswordRequest = proto3.makeMessageType(
  "elude.proto.ChangePasswordRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "current_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "password_confirmation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "session_info", kind: "message", T: SessionInfo },
    { no: 7, name: "options", kind: "message", T: Options },
  ],
);

/**
 * AddSocialRequest is used for AddSocial rpc calls. Clients should send this when adding a new social account to existing user.
 *
 * @generated from message elude.proto.AddSocialRequest
 */
export const AddSocialRequest = proto3.makeMessageType(
  "elude.proto.AddSocialRequest",
  () => [
    { no: 2, name: "provider", kind: "enum", T: proto3.getEnumType(AuthProviderEnum) },
    { no: 3, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "token_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "auth", kind: "message", T: Auth },
    { no: 6, name: "session_info", kind: "message", T: SessionInfo },
    { no: 7, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetTitlesRequest is used for GetTitles rpc calls. Used to fetch all titles from DB.
 *
 * @generated from message elude.proto.GetTitlesRequest
 */
export const GetTitlesRequest = proto3.makeMessageType(
  "elude.proto.GetTitlesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetRoleRequest is used for GetRole rpc calls. Used to fetch a single role by ID from DB.
 *
 * @generated from message elude.proto.GetRoleRequest
 */
export const GetRoleRequest = proto3.makeMessageType(
  "elude.proto.GetRoleRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "session_info", kind: "message", T: SessionInfo },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetRolesRequest is used for GetRoles rpc calls. Used to fetch all roles from DB.
 *
 * @generated from message elude.proto.GetRolesRequest
 */
export const GetRolesRequest = proto3.makeMessageType(
  "elude.proto.GetRolesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
  ],
);

/**
 * CreateRoleRequest is used for CreateRoleRequest rpc calls. Used to add a new role to DB.
 *
 * @generated from message elude.proto.CreateRoleRequest
 */
export const CreateRoleRequest = proto3.makeMessageType(
  "elude.proto.CreateRoleRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "role", kind: "message", T: Role },
    { no: 3, name: "session_info", kind: "message", T: SessionInfo },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateRoleRequest is used for UpdateRole rpc calls. Used to update an existing role in DB.
 *
 * @generated from message elude.proto.UpdateRoleRequest
 */
export const UpdateRoleRequest = proto3.makeMessageType(
  "elude.proto.UpdateRoleRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "role", kind: "message", T: Role },
    { no: 3, name: "session_info", kind: "message", T: SessionInfo },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeleteRoleRequest is used for DeleteRole rpc calls. Used to soft delete an existing role in DB.
 *
 * @generated from message elude.proto.DeleteRoleRequest
 */
export const DeleteRoleRequest = proto3.makeMessageType(
  "elude.proto.DeleteRoleRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "session_info", kind: "message", T: SessionInfo },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetPermissionsRequest is used for GetPermissions rpc calls. Used to fetch all permissions from DB.
 *
 * @generated from message elude.proto.GetPermissionsRequest
 */
export const GetPermissionsRequest = proto3.makeMessageType(
  "elude.proto.GetPermissionsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
  ],
);

/**
 * ValidateJwtTokenRequest is used for ValidateJwtToken rpc calls. Used to validate an existing generated JWT token.
 *
 * @generated from message elude.proto.ValidateJwtTokenRequest
 */
export const ValidateJwtTokenRequest = proto3.makeMessageType(
  "elude.proto.ValidateJwtTokenRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "options", kind: "message", T: Options },
    { no: 3, name: "session_info", kind: "message", T: SessionInfo },
  ],
);

/**
 * ResendConfirmationEmailRequest is used in rpc calls for resending user confirmation mail.
 *
 * @generated from message elude.proto.ResendConfirmationEmailRequest
 */
export const ResendConfirmationEmailRequest = proto3.makeMessageType(
  "elude.proto.ResendConfirmationEmailRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

