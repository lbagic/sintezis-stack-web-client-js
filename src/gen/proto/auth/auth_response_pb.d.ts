// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/auth/auth_response.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {Auth} from "../commons/auth_pb.js";
import type {User} from "../models/user_pb.js";
import type {Options} from "../commons/options_pb.js";
import type {SessionInfo} from "../commons/session_info_pb.js";
import type {Status} from "../commons/status_pb.js";
import type {Pagination} from "../commons/pagination_pb.js";
import type {Title} from "../models/title_pb.js";
import type {Role} from "../models/role_pb.js";
import type {Permission} from "../models/permission_pb.js";

/**
 * AuthResponse is used in Authorize rpc calls. Contains user data.
 *
 * @generated from message elude.proto.AuthResponse
 */
export declare class AuthResponse extends Message<AuthResponse> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * User data from authorize.
   *
   * @generated from field: elude.proto.User user = 2;
   */
  user?: User;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 4;
   */
  sessionInfo?: SessionInfo;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 5;
   */
  status?: Status;

  constructor(data?: PartialMessage<AuthResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.AuthResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthResponse;

  static equals(a: AuthResponse | PlainMessage<AuthResponse> | undefined, b: AuthResponse | PlainMessage<AuthResponse> | undefined): boolean;
}

/**
 * CheckPermissionResponse is used in internal permission check rpc calls.
 *
 * @generated from message elude.proto.CheckPermissionResponse
 */
export declare class CheckPermissionResponse extends Message<CheckPermissionResponse> {
  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 1;
   */
  options?: Options;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<CheckPermissionResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CheckPermissionResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckPermissionResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckPermissionResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckPermissionResponse;

  static equals(a: CheckPermissionResponse | PlainMessage<CheckPermissionResponse> | undefined, b: CheckPermissionResponse | PlainMessage<CheckPermissionResponse> | undefined): boolean;
}

/**
 * AccountResponse is used in account auth rpc calls.
 *
 * @generated from message elude.proto.AccountResponse
 */
export declare class AccountResponse extends Message<AccountResponse> {
  /**
   * User social token.
   *
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * User account data.
   *
   * @generated from field: elude.proto.User user = 2;
   */
  user?: User;

  /**
   * Token expiration date time.
   *
   * @generated from field: int64 expires_in = 3;
   */
  expiresIn: bigint;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 4;
   */
  status?: Status;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 5;
   */
  sessionInfo?: SessionInfo;

  constructor(data?: PartialMessage<AccountResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.AccountResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountResponse;

  static equals(a: AccountResponse | PlainMessage<AccountResponse> | undefined, b: AccountResponse | PlainMessage<AccountResponse> | undefined): boolean;
}

/**
 * UsersResponse is used for GetUsers rpc call. Used to return all users from DB.
 *
 * @generated from message elude.proto.UsersResponse
 */
export declare class UsersResponse extends Message<UsersResponse> {
  /**
   * List of users data.
   *
   * @generated from field: repeated elude.proto.User users = 1;
   */
  users: User[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 2;
   */
  status?: Status;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 3;
   */
  sessionInfo?: SessionInfo;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<UsersResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UsersResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsersResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsersResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsersResponse;

  static equals(a: UsersResponse | PlainMessage<UsersResponse> | undefined, b: UsersResponse | PlainMessage<UsersResponse> | undefined): boolean;
}

/**
 * GetUserRequest is used for user rpc calls.
 *
 * @generated from message elude.proto.UserResponse
 */
export declare class UserResponse extends Message<UserResponse> {
  /**
   * User data.
   *
   * @generated from field: elude.proto.User user = 1;
   */
  user?: User;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 2;
   */
  status?: Status;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 3;
   */
  sessionInfo?: SessionInfo;

  constructor(data?: PartialMessage<UserResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UserResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserResponse;

  static equals(a: UserResponse | PlainMessage<UserResponse> | undefined, b: UserResponse | PlainMessage<UserResponse> | undefined): boolean;
}

/**
 * AddSocialResponse is used for AddSocial rpc calls.
 *
 * @generated from message elude.proto.AddSocialResponse
 */
export declare class AddSocialResponse extends Message<AddSocialResponse> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<AddSocialResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.AddSocialResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddSocialResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddSocialResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddSocialResponse;

  static equals(a: AddSocialResponse | PlainMessage<AddSocialResponse> | undefined, b: AddSocialResponse | PlainMessage<AddSocialResponse> | undefined): boolean;
}

/**
 * TitlesResponse is used for GetTitles rpc call. Used to return all titles from DB.
 *
 * @generated from message elude.proto.TitlesResponse
 */
export declare class TitlesResponse extends Message<TitlesResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of titles account data.
   *
   * @generated from field: repeated elude.proto.Title titles = 2;
   */
  titles: Title[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<TitlesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.TitlesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TitlesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TitlesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TitlesResponse;

  static equals(a: TitlesResponse | PlainMessage<TitlesResponse> | undefined, b: TitlesResponse | PlainMessage<TitlesResponse> | undefined): boolean;
}

/**
 * RoleResponse is used for role rpc calls.
 *
 * @generated from message elude.proto.RoleResponse
 */
export declare class RoleResponse extends Message<RoleResponse> {
  /**
   * Role data.
   *
   * @generated from field: elude.proto.Role role = 1;
   */
  role?: Role;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 2;
   */
  status?: Status;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 3;
   */
  sessionInfo?: SessionInfo;

  constructor(data?: PartialMessage<RoleResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.RoleResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleResponse;

  static equals(a: RoleResponse | PlainMessage<RoleResponse> | undefined, b: RoleResponse | PlainMessage<RoleResponse> | undefined): boolean;
}

/**
 * RolesResponse is used for GetRoles rpc calls. Used to return all roles from DB.
 *
 * @generated from message elude.proto.RolesResponse
 */
export declare class RolesResponse extends Message<RolesResponse> {
  /**
   * List of roles data.
   *
   * @generated from field: repeated elude.proto.Role roles = 1;
   */
  roles: Role[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 2;
   */
  status?: Status;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 3;
   */
  sessionInfo?: SessionInfo;

  constructor(data?: PartialMessage<RolesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.RolesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RolesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RolesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RolesResponse;

  static equals(a: RolesResponse | PlainMessage<RolesResponse> | undefined, b: RolesResponse | PlainMessage<RolesResponse> | undefined): boolean;
}

/**
 * PermissionsResponse is used for GetPermissions rpc calls. Used to return all permissions from DB.
 * Every rpc method should have at least one unique permission
 *
 * @generated from message elude.proto.PermissionsResponse
 */
export declare class PermissionsResponse extends Message<PermissionsResponse> {
  /**
   * List of roles data.
   *
   * @generated from field: repeated elude.proto.Permission permissions = 1;
   */
  permissions: Permission[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 2;
   */
  status?: Status;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 3;
   */
  sessionInfo?: SessionInfo;

  constructor(data?: PartialMessage<PermissionsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.PermissionsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PermissionsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PermissionsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PermissionsResponse;

  static equals(a: PermissionsResponse | PlainMessage<PermissionsResponse> | undefined, b: PermissionsResponse | PlainMessage<PermissionsResponse> | undefined): boolean;
}

/**
 * ValidateJwtTokenResponse is used for ValidateJwtToken rpc calls.
 *
 * @generated from message elude.proto.ValidateJwtTokenResponse
 */
export declare class ValidateJwtTokenResponse extends Message<ValidateJwtTokenResponse> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Used to check if token is valid.
   *
   * @generated from field: bool valid = 2;
   */
  valid: boolean;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 4;
   */
  sessionInfo?: SessionInfo;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 5;
   */
  status?: Status;

  constructor(data?: PartialMessage<ValidateJwtTokenResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.ValidateJwtTokenResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateJwtTokenResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateJwtTokenResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateJwtTokenResponse;

  static equals(a: ValidateJwtTokenResponse | PlainMessage<ValidateJwtTokenResponse> | undefined, b: ValidateJwtTokenResponse | PlainMessage<ValidateJwtTokenResponse> | undefined): boolean;
}

