// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/payment/payment_request.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3} from "@bufbuild/protobuf";
import {Auth} from "../commons/auth_pb.js";
import {Options} from "../commons/options_pb.js";
import {GDSPaymentProvider, GDSUser, Price} from "../commons/flow_common_pb.js";
import {PaymentMethod, User} from "../models/user_pb.js";
import {SessionInfo} from "../commons/session_info_pb.js";
import {PromotionCode} from "../models/promotion_code_pb.js";
import {Pagination} from "../commons/pagination_pb.js";
import {FilterOptions} from "../commons/filter_options_pb.js";
import {PaymentProvider} from "../models/payment_provider_pb.js";

/**
 * MakePaymentRequest is used in internal MakePayment rpc calls. Clients should not be using this.
 *
 * @generated from message elude.proto.MakePaymentRequest
 */
export const MakePaymentRequest = proto3.makeMessageType(
  "elude.proto.MakePaymentRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "options", kind: "message", T: Options },
    { no: 3, name: "payment_method_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "price", kind: "message", T: Price },
    { no: 5, name: "user", kind: "message", T: User },
    { no: 6, name: "session_info", kind: "message", T: SessionInfo },
  ],
);

/**
 * AddPaymentMethodRequest is used in AddPaymentMethod rpc calls. Clients should use this when adding a new payment
 * method for a user.
 *
 * @generated from message elude.proto.AddPaymentMethodRequest
 */
export const AddPaymentMethodRequest = proto3.makeMessageType(
  "elude.proto.AddPaymentMethodRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "options", kind: "message", T: Options },
    { no: 3, name: "provider", kind: "message", T: GDSPaymentProvider },
    { no: 4, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "is_default", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "user", kind: "message", T: User },
    { no: 7, name: "session_info", kind: "message", T: SessionInfo },
    { no: 8, name: "payment_provider_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * CreateChargeRequest is used in internal CreateCharge rpc calls. Clients should not be using this.
 *
 * @generated from message elude.proto.CreateChargeRequest
 */
export const CreateChargeRequest = proto3.makeMessageType(
  "elude.proto.CreateChargeRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "options", kind: "message", T: Options },
    { no: 3, name: "provider", kind: "message", T: GDSPaymentProvider },
    { no: 4, name: "payment_method", kind: "message", T: PaymentMethod },
    { no: 5, name: "price", kind: "message", T: Price },
    { no: 6, name: "user", kind: "message", T: GDSUser },
    { no: 7, name: "session_info", kind: "message", T: SessionInfo },
    { no: 8, name: "elude_reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "promotion_code", kind: "message", T: PromotionCode },
  ],
);

/**
 * CaptureChargeRequest is used in internal CaptureCharge rpc calls. Clients should not be using this.
 *
 * @generated from message elude.proto.CaptureChargeRequest
 */
export const CaptureChargeRequest = proto3.makeMessageType(
  "elude.proto.CaptureChargeRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "options", kind: "message", T: Options },
    { no: 3, name: "provider", kind: "message", T: GDSPaymentProvider },
    { no: 4, name: "charge_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user", kind: "message", T: GDSUser },
    { no: 6, name: "session_info", kind: "message", T: SessionInfo },
    { no: 7, name: "hotel_reservation_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "flight_reservation_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "promotion_code", kind: "message", T: PromotionCode },
  ],
);

/**
 * RefundChargeRequest is used in internal RefundCharge rpc calls. Clients should not be using this.
 *
 * @generated from message elude.proto.RefundChargeRequest
 */
export const RefundChargeRequest = proto3.makeMessageType(
  "elude.proto.RefundChargeRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "options", kind: "message", T: Options },
    { no: 3, name: "provider", kind: "message", T: GDSPaymentProvider },
    { no: 4, name: "charge_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user", kind: "message", T: GDSUser },
    { no: 6, name: "session_info", kind: "message", T: SessionInfo },
  ],
);

/**
 * GetPaymentMethodsRequest is used for GetPaymentMethods rpc calls. Used to fetch all payment methods from DB.
 *
 * @generated from message elude.proto.GetPaymentMethodsRequest
 */
export const GetPaymentMethodsRequest = proto3.makeMessageType(
  "elude.proto.GetPaymentMethodsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "userId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
    { no: 5, name: "options", kind: "message", T: Options },
    { no: 6, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "filter_options", kind: "message", T: FilterOptions },
  ],
);

/**
 * GetPaymentMethodRequest is used for GetPaymentMethod rpc calls. Used to fetch a single payment method by ID from DB.
 *
 * @generated from message elude.proto.GetPaymentMethodRequest
 */
export const GetPaymentMethodRequest = proto3.makeMessageType(
  "elude.proto.GetPaymentMethodRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * CreatePaymentMethodRequest is used for CreatePaymentMethod rpc calls. Used to add a new payment method to DB.
 *
 * @generated from message elude.proto.CreatePaymentMethodRequest
 */
export const CreatePaymentMethodRequest = proto3.makeMessageType(
  "elude.proto.CreatePaymentMethodRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "payment_method", kind: "message", T: PaymentMethod },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdatePaymentMethodRequest is used for UpdatePaymentMethod rpc calls. Used to update an existing payment method in DB.
 *
 * @generated from message elude.proto.UpdatePaymentMethodRequest
 */
export const UpdatePaymentMethodRequest = proto3.makeMessageType(
  "elude.proto.UpdatePaymentMethodRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "payment_method", kind: "message", T: PaymentMethod },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeletePaymentMethodRequest is used for DeletPaymentMethod rpc calls. Used to soft delete an existing payment method in DB.
 *
 * @generated from message elude.proto.DeletePaymentMethodRequest
 */
export const DeletePaymentMethodRequest = proto3.makeMessageType(
  "elude.proto.DeletePaymentMethodRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetPaymentProvidersRequest is used for GetPaymentProviders rpc calls. Used to fetch all payment providers from DB.
 *
 * @generated from message elude.proto.GetPaymentProvidersRequest
 */
export const GetPaymentProvidersRequest = proto3.makeMessageType(
  "elude.proto.GetPaymentProvidersRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
    { no: 4, name: "options", kind: "message", T: Options },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * GetPaymentProviderRequest is used for GetPaymentProvider rpc calls. Used to fetch a single payment provider by ID from DB.
 *
 * @generated from message elude.proto.GetPaymentProviderRequest
 */
export const GetPaymentProviderRequest = proto3.makeMessageType(
  "elude.proto.GetPaymentProviderRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * CreatePaymentProviderRequest is used for CreatePaymentProvider rpc calls. Used to add a new payment provider to DB.
 *
 * @generated from message elude.proto.CreatePaymentProviderRequest
 */
export const CreatePaymentProviderRequest = proto3.makeMessageType(
  "elude.proto.CreatePaymentProviderRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "payment_provider", kind: "message", T: PaymentProvider },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdatePaymentProviderRequest is used for UpdatePaymentProvider rpc calls. Used to update an existing payment provider in DB.
 *
 * @generated from message elude.proto.UpdatePaymentProviderRequest
 */
export const UpdatePaymentProviderRequest = proto3.makeMessageType(
  "elude.proto.UpdatePaymentProviderRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "payment_provider", kind: "message", T: PaymentProvider },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeletePaymentProviderRequest is used for DeletPaymentProvider rpc calls. Used to soft delete an existing payment provider in DB.
 *
 * @generated from message elude.proto.DeletePaymentProviderRequest
 */
export const DeletePaymentProviderRequest = proto3.makeMessageType(
  "elude.proto.DeletePaymentProviderRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetPromotionCodesRequest is used for GetPromotionCodes rpc calls. Used to fetch all promotion codes from stripe.
 *
 * @generated from message elude.proto.GetPromotionCodesRequest
 */
export const GetPromotionCodesRequest = proto3.makeMessageType(
  "elude.proto.GetPromotionCodesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
    { no: 4, name: "options", kind: "message", T: Options },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * GetPromotionCodeRequest is used for GetPromotionCode rpc calls. Used to fetch a single promotion code by ID from stripe.
 *
 * @generated from message elude.proto.GetPromotionCodeRequest
 */
export const GetPromotionCodeRequest = proto3.makeMessageType(
  "elude.proto.GetPromotionCodeRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * CreatePromotionCodeRequest is used for CreatePromotionCode rpc calls. Used to add a new promotion code to stripe.
 *
 * @generated from message elude.proto.CreatePromotionCodeRequest
 */
export const CreatePromotionCodeRequest = proto3.makeMessageType(
  "elude.proto.CreatePromotionCodeRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "promotion_code", kind: "message", T: PromotionCode },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdatePromotionCodeRequest is used for UpdatePromotionCode rpc calls. Used to update an existing promotion code from stripe.
 *
 * @generated from message elude.proto.UpdatePromotionCodeRequest
 */
export const UpdatePromotionCodeRequest = proto3.makeMessageType(
  "elude.proto.UpdatePromotionCodeRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "promotion_code", kind: "message", T: PromotionCode },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeletePromotionCodeRequest is used for DeletePromotionCode rpc calls. Used to soft delete an existing promotion code from stripe.
 *
 * @generated from message elude.proto.DeletePromotionCodeRequest
 */
export const DeletePromotionCodeRequest = proto3.makeMessageType(
  "elude.proto.DeletePromotionCodeRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

