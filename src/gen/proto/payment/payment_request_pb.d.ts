// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/payment/payment_request.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {Auth} from "../commons/auth_pb.js";
import type {Options} from "../commons/options_pb.js";
import type {GDSPaymentProvider, GDSUser, Price} from "../commons/flow_common_pb.js";
import type {PaymentMethod, User} from "../models/user_pb.js";
import type {SessionInfo} from "../commons/session_info_pb.js";
import type {PromotionCode} from "../models/promotion_code_pb.js";
import type {Pagination} from "../commons/pagination_pb.js";
import type {FilterOptions} from "../commons/filter_options_pb.js";
import type {PaymentProvider} from "../models/payment_provider_pb.js";

/**
 * MakePaymentRequest is used in internal MakePayment rpc calls. Clients should not be using this.
 *
 * @generated from message elude.proto.MakePaymentRequest
 */
export declare class MakePaymentRequest extends Message<MakePaymentRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 2;
   */
  options?: Options;

  /**
   * Payment method id.
   *
   * @generated from field: int32 payment_method_id = 3;
   */
  paymentMethodId: number;

  /**
   * Payment method price information.
   *
   * @generated from field: elude.proto.Price price = 4;
   */
  price?: Price;

  /**
   * Payment method user data.
   *
   * @generated from field: elude.proto.User user = 5;
   */
  user?: User;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 6;
   */
  sessionInfo?: SessionInfo;

  constructor(data?: PartialMessage<MakePaymentRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.MakePaymentRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MakePaymentRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MakePaymentRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MakePaymentRequest;

  static equals(a: MakePaymentRequest | PlainMessage<MakePaymentRequest> | undefined, b: MakePaymentRequest | PlainMessage<MakePaymentRequest> | undefined): boolean;
}

/**
 * AddPaymentMethodRequest is used in AddPaymentMethod rpc calls. Clients should use this when adding a new payment
 * method for a user.
 *
 * @generated from message elude.proto.AddPaymentMethodRequest
 */
export declare class AddPaymentMethodRequest extends Message<AddPaymentMethodRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 2;
   */
  options?: Options;

  /**
   * Gds payment provider data.
   *
   * @generated from field: elude.proto.GDSPaymentProvider provider = 3;
   */
  provider?: GDSPaymentProvider;

  /**
   * Payment provider token.
   *
   * @generated from field: string token = 4;
   */
  token: string;

  /**
   * 1 equals true.
   *
   * @generated from field: int32 is_default = 5;
   */
  isDefault: number;

  /**
   * Payment method user data.
   *
   * @generated from field: elude.proto.User user = 6;
   */
  user?: User;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 7;
   */
  sessionInfo?: SessionInfo;

  /**
   * TODO: remove this
   *
   * Not used.
   *
   * @generated from field: int32 payment_provider_id = 8;
   */
  paymentProviderId: number;

  constructor(data?: PartialMessage<AddPaymentMethodRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.AddPaymentMethodRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddPaymentMethodRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddPaymentMethodRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddPaymentMethodRequest;

  static equals(a: AddPaymentMethodRequest | PlainMessage<AddPaymentMethodRequest> | undefined, b: AddPaymentMethodRequest | PlainMessage<AddPaymentMethodRequest> | undefined): boolean;
}

/**
 * CreateChargeRequest is used in internal CreateCharge rpc calls. Clients should not be using this.
 *
 * @generated from message elude.proto.CreateChargeRequest
 */
export declare class CreateChargeRequest extends Message<CreateChargeRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 2;
   */
  options?: Options;

  /**
   * Payment provider data for create charge.
   *
   * @generated from field: elude.proto.GDSPaymentProvider provider = 3;
   */
  provider?: GDSPaymentProvider;

  /**
   * Payment method data for create charge.
   *
   * @generated from field: elude.proto.PaymentMethod payment_method = 4;
   */
  paymentMethod?: PaymentMethod;

  /**
   * Price information for create charge.
   *
   * @generated from field: elude.proto.Price price = 5;
   */
  price?: Price;

  /**
   * Create charge user data.
   *
   * @generated from field: elude.proto.GDSUser user = 6;
   */
  user?: GDSUser;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 7;
   */
  sessionInfo?: SessionInfo;

  /**
   * Elude pnr. Saved in database bookings table.
   *
   * @generated from field: string elude_reference = 8;
   */
  eludeReference: string;

  /**
   * Promotion code for payment discount.
   *
   * @generated from field: elude.proto.PromotionCode promotion_code = 9;
   */
  promotionCode?: PromotionCode;

  constructor(data?: PartialMessage<CreateChargeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreateChargeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateChargeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateChargeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateChargeRequest;

  static equals(a: CreateChargeRequest | PlainMessage<CreateChargeRequest> | undefined, b: CreateChargeRequest | PlainMessage<CreateChargeRequest> | undefined): boolean;
}

/**
 * CaptureChargeRequest is used in internal CaptureCharge rpc calls. Clients should not be using this.
 *
 * @generated from message elude.proto.CaptureChargeRequest
 */
export declare class CaptureChargeRequest extends Message<CaptureChargeRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 2;
   */
  options?: Options;

  /**
   * Payment provider data for capture charge.
   *
   * @generated from field: elude.proto.GDSPaymentProvider provider = 3;
   */
  provider?: GDSPaymentProvider;

  /**
   * Payment provider charge id for capture charge.
   *
   * @generated from field: string charge_id = 4;
   */
  chargeId: string;

  /**
   * Capture charge user data.
   *
   * @generated from field: elude.proto.GDSUser user = 5;
   */
  user?: GDSUser;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 6;
   */
  sessionInfo?: SessionInfo;

  /**
   * Gds hotel reservation code. Saved in database bookings table.
   *
   * @generated from field: string hotel_reservation_code = 7;
   */
  hotelReservationCode: string;

  /**
   * Gds flight reservation code. Saved in database bookings table.
   *
   * @generated from field: string flight_reservation_code = 8;
   */
  flightReservationCode: string;

  /**
   * Promotion code used for discount.
   *
   * @generated from field: elude.proto.PromotionCode promotion_code = 9;
   */
  promotionCode?: PromotionCode;

  constructor(data?: PartialMessage<CaptureChargeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CaptureChargeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CaptureChargeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CaptureChargeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CaptureChargeRequest;

  static equals(a: CaptureChargeRequest | PlainMessage<CaptureChargeRequest> | undefined, b: CaptureChargeRequest | PlainMessage<CaptureChargeRequest> | undefined): boolean;
}

/**
 * RefundChargeRequest is used in internal RefundCharge rpc calls. Clients should not be using this.
 *
 * @generated from message elude.proto.RefundChargeRequest
 */
export declare class RefundChargeRequest extends Message<RefundChargeRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 2;
   */
  options?: Options;

  /**
   * Payment provider data for refund charge.
   *
   * @generated from field: elude.proto.GDSPaymentProvider provider = 3;
   */
  provider?: GDSPaymentProvider;

  /**
   * Payment provider charge id for refund charge.
   *
   * @generated from field: string charge_id = 4;
   */
  chargeId: string;

  /**
   * Refund charge user data.
   *
   * @generated from field: elude.proto.GDSUser user = 5;
   */
  user?: GDSUser;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 6;
   */
  sessionInfo?: SessionInfo;

  constructor(data?: PartialMessage<RefundChargeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.RefundChargeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefundChargeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefundChargeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefundChargeRequest;

  static equals(a: RefundChargeRequest | PlainMessage<RefundChargeRequest> | undefined, b: RefundChargeRequest | PlainMessage<RefundChargeRequest> | undefined): boolean;
}

/**
 * GetPaymentMethodsRequest is used for GetPaymentMethods rpc calls. Used to fetch all payment methods from DB.
 *
 * @generated from message elude.proto.GetPaymentMethodsRequest
 */
export declare class GetPaymentMethodsRequest extends Message<GetPaymentMethodsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Payment method user id. Used to get all payment methods for this user.
   *
   * @generated from field: int32 userId = 3;
   */
  userId: number;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 5;
   */
  options?: Options;

  /**
   * Used to filter by payment method name.
   *
   * @generated from field: string search = 6;
   */
  search: string;

  /**
   * Used to filter response data.
   *
   * @generated from field: elude.proto.FilterOptions filter_options = 7;
   */
  filterOptions?: FilterOptions;

  constructor(data?: PartialMessage<GetPaymentMethodsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetPaymentMethodsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPaymentMethodsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPaymentMethodsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPaymentMethodsRequest;

  static equals(a: GetPaymentMethodsRequest | PlainMessage<GetPaymentMethodsRequest> | undefined, b: GetPaymentMethodsRequest | PlainMessage<GetPaymentMethodsRequest> | undefined): boolean;
}

/**
 * GetPaymentMethodRequest is used for GetPaymentMethod rpc calls. Used to fetch a single payment method by ID from DB.
 *
 * @generated from message elude.proto.GetPaymentMethodRequest
 */
export declare class GetPaymentMethodRequest extends Message<GetPaymentMethodRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Payment method for get payment methods in database payment_methods table.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetPaymentMethodRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetPaymentMethodRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPaymentMethodRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPaymentMethodRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPaymentMethodRequest;

  static equals(a: GetPaymentMethodRequest | PlainMessage<GetPaymentMethodRequest> | undefined, b: GetPaymentMethodRequest | PlainMessage<GetPaymentMethodRequest> | undefined): boolean;
}

/**
 * CreatePaymentMethodRequest is used for CreatePaymentMethod rpc calls. Used to add a new payment method to DB.
 *
 * @generated from message elude.proto.CreatePaymentMethodRequest
 */
export declare class CreatePaymentMethodRequest extends Message<CreatePaymentMethodRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Payment method data for create payment method.
   *
   * @generated from field: elude.proto.PaymentMethod payment_method = 3;
   */
  paymentMethod?: PaymentMethod;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreatePaymentMethodRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreatePaymentMethodRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePaymentMethodRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePaymentMethodRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePaymentMethodRequest;

  static equals(a: CreatePaymentMethodRequest | PlainMessage<CreatePaymentMethodRequest> | undefined, b: CreatePaymentMethodRequest | PlainMessage<CreatePaymentMethodRequest> | undefined): boolean;
}

/**
 * UpdatePaymentMethodRequest is used for UpdatePaymentMethod rpc calls. Used to update an existing payment method in DB.
 *
 * @generated from message elude.proto.UpdatePaymentMethodRequest
 */
export declare class UpdatePaymentMethodRequest extends Message<UpdatePaymentMethodRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Payment method data for update payment method.
   *
   * @generated from field: elude.proto.PaymentMethod payment_method = 3;
   */
  paymentMethod?: PaymentMethod;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdatePaymentMethodRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdatePaymentMethodRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePaymentMethodRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePaymentMethodRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePaymentMethodRequest;

  static equals(a: UpdatePaymentMethodRequest | PlainMessage<UpdatePaymentMethodRequest> | undefined, b: UpdatePaymentMethodRequest | PlainMessage<UpdatePaymentMethodRequest> | undefined): boolean;
}

/**
 * DeletePaymentMethodRequest is used for DeletPaymentMethod rpc calls. Used to soft delete an existing payment method in DB.
 *
 * @generated from message elude.proto.DeletePaymentMethodRequest
 */
export declare class DeletePaymentMethodRequest extends Message<DeletePaymentMethodRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Payment method id for delete payment method.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeletePaymentMethodRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeletePaymentMethodRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePaymentMethodRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePaymentMethodRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePaymentMethodRequest;

  static equals(a: DeletePaymentMethodRequest | PlainMessage<DeletePaymentMethodRequest> | undefined, b: DeletePaymentMethodRequest | PlainMessage<DeletePaymentMethodRequest> | undefined): boolean;
}

/**
 * GetPaymentProvidersRequest is used for GetPaymentProviders rpc calls. Used to fetch all payment providers from DB.
 *
 * @generated from message elude.proto.GetPaymentProvidersRequest
 */
export declare class GetPaymentProvidersRequest extends Message<GetPaymentProvidersRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 3;
   */
  pagination?: Pagination;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  /**
   * Used to filter by payment provider name.
   *
   * @generated from field: string search = 5;
   */
  search: string;

  constructor(data?: PartialMessage<GetPaymentProvidersRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetPaymentProvidersRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPaymentProvidersRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPaymentProvidersRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPaymentProvidersRequest;

  static equals(a: GetPaymentProvidersRequest | PlainMessage<GetPaymentProvidersRequest> | undefined, b: GetPaymentProvidersRequest | PlainMessage<GetPaymentProvidersRequest> | undefined): boolean;
}

/**
 * GetPaymentProviderRequest is used for GetPaymentProvider rpc calls. Used to fetch a single payment provider by ID from DB.
 *
 * @generated from message elude.proto.GetPaymentProviderRequest
 */
export declare class GetPaymentProviderRequest extends Message<GetPaymentProviderRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Payment provider id for get payment provider in database payment_providers table.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetPaymentProviderRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetPaymentProviderRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPaymentProviderRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPaymentProviderRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPaymentProviderRequest;

  static equals(a: GetPaymentProviderRequest | PlainMessage<GetPaymentProviderRequest> | undefined, b: GetPaymentProviderRequest | PlainMessage<GetPaymentProviderRequest> | undefined): boolean;
}

/**
 * CreatePaymentProviderRequest is used for CreatePaymentProvider rpc calls. Used to add a new payment provider to DB.
 *
 * @generated from message elude.proto.CreatePaymentProviderRequest
 */
export declare class CreatePaymentProviderRequest extends Message<CreatePaymentProviderRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Payment provider data for create payment provider.
   *
   * @generated from field: elude.proto.PaymentProvider payment_provider = 3;
   */
  paymentProvider?: PaymentProvider;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreatePaymentProviderRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreatePaymentProviderRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePaymentProviderRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePaymentProviderRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePaymentProviderRequest;

  static equals(a: CreatePaymentProviderRequest | PlainMessage<CreatePaymentProviderRequest> | undefined, b: CreatePaymentProviderRequest | PlainMessage<CreatePaymentProviderRequest> | undefined): boolean;
}

/**
 * UpdatePaymentProviderRequest is used for UpdatePaymentProvider rpc calls. Used to update an existing payment provider in DB.
 *
 * @generated from message elude.proto.UpdatePaymentProviderRequest
 */
export declare class UpdatePaymentProviderRequest extends Message<UpdatePaymentProviderRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Payment provider data for update payment provider.
   *
   * @generated from field: elude.proto.PaymentProvider payment_provider = 3;
   */
  paymentProvider?: PaymentProvider;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdatePaymentProviderRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdatePaymentProviderRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePaymentProviderRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePaymentProviderRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePaymentProviderRequest;

  static equals(a: UpdatePaymentProviderRequest | PlainMessage<UpdatePaymentProviderRequest> | undefined, b: UpdatePaymentProviderRequest | PlainMessage<UpdatePaymentProviderRequest> | undefined): boolean;
}

/**
 * DeletePaymentProviderRequest is used for DeletPaymentProvider rpc calls. Used to soft delete an existing payment provider in DB.
 *
 * @generated from message elude.proto.DeletePaymentProviderRequest
 */
export declare class DeletePaymentProviderRequest extends Message<DeletePaymentProviderRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Payment provider id for delete payment provider.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeletePaymentProviderRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeletePaymentProviderRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePaymentProviderRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePaymentProviderRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePaymentProviderRequest;

  static equals(a: DeletePaymentProviderRequest | PlainMessage<DeletePaymentProviderRequest> | undefined, b: DeletePaymentProviderRequest | PlainMessage<DeletePaymentProviderRequest> | undefined): boolean;
}

/**
 * GetPromotionCodesRequest is used for GetPromotionCodes rpc calls. Used to fetch all promotion codes from stripe.
 *
 * @generated from message elude.proto.GetPromotionCodesRequest
 */
export declare class GetPromotionCodesRequest extends Message<GetPromotionCodesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 3;
   */
  pagination?: Pagination;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  /**
   * Used to filter by promotion code name.
   *
   * @generated from field: string search = 5;
   */
  search: string;

  constructor(data?: PartialMessage<GetPromotionCodesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetPromotionCodesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPromotionCodesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPromotionCodesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPromotionCodesRequest;

  static equals(a: GetPromotionCodesRequest | PlainMessage<GetPromotionCodesRequest> | undefined, b: GetPromotionCodesRequest | PlainMessage<GetPromotionCodesRequest> | undefined): boolean;
}

/**
 * GetPromotionCodeRequest is used for GetPromotionCode rpc calls. Used to fetch a single promotion code by ID from stripe.
 *
 * @generated from message elude.proto.GetPromotionCodeRequest
 */
export declare class GetPromotionCodeRequest extends Message<GetPromotionCodeRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Promotion Code id for get promotion code from stripe.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetPromotionCodeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetPromotionCodeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPromotionCodeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPromotionCodeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPromotionCodeRequest;

  static equals(a: GetPromotionCodeRequest | PlainMessage<GetPromotionCodeRequest> | undefined, b: GetPromotionCodeRequest | PlainMessage<GetPromotionCodeRequest> | undefined): boolean;
}

/**
 * CreatePromotionCodeRequest is used for CreatePromotionCode rpc calls. Used to add a new promotion code to stripe.
 *
 * @generated from message elude.proto.CreatePromotionCodeRequest
 */
export declare class CreatePromotionCodeRequest extends Message<CreatePromotionCodeRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Promotion Code data for create promotion code.
   *
   * @generated from field: elude.proto.PromotionCode promotion_code = 3;
   */
  promotionCode?: PromotionCode;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreatePromotionCodeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreatePromotionCodeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePromotionCodeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePromotionCodeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePromotionCodeRequest;

  static equals(a: CreatePromotionCodeRequest | PlainMessage<CreatePromotionCodeRequest> | undefined, b: CreatePromotionCodeRequest | PlainMessage<CreatePromotionCodeRequest> | undefined): boolean;
}

/**
 * UpdatePromotionCodeRequest is used for UpdatePromotionCode rpc calls. Used to update an existing promotion code from stripe.
 *
 * @generated from message elude.proto.UpdatePromotionCodeRequest
 */
export declare class UpdatePromotionCodeRequest extends Message<UpdatePromotionCodeRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Promotion Code data for update promotion code.
   *
   * @generated from field: elude.proto.PromotionCode promotion_code = 3;
   */
  promotionCode?: PromotionCode;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdatePromotionCodeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdatePromotionCodeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePromotionCodeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePromotionCodeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePromotionCodeRequest;

  static equals(a: UpdatePromotionCodeRequest | PlainMessage<UpdatePromotionCodeRequest> | undefined, b: UpdatePromotionCodeRequest | PlainMessage<UpdatePromotionCodeRequest> | undefined): boolean;
}

/**
 * DeletePromotionCodeRequest is used for DeletePromotionCode rpc calls. Used to soft delete an existing promotion code from stripe.
 *
 * @generated from message elude.proto.DeletePromotionCodeRequest
 */
export declare class DeletePromotionCodeRequest extends Message<DeletePromotionCodeRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * PromotionCode id for delete promotion code.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeletePromotionCodeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeletePromotionCodeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePromotionCodeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePromotionCodeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePromotionCodeRequest;

  static equals(a: DeletePromotionCodeRequest | PlainMessage<DeletePromotionCodeRequest> | undefined, b: DeletePromotionCodeRequest | PlainMessage<DeletePromotionCodeRequest> | undefined): boolean;
}

