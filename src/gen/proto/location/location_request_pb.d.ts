// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/location/location_request.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {Auth} from "../commons/auth_pb.js";
import type {SessionInfo} from "../commons/session_info_pb.js";
import type {Options} from "../commons/options_pb.js";
import type {Pagination} from "../commons/pagination_pb.js";
import type {FilterOptions} from "../commons/filter_options_pb.js";
import type {Airport, City} from "../models/city_pb.js";
import type {Coordinates} from "../commons/coordinates_pb.js";
import type {UpdateAirlineWithImageData, UpdateCityWithImageData} from "../commons/image_data_pb.js";
import type {Country} from "../models/country_pb.js";
import type {Airline} from "../models/airline_pb.js";
import type {LocationIdentifier} from "../commons/flow_common_pb.js";
import type {FeaturedLocation} from "../models/featured_location_pb.js";
import type {ConnectedCity} from "../models/connected_city_pb.js";
import type {Region} from "../models/region_pb.js";
import type {SearchTypeEnum} from "../commons/enum_pb.js";
import type {ItineraryRequest} from "../air_hotel_reservation_search/request_pb.js";

/**
 * GetCityRequest is used for GetCity rpc calls. Used to fetch a single city by ID from DB.
 *
 * @generated from message elude.proto.GetCityRequest
 */
export declare class GetCityRequest extends Message<GetCityRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * City id for get city in database cities table.
   *
   * @generated from field: int32 id = 4;
   */
  id: number;

  constructor(data?: PartialMessage<GetCityRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetCityRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCityRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCityRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCityRequest;

  static equals(a: GetCityRequest | PlainMessage<GetCityRequest> | undefined, b: GetCityRequest | PlainMessage<GetCityRequest> | undefined): boolean;
}

/**
 * GetCitiesRequest is used for GetCities rpc calls. Used to fetch all cities from DB.
 *
 * @generated from message elude.proto.GetCitiesRequest
 */
export declare class GetCitiesRequest extends Message<GetCitiesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  /**
   * Used to filter by cities name.
   *
   * @generated from field: string search = 5;
   */
  search: string;

  /**
   * Used to filter response data
   *
   * @generated from field: elude.proto.FilterOptions filter_options = 6;
   */
  filterOptions?: FilterOptions;

  constructor(data?: PartialMessage<GetCitiesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetCitiesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCitiesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCitiesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCitiesRequest;

  static equals(a: GetCitiesRequest | PlainMessage<GetCitiesRequest> | undefined, b: GetCitiesRequest | PlainMessage<GetCitiesRequest> | undefined): boolean;
}

/**
 * CreateCityRequest is used for CreateCity rpc calls. Used to add a new city to DB.
 *
 * @generated from message elude.proto.CreateCityRequest
 */
export declare class CreateCityRequest extends Message<CreateCityRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * City data for create city.
   *
   * @generated from field: elude.proto.City city = 3;
   */
  city?: City;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreateCityRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreateCityRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCityRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCityRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCityRequest;

  static equals(a: CreateCityRequest | PlainMessage<CreateCityRequest> | undefined, b: CreateCityRequest | PlainMessage<CreateCityRequest> | undefined): boolean;
}

/**
 * UpdateCityRequest is used for UpdateCity rpc calls. Used to update an existing city in DB.
 *
 * @generated from message elude.proto.UpdateCityRequest
 */
export declare class UpdateCityRequest extends Message<UpdateCityRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * City data for update city.
   *
   * @generated from field: elude.proto.City city = 3;
   */
  city?: City;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdateCityRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateCityRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCityRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCityRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCityRequest;

  static equals(a: UpdateCityRequest | PlainMessage<UpdateCityRequest> | undefined, b: UpdateCityRequest | PlainMessage<UpdateCityRequest> | undefined): boolean;
}

/**
 * DeleteCityRequest is used for DeleteCity rpc calls. Used to soft delete an existing city in DB.
 *
 * @generated from message elude.proto.DeleteCityRequest
 */
export declare class DeleteCityRequest extends Message<DeleteCityRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * City id for delete city in database cities table.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeleteCityRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeleteCityRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCityRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCityRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCityRequest;

  static equals(a: DeleteCityRequest | PlainMessage<DeleteCityRequest> | undefined, b: DeleteCityRequest | PlainMessage<DeleteCityRequest> | undefined): boolean;
}

/**
 * GetCityByIPRequest is not used. Superseded by GetCityByCoordinatesRequest.
 *
 * @generated from message elude.proto.GetCityByIPRequest
 * @deprecated
 */
export declare class GetCityByIPRequest extends Message<GetCityByIPRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * @generated from field: string ip = 3;
   */
  ip: string;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetCityByIPRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetCityByIPRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCityByIPRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCityByIPRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCityByIPRequest;

  static equals(a: GetCityByIPRequest | PlainMessage<GetCityByIPRequest> | undefined, b: GetCityByIPRequest | PlainMessage<GetCityByIPRequest> | undefined): boolean;
}

/**
 * GetCityByCoordinatesRequest is used in GetNearestConnectedCityByCoordinates rpc calls.
 * Clients should always use this to determine the closest connected city.
 *
 * @generated from message elude.proto.GetCityByCoordinatesRequest
 */
export declare class GetCityByCoordinatesRequest extends Message<GetCityByCoordinatesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * City coordinates for get city by coordinates in database cities table.
   *
   * @generated from field: elude.proto.Coordinates coordinates = 3;
   */
  coordinates?: Coordinates;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetCityByCoordinatesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetCityByCoordinatesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCityByCoordinatesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCityByCoordinatesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCityByCoordinatesRequest;

  static equals(a: GetCityByCoordinatesRequest | PlainMessage<GetCityByCoordinatesRequest> | undefined, b: GetCityByCoordinatesRequest | PlainMessage<GetCityByCoordinatesRequest> | undefined): boolean;
}

/**
 * GetMultipleCitiesRequest is used for GetMultipleCities rpc calls. Clients should use this to fetch multiple cities by IATA codes
 *
 * @generated from message elude.proto.GetMultipleCitiesRequest
 */
export declare class GetMultipleCitiesRequest extends Message<GetMultipleCitiesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of city iata codes for get multiple cities.
   *
   * @generated from field: repeated string iata_codes = 3;
   */
  iataCodes: string[];

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetMultipleCitiesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetMultipleCitiesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMultipleCitiesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMultipleCitiesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMultipleCitiesRequest;

  static equals(a: GetMultipleCitiesRequest | PlainMessage<GetMultipleCitiesRequest> | undefined, b: GetMultipleCitiesRequest | PlainMessage<GetMultipleCitiesRequest> | undefined): boolean;
}

/**
 * UpdateCityWithImageRequest is used in UpdateCityWithImage rpc calls. Clients should use this when they want to add a new image to a city.
 *
 * @generated from message elude.proto.UpdateCityWithImageRequest
 */
export declare class UpdateCityWithImageRequest extends Message<UpdateCityWithImageRequest> {
  /**
   * @generated from oneof elude.proto.UpdateCityWithImageRequest.data
   */
  data: {
    /**
     * Update request for update city with image.
     *
     * @generated from field: elude.proto.UpdateCityWithImageData updateReq = 1;
     */
    value: UpdateCityWithImageData;
    case: "updateReq";
  } | {
    /**
     * Image data in byte chunks.
     *
     * @generated from field: bytes chunk_data = 2;
     */
    value: Uint8Array;
    case: "chunkData";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<UpdateCityWithImageRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateCityWithImageRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCityWithImageRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCityWithImageRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCityWithImageRequest;

  static equals(a: UpdateCityWithImageRequest | PlainMessage<UpdateCityWithImageRequest> | undefined, b: UpdateCityWithImageRequest | PlainMessage<UpdateCityWithImageRequest> | undefined): boolean;
}

/**
 * UpdateCityWithImageUnaryRequest is used in UpdateCityWithImageUnary rpc calls. Needed for web clients until grpc-web starts supporting
 * client-side streaming.
 *
 * @generated from message elude.proto.UpdateCityWithImageUnaryRequest
 */
export declare class UpdateCityWithImageUnaryRequest extends Message<UpdateCityWithImageUnaryRequest> {
  /**
   * Update request for update city with image unary.
   *
   * @generated from field: elude.proto.UpdateCityWithImageData updateReq = 1;
   */
  updateReq?: UpdateCityWithImageData;

  /**
   * Image data in bytes.
   *
   * @generated from field: bytes image = 2;
   */
  image: Uint8Array;

  constructor(data?: PartialMessage<UpdateCityWithImageUnaryRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateCityWithImageUnaryRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCityWithImageUnaryRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCityWithImageUnaryRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCityWithImageUnaryRequest;

  static equals(a: UpdateCityWithImageUnaryRequest | PlainMessage<UpdateCityWithImageUnaryRequest> | undefined, b: UpdateCityWithImageUnaryRequest | PlainMessage<UpdateCityWithImageUnaryRequest> | undefined): boolean;
}

/**
 * GetCountryRequest is used for GetCountry rpc calls. Used to fetch a single country by ID from DB.
 *
 * @generated from message elude.proto.GetCountryRequest
 */
export declare class GetCountryRequest extends Message<GetCountryRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Country id for get country in database countries table.
   *
   * @generated from field: int32 id = 4;
   */
  id: number;

  constructor(data?: PartialMessage<GetCountryRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetCountryRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCountryRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCountryRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCountryRequest;

  static equals(a: GetCountryRequest | PlainMessage<GetCountryRequest> | undefined, b: GetCountryRequest | PlainMessage<GetCountryRequest> | undefined): boolean;
}

/**
 * GetCountriesRequest is used for GetCountries rpc calls. Used to fetch all countries from DB.
 *
 * @generated from message elude.proto.GetCountriesRequest
 */
export declare class GetCountriesRequest extends Message<GetCountriesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  /**
   * Used to filter by countries name.
   *
   * @generated from field: string search = 5;
   */
  search: string;

  /**
   * Used to filter response data
   *
   * @generated from field: elude.proto.FilterOptions filter_options = 6;
   */
  filterOptions?: FilterOptions;

  constructor(data?: PartialMessage<GetCountriesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetCountriesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCountriesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCountriesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCountriesRequest;

  static equals(a: GetCountriesRequest | PlainMessage<GetCountriesRequest> | undefined, b: GetCountriesRequest | PlainMessage<GetCountriesRequest> | undefined): boolean;
}

/**
 * CreateCountryRequest is used for CreateCountry rpc calls. Used to add a new country to DB.
 *
 * @generated from message elude.proto.CreateCountryRequest
 */
export declare class CreateCountryRequest extends Message<CreateCountryRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Country data for create country.
   *
   * @generated from field: elude.proto.Country country = 3;
   */
  country?: Country;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreateCountryRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreateCountryRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCountryRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCountryRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCountryRequest;

  static equals(a: CreateCountryRequest | PlainMessage<CreateCountryRequest> | undefined, b: CreateCountryRequest | PlainMessage<CreateCountryRequest> | undefined): boolean;
}

/**
 * UpdateCountryRequest is used for UpdateCountry rpc calls. Used to update an existing country in DB.
 *
 * @generated from message elude.proto.UpdateCountryRequest
 */
export declare class UpdateCountryRequest extends Message<UpdateCountryRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Country data for delete country.
   *
   * @generated from field: elude.proto.Country country = 3;
   */
  country?: Country;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdateCountryRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateCountryRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCountryRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCountryRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCountryRequest;

  static equals(a: UpdateCountryRequest | PlainMessage<UpdateCountryRequest> | undefined, b: UpdateCountryRequest | PlainMessage<UpdateCountryRequest> | undefined): boolean;
}

/**
 * DeleteCountryRequest is used for DeleteCountry rpc calls. Used to soft delete an existing country in DB.
 *
 * @generated from message elude.proto.DeleteCountryRequest
 */
export declare class DeleteCountryRequest extends Message<DeleteCountryRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Country id for delete country in database countries table.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeleteCountryRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeleteCountryRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCountryRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCountryRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCountryRequest;

  static equals(a: DeleteCountryRequest | PlainMessage<DeleteCountryRequest> | undefined, b: DeleteCountryRequest | PlainMessage<DeleteCountryRequest> | undefined): boolean;
}

/**
 * GetMultipleCountriesRequest is used for GetMultipleCountries rpc calls. Clients should use this to fetch multiple countries by ISO codes
 *
 * @generated from message elude.proto.GetMultipleCountriesRequest
 */
export declare class GetMultipleCountriesRequest extends Message<GetMultipleCountriesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of county iso codes for get multiple countries.
   *
   * @generated from field: repeated string iso_codes = 3;
   */
  isoCodes: string[];

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetMultipleCountriesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetMultipleCountriesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMultipleCountriesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMultipleCountriesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMultipleCountriesRequest;

  static equals(a: GetMultipleCountriesRequest | PlainMessage<GetMultipleCountriesRequest> | undefined, b: GetMultipleCountriesRequest | PlainMessage<GetMultipleCountriesRequest> | undefined): boolean;
}

/**
 * @generated from message elude.proto.GetAverageCostRequest
 */
export declare class GetAverageCostRequest extends Message<GetAverageCostRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetAverageCostRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetAverageCostRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAverageCostRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAverageCostRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAverageCostRequest;

  static equals(a: GetAverageCostRequest | PlainMessage<GetAverageCostRequest> | undefined, b: GetAverageCostRequest | PlainMessage<GetAverageCostRequest> | undefined): boolean;
}

/**
 * @generated from message elude.proto.GetDestinationCitiesRequest
 */
export declare class GetDestinationCitiesRequest extends Message<GetDestinationCitiesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<GetDestinationCitiesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetDestinationCitiesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDestinationCitiesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDestinationCitiesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDestinationCitiesRequest;

  static equals(a: GetDestinationCitiesRequest | PlainMessage<GetDestinationCitiesRequest> | undefined, b: GetDestinationCitiesRequest | PlainMessage<GetDestinationCitiesRequest> | undefined): boolean;
}

/**
 * @generated from message elude.proto.GetTopDestinationsRequest
 */
export declare class GetTopDestinationsRequest extends Message<GetTopDestinationsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetTopDestinationsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetTopDestinationsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTopDestinationsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTopDestinationsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTopDestinationsRequest;

  static equals(a: GetTopDestinationsRequest | PlainMessage<GetTopDestinationsRequest> | undefined, b: GetTopDestinationsRequest | PlainMessage<GetTopDestinationsRequest> | undefined): boolean;
}

/**
 * @generated from message elude.proto.GetAffordableDestinationsRequest
 */
export declare class GetAffordableDestinationsRequest extends Message<GetAffordableDestinationsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetAffordableDestinationsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetAffordableDestinationsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAffordableDestinationsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAffordableDestinationsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAffordableDestinationsRequest;

  static equals(a: GetAffordableDestinationsRequest | PlainMessage<GetAffordableDestinationsRequest> | undefined, b: GetAffordableDestinationsRequest | PlainMessage<GetAffordableDestinationsRequest> | undefined): boolean;
}

/**
 * GetAirportRequest is used for GetAirport rpc calls. Used to fetch a single airport by ID from DB.
 *
 * @generated from message elude.proto.GetAirportRequest
 */
export declare class GetAirportRequest extends Message<GetAirportRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Airport id for get airport in database airports table.
   *
   * @generated from field: int32 id = 4;
   */
  id: number;

  constructor(data?: PartialMessage<GetAirportRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetAirportRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAirportRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAirportRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAirportRequest;

  static equals(a: GetAirportRequest | PlainMessage<GetAirportRequest> | undefined, b: GetAirportRequest | PlainMessage<GetAirportRequest> | undefined): boolean;
}

/**
 * GetAirportsRequest is used for GetAirports rpc calls. Used to fetch all airports from DB.
 *
 * @generated from message elude.proto.GetAirportsRequest
 */
export declare class GetAirportsRequest extends Message<GetAirportsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  /**
   * Used to filter by airport name.
   *
   * @generated from field: string search = 5;
   */
  search: string;

  /**
   * Used to filter response data
   *
   * @generated from field: elude.proto.FilterOptions filter_options = 6;
   */
  filterOptions?: FilterOptions;

  constructor(data?: PartialMessage<GetAirportsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetAirportsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAirportsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAirportsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAirportsRequest;

  static equals(a: GetAirportsRequest | PlainMessage<GetAirportsRequest> | undefined, b: GetAirportsRequest | PlainMessage<GetAirportsRequest> | undefined): boolean;
}

/**
 * CreateAirportRequest is used for CreateAirport rpc calls. Used to add a new airport to DB.
 *
 * @generated from message elude.proto.CreateAirportRequest
 */
export declare class CreateAirportRequest extends Message<CreateAirportRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Airport data for create airport.
   *
   * @generated from field: elude.proto.Airport airport = 3;
   */
  airport?: Airport;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreateAirportRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreateAirportRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAirportRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAirportRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAirportRequest;

  static equals(a: CreateAirportRequest | PlainMessage<CreateAirportRequest> | undefined, b: CreateAirportRequest | PlainMessage<CreateAirportRequest> | undefined): boolean;
}

/**
 * UpdateAirportRequest is used for UpdateAirport rpc calls. Used to update an existing airport in DB.
 *
 * @generated from message elude.proto.UpdateAirportRequest
 */
export declare class UpdateAirportRequest extends Message<UpdateAirportRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Airport data for update airport.
   *
   * @generated from field: elude.proto.Airport airport = 3;
   */
  airport?: Airport;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdateAirportRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateAirportRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAirportRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAirportRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAirportRequest;

  static equals(a: UpdateAirportRequest | PlainMessage<UpdateAirportRequest> | undefined, b: UpdateAirportRequest | PlainMessage<UpdateAirportRequest> | undefined): boolean;
}

/**
 * DeleteAirportRequest is used for DeleteAirport rpc calls. Used to soft delete an existing airport in DB.
 *
 * @generated from message elude.proto.DeleteAirportRequest
 */
export declare class DeleteAirportRequest extends Message<DeleteAirportRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Airport id for delete airport in database airports table.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeleteAirportRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeleteAirportRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAirportRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAirportRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAirportRequest;

  static equals(a: DeleteAirportRequest | PlainMessage<DeleteAirportRequest> | undefined, b: DeleteAirportRequest | PlainMessage<DeleteAirportRequest> | undefined): boolean;
}

/**
 * GetMultipleAirportsRequest is used for GetMultipleAirports rpc calls. Clients should use this to fetch multiple airports by IATA codes
 *
 * @generated from message elude.proto.GetMultipleAirportsRequest
 */
export declare class GetMultipleAirportsRequest extends Message<GetMultipleAirportsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of airport iata codes for get multiple airports.
   *
   * @generated from field: repeated string iata_codes = 3;
   */
  iataCodes: string[];

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetMultipleAirportsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetMultipleAirportsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMultipleAirportsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMultipleAirportsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMultipleAirportsRequest;

  static equals(a: GetMultipleAirportsRequest | PlainMessage<GetMultipleAirportsRequest> | undefined, b: GetMultipleAirportsRequest | PlainMessage<GetMultipleAirportsRequest> | undefined): boolean;
}

/**
 * GetAirlineRequest is used for GetAirline rpc calls. Used to fetch a single airline by ID from DB.
 *
 * @generated from message elude.proto.GetAirlineRequest
 */
export declare class GetAirlineRequest extends Message<GetAirlineRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Airline id for get airline in database airlines table.
   *
   * @generated from field: int32 id = 4;
   */
  id: number;

  constructor(data?: PartialMessage<GetAirlineRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetAirlineRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAirlineRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAirlineRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAirlineRequest;

  static equals(a: GetAirlineRequest | PlainMessage<GetAirlineRequest> | undefined, b: GetAirlineRequest | PlainMessage<GetAirlineRequest> | undefined): boolean;
}

/**
 * GetAirlinesRequest is used for GetAirlines rpc calls. Used to fetch all airlines from DB.
 *
 * @generated from message elude.proto.GetAirlinesRequest
 */
export declare class GetAirlinesRequest extends Message<GetAirlinesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  /**
   * Used to filter by airline name.
   *
   * @generated from field: string search = 5;
   */
  search: string;

  /**
   * Used to filter response data
   *
   * @generated from field: elude.proto.FilterOptions filter_options = 6;
   */
  filterOptions?: FilterOptions;

  constructor(data?: PartialMessage<GetAirlinesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetAirlinesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAirlinesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAirlinesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAirlinesRequest;

  static equals(a: GetAirlinesRequest | PlainMessage<GetAirlinesRequest> | undefined, b: GetAirlinesRequest | PlainMessage<GetAirlinesRequest> | undefined): boolean;
}

/**
 * CreateAirlineRequest is used for CreateAirline rpc calls. Used to add a new airline to DB.
 *
 * @generated from message elude.proto.CreateAirlineRequest
 */
export declare class CreateAirlineRequest extends Message<CreateAirlineRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Airline data for create airline.
   *
   * @generated from field: elude.proto.Airline airline = 3;
   */
  airline?: Airline;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreateAirlineRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreateAirlineRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAirlineRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAirlineRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAirlineRequest;

  static equals(a: CreateAirlineRequest | PlainMessage<CreateAirlineRequest> | undefined, b: CreateAirlineRequest | PlainMessage<CreateAirlineRequest> | undefined): boolean;
}

/**
 * UpdateAirlineRequest is used for UpdateAirline rpc calls. Used to update an existing airline in DB.
 *
 * @generated from message elude.proto.UpdateAirlineRequest
 */
export declare class UpdateAirlineRequest extends Message<UpdateAirlineRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Airline data for update airline.
   *
   * @generated from field: elude.proto.Airline airline = 3;
   */
  airline?: Airline;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdateAirlineRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateAirlineRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAirlineRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAirlineRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAirlineRequest;

  static equals(a: UpdateAirlineRequest | PlainMessage<UpdateAirlineRequest> | undefined, b: UpdateAirlineRequest | PlainMessage<UpdateAirlineRequest> | undefined): boolean;
}

/**
 * DeleteAirlineRequest is used for DeleteAirline rpc calls. Used to soft delete an existing airline in DB.
 *
 * @generated from message elude.proto.DeleteAirlineRequest
 */
export declare class DeleteAirlineRequest extends Message<DeleteAirlineRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Airline id for delete airline in database airlines table.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeleteAirlineRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeleteAirlineRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAirlineRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAirlineRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAirlineRequest;

  static equals(a: DeleteAirlineRequest | PlainMessage<DeleteAirlineRequest> | undefined, b: DeleteAirlineRequest | PlainMessage<DeleteAirlineRequest> | undefined): boolean;
}

/**
 * GetMultipleAirlinesRequest is used for GetMultipleAirlines rpc calls. Clients should use this to fetch multiple airlines by IATA codes
 *
 * @generated from message elude.proto.GetMultipleAirlinesRequest
 */
export declare class GetMultipleAirlinesRequest extends Message<GetMultipleAirlinesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of airlines iata codes for get multiple airlines.
   *
   * @generated from field: repeated string iata_codes = 3;
   */
  iataCodes: string[];

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetMultipleAirlinesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetMultipleAirlinesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMultipleAirlinesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMultipleAirlinesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMultipleAirlinesRequest;

  static equals(a: GetMultipleAirlinesRequest | PlainMessage<GetMultipleAirlinesRequest> | undefined, b: GetMultipleAirlinesRequest | PlainMessage<GetMultipleAirlinesRequest> | undefined): boolean;
}

/**
 * UpdateAirlineWithImageRequest is used in UpdateAirlineWithImage rpc calls.  Clients should use this when they want to add a new image to an airline.
 *
 * @generated from message elude.proto.UpdateAirlineWithImageRequest
 */
export declare class UpdateAirlineWithImageRequest extends Message<UpdateAirlineWithImageRequest> {
  /**
   * @generated from oneof elude.proto.UpdateAirlineWithImageRequest.data
   */
  data: {
    /**
     * Update request for update airline with image.
     *
     * @generated from field: elude.proto.UpdateAirlineWithImageData updateReq = 1;
     */
    value: UpdateAirlineWithImageData;
    case: "updateReq";
  } | {
    /**
     * Image data in byte chunks.
     *
     * @generated from field: bytes chunk_data = 2;
     */
    value: Uint8Array;
    case: "chunkData";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<UpdateAirlineWithImageRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateAirlineWithImageRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAirlineWithImageRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAirlineWithImageRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAirlineWithImageRequest;

  static equals(a: UpdateAirlineWithImageRequest | PlainMessage<UpdateAirlineWithImageRequest> | undefined, b: UpdateAirlineWithImageRequest | PlainMessage<UpdateAirlineWithImageRequest> | undefined): boolean;
}

/**
 * UpdateAirlineWithImageUnaryRequest is used in UpdateAirlineWithImageUnary rpc calls. Needed for web clients until grpc-web starts supporting
 * client-side streaming.
 *
 * @generated from message elude.proto.UpdateAirlineWithImageUnaryRequest
 */
export declare class UpdateAirlineWithImageUnaryRequest extends Message<UpdateAirlineWithImageUnaryRequest> {
  /**
   * Update request for update airline with image unary.
   *
   * @generated from field: elude.proto.UpdateAirlineWithImageData updateReq = 1;
   */
  updateReq?: UpdateAirlineWithImageData;

  /**
   * Image data in bytes.
   *
   * @generated from field: bytes image = 2;
   */
  image: Uint8Array;

  constructor(data?: PartialMessage<UpdateAirlineWithImageUnaryRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateAirlineWithImageUnaryRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAirlineWithImageUnaryRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAirlineWithImageUnaryRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAirlineWithImageUnaryRequest;

  static equals(a: UpdateAirlineWithImageUnaryRequest | PlainMessage<UpdateAirlineWithImageUnaryRequest> | undefined, b: UpdateAirlineWithImageUnaryRequest | PlainMessage<UpdateAirlineWithImageUnaryRequest> | undefined): boolean;
}

/**
 * GetFeaturedLocationsByLocationRequest is used in GetFeaturedLocationsByLocation rpc calls. Clients should use this when they want to generate
 * featured locations based on a location ID.
 *
 * @generated from message elude.proto.GetFeaturedLocationsByLocationRequest
 */
export declare class GetFeaturedLocationsByLocationRequest extends Message<GetFeaturedLocationsByLocationRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * LocationIdentifier data for get featured location by location.
   *
   * @generated from field: elude.proto.LocationIdentifier location = 3;
   */
  location?: LocationIdentifier;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  /**
   * If true ignores connected city value in database.
   *
   * @generated from field: bool override_connected_city = 5;
   */
  overrideConnectedCity: boolean;

  constructor(data?: PartialMessage<GetFeaturedLocationsByLocationRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetFeaturedLocationsByLocationRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeaturedLocationsByLocationRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeaturedLocationsByLocationRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeaturedLocationsByLocationRequest;

  static equals(a: GetFeaturedLocationsByLocationRequest | PlainMessage<GetFeaturedLocationsByLocationRequest> | undefined, b: GetFeaturedLocationsByLocationRequest | PlainMessage<GetFeaturedLocationsByLocationRequest> | undefined): boolean;
}

/**
 * GetFeaturedLocationsByCoordinatesRequest is used in GetFeaturedLocationsByCoordinates rpc calls. Clients should use this when they want to generate
 * featured locations based on coordinates.
 *
 * @generated from message elude.proto.GetFeaturedLocationsByCoordinatesRequest
 */
export declare class GetFeaturedLocationsByCoordinatesRequest extends Message<GetFeaturedLocationsByCoordinatesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Coordinates for get featured locations by coordinates.
   *
   * @generated from field: elude.proto.Coordinates coordinates = 3;
   */
  coordinates?: Coordinates;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  /**
   * If true ignores connected city value in database.
   *
   * @generated from field: bool override_connected_city = 5;
   */
  overrideConnectedCity: boolean;

  constructor(data?: PartialMessage<GetFeaturedLocationsByCoordinatesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetFeaturedLocationsByCoordinatesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeaturedLocationsByCoordinatesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeaturedLocationsByCoordinatesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeaturedLocationsByCoordinatesRequest;

  static equals(a: GetFeaturedLocationsByCoordinatesRequest | PlainMessage<GetFeaturedLocationsByCoordinatesRequest> | undefined, b: GetFeaturedLocationsByCoordinatesRequest | PlainMessage<GetFeaturedLocationsByCoordinatesRequest> | undefined): boolean;
}

/**
 * GetFeaturedLocationRequest currently not used.
 *
 * @generated from message elude.proto.GetFeaturedLocationRequest
 * @deprecated
 */
export declare class GetFeaturedLocationRequest extends Message<GetFeaturedLocationRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * @generated from field: int32 id = 4;
   */
  id: number;

  constructor(data?: PartialMessage<GetFeaturedLocationRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetFeaturedLocationRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeaturedLocationRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeaturedLocationRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeaturedLocationRequest;

  static equals(a: GetFeaturedLocationRequest | PlainMessage<GetFeaturedLocationRequest> | undefined, b: GetFeaturedLocationRequest | PlainMessage<GetFeaturedLocationRequest> | undefined): boolean;
}

/**
 * GetFeaturedLocationsRequest currently not used.
 *
 * @generated from message elude.proto.GetFeaturedLocationsRequest
 * @deprecated
 */
export declare class GetFeaturedLocationsRequest extends Message<GetFeaturedLocationsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  /**
   * Used to filter by featured locations name.
   *
   * @generated from field: string search = 5;
   */
  search: string;

  constructor(data?: PartialMessage<GetFeaturedLocationsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetFeaturedLocationsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeaturedLocationsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeaturedLocationsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeaturedLocationsRequest;

  static equals(a: GetFeaturedLocationsRequest | PlainMessage<GetFeaturedLocationsRequest> | undefined, b: GetFeaturedLocationsRequest | PlainMessage<GetFeaturedLocationsRequest> | undefined): boolean;
}

/**
 * CreateFeaturedLocationRequest currently not used.
 *
 * @generated from message elude.proto.CreateFeaturedLocationRequest
 * @deprecated
 */
export declare class CreateFeaturedLocationRequest extends Message<CreateFeaturedLocationRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * @generated from field: elude.proto.FeaturedLocation featured_location = 3;
   */
  featuredLocation?: FeaturedLocation;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreateFeaturedLocationRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreateFeaturedLocationRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFeaturedLocationRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFeaturedLocationRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFeaturedLocationRequest;

  static equals(a: CreateFeaturedLocationRequest | PlainMessage<CreateFeaturedLocationRequest> | undefined, b: CreateFeaturedLocationRequest | PlainMessage<CreateFeaturedLocationRequest> | undefined): boolean;
}

/**
 * UpdateFeaturedLocationRequest currently not used.
 *
 * @generated from message elude.proto.UpdateFeaturedLocationRequest
 * @deprecated
 */
export declare class UpdateFeaturedLocationRequest extends Message<UpdateFeaturedLocationRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * @generated from field: elude.proto.FeaturedLocation featured_location = 3;
   */
  featuredLocation?: FeaturedLocation;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdateFeaturedLocationRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateFeaturedLocationRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateFeaturedLocationRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateFeaturedLocationRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateFeaturedLocationRequest;

  static equals(a: UpdateFeaturedLocationRequest | PlainMessage<UpdateFeaturedLocationRequest> | undefined, b: UpdateFeaturedLocationRequest | PlainMessage<UpdateFeaturedLocationRequest> | undefined): boolean;
}

/**
 * DeleteFeaturedLocationRequest currently not used.
 *
 * @generated from message elude.proto.DeleteFeaturedLocationRequest
 * @deprecated
 */
export declare class DeleteFeaturedLocationRequest extends Message<DeleteFeaturedLocationRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeleteFeaturedLocationRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeleteFeaturedLocationRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFeaturedLocationRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFeaturedLocationRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFeaturedLocationRequest;

  static equals(a: DeleteFeaturedLocationRequest | PlainMessage<DeleteFeaturedLocationRequest> | undefined, b: DeleteFeaturedLocationRequest | PlainMessage<DeleteFeaturedLocationRequest> | undefined): boolean;
}

/**
 * GetConnectedCityRequest currently not used.
 *
 * @generated from message elude.proto.GetConnectedCityRequest
 * @deprecated
 */
export declare class GetConnectedCityRequest extends Message<GetConnectedCityRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * @generated from field: int32 id = 4;
   */
  id: number;

  constructor(data?: PartialMessage<GetConnectedCityRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetConnectedCityRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConnectedCityRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConnectedCityRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConnectedCityRequest;

  static equals(a: GetConnectedCityRequest | PlainMessage<GetConnectedCityRequest> | undefined, b: GetConnectedCityRequest | PlainMessage<GetConnectedCityRequest> | undefined): boolean;
}

/**
 * GetConnectedCitiesRequest currently not used.
 *
 * @generated from message elude.proto.GetConnectedCitiesRequest
 * @deprecated
 */
export declare class GetConnectedCitiesRequest extends Message<GetConnectedCitiesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  /**
   * Used to filter by connected city name.
   *
   * @generated from field: string search = 5;
   */
  search: string;

  constructor(data?: PartialMessage<GetConnectedCitiesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetConnectedCitiesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConnectedCitiesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConnectedCitiesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConnectedCitiesRequest;

  static equals(a: GetConnectedCitiesRequest | PlainMessage<GetConnectedCitiesRequest> | undefined, b: GetConnectedCitiesRequest | PlainMessage<GetConnectedCitiesRequest> | undefined): boolean;
}

/**
 * CreateConnectedCityRequest currently not used.
 *
 * @generated from message elude.proto.CreateConnectedCityRequest
 * @deprecated
 */
export declare class CreateConnectedCityRequest extends Message<CreateConnectedCityRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * @generated from field: elude.proto.ConnectedCity connected_city = 3;
   */
  connectedCity?: ConnectedCity;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreateConnectedCityRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreateConnectedCityRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateConnectedCityRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateConnectedCityRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateConnectedCityRequest;

  static equals(a: CreateConnectedCityRequest | PlainMessage<CreateConnectedCityRequest> | undefined, b: CreateConnectedCityRequest | PlainMessage<CreateConnectedCityRequest> | undefined): boolean;
}

/**
 * UpdateConnectedCityRequest currently not used.
 *
 * @generated from message elude.proto.UpdateConnectedCityRequest
 * @deprecated
 */
export declare class UpdateConnectedCityRequest extends Message<UpdateConnectedCityRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * @generated from field: elude.proto.ConnectedCity connected_city = 3;
   */
  connectedCity?: ConnectedCity;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdateConnectedCityRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateConnectedCityRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateConnectedCityRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateConnectedCityRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateConnectedCityRequest;

  static equals(a: UpdateConnectedCityRequest | PlainMessage<UpdateConnectedCityRequest> | undefined, b: UpdateConnectedCityRequest | PlainMessage<UpdateConnectedCityRequest> | undefined): boolean;
}

/**
 * DeleteConnectedCityRequest currently not used.
 *
 * @generated from message elude.proto.DeleteConnectedCityRequest
 * @deprecated
 */
export declare class DeleteConnectedCityRequest extends Message<DeleteConnectedCityRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeleteConnectedCityRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeleteConnectedCityRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteConnectedCityRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteConnectedCityRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteConnectedCityRequest;

  static equals(a: DeleteConnectedCityRequest | PlainMessage<DeleteConnectedCityRequest> | undefined, b: DeleteConnectedCityRequest | PlainMessage<DeleteConnectedCityRequest> | undefined): boolean;
}

/**
 * GetConnectedCitiesForDepartureCityRequest currently not used.
 *
 * @generated from message elude.proto.GetConnectedCitiesForDepartureCityRequest
 * @deprecated
 */
export declare class GetConnectedCitiesForDepartureCityRequest extends Message<GetConnectedCitiesForDepartureCityRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  /**
   * @generated from field: int32 departure_city_id = 5;
   */
  departureCityId: number;

  constructor(data?: PartialMessage<GetConnectedCitiesForDepartureCityRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetConnectedCitiesForDepartureCityRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConnectedCitiesForDepartureCityRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConnectedCitiesForDepartureCityRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConnectedCitiesForDepartureCityRequest;

  static equals(a: GetConnectedCitiesForDepartureCityRequest | PlainMessage<GetConnectedCitiesForDepartureCityRequest> | undefined, b: GetConnectedCitiesForDepartureCityRequest | PlainMessage<GetConnectedCitiesForDepartureCityRequest> | undefined): boolean;
}

/**
 * GetWeatherByCoordinatesRequest is used in GetWeatherByCoordinates rpc calls. Clients should use this when they want to fetch only
 * current weather for given coordinates.
 *
 * @generated from message elude.proto.GetWeatherByCoordinatesRequest
 */
export declare class GetWeatherByCoordinatesRequest extends Message<GetWeatherByCoordinatesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Coordinates for get weather by coordinates.
   *
   * @generated from field: elude.proto.Coordinates coordinates = 3;
   */
  coordinates?: Coordinates;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetWeatherByCoordinatesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetWeatherByCoordinatesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWeatherByCoordinatesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWeatherByCoordinatesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWeatherByCoordinatesRequest;

  static equals(a: GetWeatherByCoordinatesRequest | PlainMessage<GetWeatherByCoordinatesRequest> | undefined, b: GetWeatherByCoordinatesRequest | PlainMessage<GetWeatherByCoordinatesRequest> | undefined): boolean;
}

/**
 * GetRegionRequest is used for GetRegion rpc calls. Used to fetch a single region by ID from DB.
 *
 * @generated from message elude.proto.GetRegionRequest
 */
export declare class GetRegionRequest extends Message<GetRegionRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Region in for get region in database regions table.
   *
   * @generated from field: int32 id = 4;
   */
  id: number;

  constructor(data?: PartialMessage<GetRegionRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetRegionRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRegionRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRegionRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRegionRequest;

  static equals(a: GetRegionRequest | PlainMessage<GetRegionRequest> | undefined, b: GetRegionRequest | PlainMessage<GetRegionRequest> | undefined): boolean;
}

/**
 * GetRegionsRequest is used for GetRegions rpc calls. Used to fetch all regions from DB.
 *
 * @generated from message elude.proto.GetRegionsRequest
 */
export declare class GetRegionsRequest extends Message<GetRegionsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  /**
   * Used to filter by regions name.
   *
   * @generated from field: string search = 5;
   */
  search: string;

  /**
   * Used to filter response data
   *
   * @generated from field: elude.proto.FilterOptions filter_options = 6;
   */
  filterOptions?: FilterOptions;

  constructor(data?: PartialMessage<GetRegionsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetRegionsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRegionsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRegionsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRegionsRequest;

  static equals(a: GetRegionsRequest | PlainMessage<GetRegionsRequest> | undefined, b: GetRegionsRequest | PlainMessage<GetRegionsRequest> | undefined): boolean;
}

/**
 * CreateRegionRequest is used for CreateRegion rpc calls. Used to add a new region to DB.
 *
 * @generated from message elude.proto.CreateRegionRequest
 */
export declare class CreateRegionRequest extends Message<CreateRegionRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Region data for create region.
   *
   * @generated from field: elude.proto.Region region = 3;
   */
  region?: Region;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<CreateRegionRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CreateRegionRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRegionRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRegionRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRegionRequest;

  static equals(a: CreateRegionRequest | PlainMessage<CreateRegionRequest> | undefined, b: CreateRegionRequest | PlainMessage<CreateRegionRequest> | undefined): boolean;
}

/**
 * UpdateRegionRequest is used for UpdateRegion rpc calls. Used to update an existing region in DB.
 *
 * @generated from message elude.proto.UpdateRegionRequest
 */
export declare class UpdateRegionRequest extends Message<UpdateRegionRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Region data for update region.
   *
   * @generated from field: elude.proto.Region region = 3;
   */
  region?: Region;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<UpdateRegionRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateRegionRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRegionRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRegionRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRegionRequest;

  static equals(a: UpdateRegionRequest | PlainMessage<UpdateRegionRequest> | undefined, b: UpdateRegionRequest | PlainMessage<UpdateRegionRequest> | undefined): boolean;
}

/**
 * DeleteRegionRequest is used for DeleteRegion rpc calls. Used to soft delete an existing region in DB.
 *
 * @generated from message elude.proto.DeleteRegionRequest
 */
export declare class DeleteRegionRequest extends Message<DeleteRegionRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Region id for delete region in database regions table.
   *
   * @generated from field: int32 id = 3;
   */
  id: number;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<DeleteRegionRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.DeleteRegionRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRegionRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRegionRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRegionRequest;

  static equals(a: DeleteRegionRequest | PlainMessage<DeleteRegionRequest> | undefined, b: DeleteRegionRequest | PlainMessage<DeleteRegionRequest> | undefined): boolean;
}

/**
 * GetLocationsRequest is used for GetLocations rpc calls. Used to fetch locations based on the request.
 *
 * @generated from message elude.proto.GetLocationsRequest
 */
export declare class GetLocationsRequest extends Message<GetLocationsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Used to filter by location name.
   *
   * @generated from field: string search = 4;
   */
  search: string;

  /**
   * Different types of searches.
   *
   * @generated from field: elude.proto.SearchTypeEnum search_type = 5;
   */
  searchType: SearchTypeEnum;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 6;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<GetLocationsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetLocationsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLocationsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLocationsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLocationsRequest;

  static equals(a: GetLocationsRequest | PlainMessage<GetLocationsRequest> | undefined, b: GetLocationsRequest | PlainMessage<GetLocationsRequest> | undefined): boolean;
}

/**
 * GetLocationByCoordinatesRequest is used in GetNearestLocationByCoordinates rpc calls.
 * Clients should always use this to determine the closest departure location.
 *
 * @generated from message elude.proto.GetLocationByCoordinatesRequest
 */
export declare class GetLocationByCoordinatesRequest extends Message<GetLocationByCoordinatesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Coordinates for get locations by coordinates.
   *
   * @generated from field: elude.proto.Coordinates coordinates = 3;
   */
  coordinates?: Coordinates;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 4;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetLocationByCoordinatesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetLocationByCoordinatesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLocationByCoordinatesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLocationByCoordinatesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLocationByCoordinatesRequest;

  static equals(a: GetLocationByCoordinatesRequest | PlainMessage<GetLocationByCoordinatesRequest> | undefined, b: GetLocationByCoordinatesRequest | PlainMessage<GetLocationByCoordinatesRequest> | undefined): boolean;
}

/**
 * GetLocationRequest is currently used only for GetNearestLocation rpc calls. Used to fetch the closest departure location
 * based on the city ID provided.
 *
 * @generated from message elude.proto.GetLocationRequest
 */
export declare class GetLocationRequest extends Message<GetLocationRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * City id for get locations in database cities table.
   *
   * @generated from field: int32 id = 4;
   */
  id: number;

  constructor(data?: PartialMessage<GetLocationRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetLocationRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLocationRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLocationRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLocationRequest;

  static equals(a: GetLocationRequest | PlainMessage<GetLocationRequest> | undefined, b: GetLocationRequest | PlainMessage<GetLocationRequest> | undefined): boolean;
}

/**
 * GetLocationsByIdentifiersRequest is used for GetLocationsByIdentifiers rpc calls. Used to fetch all of the actual database
 * entities based on the location ids and location types
 *
 * @generated from message elude.proto.GetLocationsByIdentifiersRequest
 */
export declare class GetLocationsByIdentifiersRequest extends Message<GetLocationsByIdentifiersRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Location identifier data for get locations by identifiers.
   *
   * @generated from field: repeated elude.proto.LocationIdentifier location_identifiers = 4;
   */
  locationIdentifiers: LocationIdentifier[];

  constructor(data?: PartialMessage<GetLocationsByIdentifiersRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetLocationsByIdentifiersRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLocationsByIdentifiersRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLocationsByIdentifiersRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLocationsByIdentifiersRequest;

  static equals(a: GetLocationsByIdentifiersRequest | PlainMessage<GetLocationsByIdentifiersRequest> | undefined, b: GetLocationsByIdentifiersRequest | PlainMessage<GetLocationsByIdentifiersRequest> | undefined): boolean;
}

/**
 * GetSearchLocationsRequest is used for GetSearchLocations rpc calls. Used to fetch locations for search.
 *
 * @generated from message elude.proto.GetSearchLocationsRequest
 */
export declare class GetSearchLocationsRequest extends Message<GetSearchLocationsRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * Used to filter by cities name.
   *
   * @generated from field: elude.proto.ItineraryRequest request = 4;
   */
  request?: ItineraryRequest;

  /**
   * Used to filter response data
   *
   * @generated from field: repeated int32 cache_city_ids = 5;
   */
  cacheCityIds: number[];

  /**
   * Used to filter response data
   *
   * @generated from field: repeated int32 cache_location_ids = 6;
   */
  cacheLocationIds: number[];

  constructor(data?: PartialMessage<GetSearchLocationsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetSearchLocationsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSearchLocationsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSearchLocationsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSearchLocationsRequest;

  static equals(a: GetSearchLocationsRequest | PlainMessage<GetSearchLocationsRequest> | undefined, b: GetSearchLocationsRequest | PlainMessage<GetSearchLocationsRequest> | undefined): boolean;
}

/**
 * GetPreferencesRequest is used for GetPreferences rpc calls. Used to fetch all preferences in database
 *
 * @generated from message elude.proto.GetPreferencesRequest
 */
export declare class GetPreferencesRequest extends Message<GetPreferencesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetPreferencesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetPreferencesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPreferencesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPreferencesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPreferencesRequest;

  static equals(a: GetPreferencesRequest | PlainMessage<GetPreferencesRequest> | undefined, b: GetPreferencesRequest | PlainMessage<GetPreferencesRequest> | undefined): boolean;
}

/**
 * UpdateUserPreferencesRequest is used for UpdateUserPreferences rpc calls. Used to update user preferences
 *
 * @generated from message elude.proto.UpdateUserPreferencesRequest
 */
export declare class UpdateUserPreferencesRequest extends Message<UpdateUserPreferencesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  /**
   * List of preferences ids for update user preferences in database.
   *
   * @generated from field: repeated int32 preference_ids = 4;
   */
  preferenceIds: number[];

  constructor(data?: PartialMessage<UpdateUserPreferencesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateUserPreferencesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserPreferencesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserPreferencesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserPreferencesRequest;

  static equals(a: UpdateUserPreferencesRequest | PlainMessage<UpdateUserPreferencesRequest> | undefined, b: UpdateUserPreferencesRequest | PlainMessage<UpdateUserPreferencesRequest> | undefined): boolean;
}

/**
 * GetRecommendedCitiesRequest is used for GetRecommendedCities rpc calls. Used to get recommended cities by user preferences.
 *
 * @generated from message elude.proto.GetRecommendedCitiesRequest
 */
export declare class GetRecommendedCitiesRequest extends Message<GetRecommendedCitiesRequest> {
  /**
   * Used to authorize the request.
   *
   * @generated from field: elude.proto.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 2;
   */
  sessionInfo?: SessionInfo;

  /**
   * Common options for request.
   *
   * @generated from field: elude.proto.Options options = 3;
   */
  options?: Options;

  constructor(data?: PartialMessage<GetRecommendedCitiesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetRecommendedCitiesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRecommendedCitiesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRecommendedCitiesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRecommendedCitiesRequest;

  static equals(a: GetRecommendedCitiesRequest | PlainMessage<GetRecommendedCitiesRequest> | undefined, b: GetRecommendedCitiesRequest | PlainMessage<GetRecommendedCitiesRequest> | undefined): boolean;
}

