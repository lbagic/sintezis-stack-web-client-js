// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/location/location_response.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {SessionInfo} from "../commons/session_info_pb.js";
import type {Airport, City} from "../models/city_pb.js";
import type {Status} from "../commons/status_pb.js";
import type {Pagination} from "../commons/pagination_pb.js";
import type {Country} from "../models/country_pb.js";
import type {Airline} from "../models/airline_pb.js";
import type {FeaturedLocation} from "../models/featured_location_pb.js";
import type {ConnectedCity} from "../models/connected_city_pb.js";
import type {Weather} from "../commons/weather_pb.js";
import type {Region} from "../models/region_pb.js";
import type {Location} from "../models/location_pb.js";
import type {SearchLocation} from "../commons/flow_common_pb.js";
import type {ShardConnections} from "../models/shard_pb.js";
import type {Preference} from "../models/preference_pb.js";

/**
 * CityResponse is used for City rpc calls. Contains City data.
 *
 * @generated from message elude.proto.CityResponse
 */
export declare class CityResponse extends Message<CityResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * City data from city requests.
   *
   * @generated from field: elude.proto.City city = 2;
   */
  city?: City;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<CityResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CityResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CityResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CityResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CityResponse;

  static equals(a: CityResponse | PlainMessage<CityResponse> | undefined, b: CityResponse | PlainMessage<CityResponse> | undefined): boolean;
}

/**
 * CitiesResponse is used for Cities rpc calls. Contains List of Cities data.
 *
 * @generated from message elude.proto.CitiesResponse
 */
export declare class CitiesResponse extends Message<CitiesResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of cities data from cities requests.
   *
   * @generated from field: repeated elude.proto.City cities = 2;
   */
  cities: City[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<CitiesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CitiesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CitiesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CitiesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CitiesResponse;

  static equals(a: CitiesResponse | PlainMessage<CitiesResponse> | undefined, b: CitiesResponse | PlainMessage<CitiesResponse> | undefined): boolean;
}

/**
 * CountryResponse is used for Country rpc calls. Contains Country data.
 *
 * @generated from message elude.proto.CountryResponse
 */
export declare class CountryResponse extends Message<CountryResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Country data from country requests.
   *
   * @generated from field: elude.proto.Country country = 2;
   */
  country?: Country;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<CountryResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CountryResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountryResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountryResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountryResponse;

  static equals(a: CountryResponse | PlainMessage<CountryResponse> | undefined, b: CountryResponse | PlainMessage<CountryResponse> | undefined): boolean;
}

/**
 * CountriesResponse is used for Countries rpc calls. Contains List of Countries data.
 *
 * @generated from message elude.proto.CountriesResponse
 */
export declare class CountriesResponse extends Message<CountriesResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of countries data from countries requests.
   *
   * @generated from field: repeated elude.proto.Country countries = 2;
   */
  countries: Country[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<CountriesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.CountriesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountriesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountriesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountriesResponse;

  static equals(a: CountriesResponse | PlainMessage<CountriesResponse> | undefined, b: CountriesResponse | PlainMessage<CountriesResponse> | undefined): boolean;
}

/**
 * GetAverageCostResponse is used for GetAverageCost rpc call.
 *
 * @generated from message elude.proto.GetAverageCostResponse
 */
export declare class GetAverageCostResponse extends Message<GetAverageCostResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 2;
   */
  status?: Status;

  constructor(data?: PartialMessage<GetAverageCostResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetAverageCostResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAverageCostResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAverageCostResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAverageCostResponse;

  static equals(a: GetAverageCostResponse | PlainMessage<GetAverageCostResponse> | undefined, b: GetAverageCostResponse | PlainMessage<GetAverageCostResponse> | undefined): boolean;
}

/**
 * GetDestinationCitiesResponse is used for GetDestinationCities rpc call.
 *
 * @generated from message elude.proto.GetDestinationCitiesResponse
 */
export declare class GetDestinationCitiesResponse extends Message<GetDestinationCitiesResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 2;
   */
  status?: Status;

  constructor(data?: PartialMessage<GetDestinationCitiesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetDestinationCitiesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDestinationCitiesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDestinationCitiesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDestinationCitiesResponse;

  static equals(a: GetDestinationCitiesResponse | PlainMessage<GetDestinationCitiesResponse> | undefined, b: GetDestinationCitiesResponse | PlainMessage<GetDestinationCitiesResponse> | undefined): boolean;
}

/**
 * GetTopDestinationsResponse is used for GetTopDestinations rpc call.
 *
 * @generated from message elude.proto.GetTopDestinationsResponse
 */
export declare class GetTopDestinationsResponse extends Message<GetTopDestinationsResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 2;
   */
  status?: Status;

  constructor(data?: PartialMessage<GetTopDestinationsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetTopDestinationsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTopDestinationsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTopDestinationsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTopDestinationsResponse;

  static equals(a: GetTopDestinationsResponse | PlainMessage<GetTopDestinationsResponse> | undefined, b: GetTopDestinationsResponse | PlainMessage<GetTopDestinationsResponse> | undefined): boolean;
}

/**
 * GetAffordableDestinationsResponse is used for GetAffordableDestinations rpc call.
 *
 * @generated from message elude.proto.GetAffordableDestinationsResponse
 */
export declare class GetAffordableDestinationsResponse extends Message<GetAffordableDestinationsResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 2;
   */
  status?: Status;

  constructor(data?: PartialMessage<GetAffordableDestinationsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetAffordableDestinationsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAffordableDestinationsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAffordableDestinationsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAffordableDestinationsResponse;

  static equals(a: GetAffordableDestinationsResponse | PlainMessage<GetAffordableDestinationsResponse> | undefined, b: GetAffordableDestinationsResponse | PlainMessage<GetAffordableDestinationsResponse> | undefined): boolean;
}

/**
 * AirportResponse is used for Airport rpc calls. Contains Airport data.
 *
 * @generated from message elude.proto.AirportResponse
 */
export declare class AirportResponse extends Message<AirportResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Airport data from airline requests.
   *
   * @generated from field: elude.proto.Airport airport = 2;
   */
  airport?: Airport;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<AirportResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.AirportResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AirportResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AirportResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AirportResponse;

  static equals(a: AirportResponse | PlainMessage<AirportResponse> | undefined, b: AirportResponse | PlainMessage<AirportResponse> | undefined): boolean;
}

/**
 * AirportsResponse is used for Airports rpc calls. Contains List of Airports data.
 *
 * @generated from message elude.proto.AirportsResponse
 */
export declare class AirportsResponse extends Message<AirportsResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of airports data from airports requests.
   *
   * @generated from field: repeated elude.proto.Airport airports = 2;
   */
  airports: Airport[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<AirportsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.AirportsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AirportsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AirportsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AirportsResponse;

  static equals(a: AirportsResponse | PlainMessage<AirportsResponse> | undefined, b: AirportsResponse | PlainMessage<AirportsResponse> | undefined): boolean;
}

/**
 * AirlineResponse is used for Airline rpc calls. Contains Airline data.
 *
 * @generated from message elude.proto.AirlineResponse
 */
export declare class AirlineResponse extends Message<AirlineResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Airlines data from airline requests.
   *
   * @generated from field: elude.proto.Airline airline = 2;
   */
  airline?: Airline;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<AirlineResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.AirlineResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AirlineResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AirlineResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AirlineResponse;

  static equals(a: AirlineResponse | PlainMessage<AirlineResponse> | undefined, b: AirlineResponse | PlainMessage<AirlineResponse> | undefined): boolean;
}

/**
 * AirlineResponse is used for Airlines rpc calls. Contains List of Airlines data.
 *
 * @generated from message elude.proto.AirlinesResponse
 */
export declare class AirlinesResponse extends Message<AirlinesResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of airlines data from airlines requests.
   *
   * @generated from field: repeated elude.proto.Airline airlines = 2;
   */
  airlines: Airline[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<AirlinesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.AirlinesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AirlinesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AirlinesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AirlinesResponse;

  static equals(a: AirlinesResponse | PlainMessage<AirlinesResponse> | undefined, b: AirlinesResponse | PlainMessage<AirlinesResponse> | undefined): boolean;
}

/**
 * FeaturedLocationsResponse is used for FeaturedLocations rpc calls. Contains List of featured locations data.
 *
 * @generated from message elude.proto.FeaturedLocationsResponse
 */
export declare class FeaturedLocationsResponse extends Message<FeaturedLocationsResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of featured locations data from featured locations requests.
   *
   * @generated from field: repeated elude.proto.FeaturedLocation featured_locations = 2;
   */
  featuredLocations: FeaturedLocation[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<FeaturedLocationsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.FeaturedLocationsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeaturedLocationsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeaturedLocationsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeaturedLocationsResponse;

  static equals(a: FeaturedLocationsResponse | PlainMessage<FeaturedLocationsResponse> | undefined, b: FeaturedLocationsResponse | PlainMessage<FeaturedLocationsResponse> | undefined): boolean;
}

/**
 * FeaturedLocationResponse is used for FeaturedLocation rpc calls. Contains FeaturedLocation data.
 *
 * @generated from message elude.proto.FeaturedLocationResponse
 */
export declare class FeaturedLocationResponse extends Message<FeaturedLocationResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Featured location data from FeaturedLocation requests.
   *
   * @generated from field: elude.proto.FeaturedLocation featured_location = 2;
   */
  featuredLocation?: FeaturedLocation;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<FeaturedLocationResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.FeaturedLocationResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeaturedLocationResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeaturedLocationResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeaturedLocationResponse;

  static equals(a: FeaturedLocationResponse | PlainMessage<FeaturedLocationResponse> | undefined, b: FeaturedLocationResponse | PlainMessage<FeaturedLocationResponse> | undefined): boolean;
}

/**
 * Currently not used.
 *
 * @generated from message elude.proto.ConnectedCitiesResponse
 */
export declare class ConnectedCitiesResponse extends Message<ConnectedCitiesResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * @generated from field: repeated elude.proto.ConnectedCity connected_cities = 2;
   */
  connectedCities: ConnectedCity[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<ConnectedCitiesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.ConnectedCitiesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectedCitiesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectedCitiesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectedCitiesResponse;

  static equals(a: ConnectedCitiesResponse | PlainMessage<ConnectedCitiesResponse> | undefined, b: ConnectedCitiesResponse | PlainMessage<ConnectedCitiesResponse> | undefined): boolean;
}

/**
 * Currently not used.
 *
 * @generated from message elude.proto.ConnectedCityResponse
 */
export declare class ConnectedCityResponse extends Message<ConnectedCityResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * @generated from field: elude.proto.ConnectedCity connected_city = 2;
   */
  connectedCity?: ConnectedCity;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<ConnectedCityResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.ConnectedCityResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectedCityResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectedCityResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectedCityResponse;

  static equals(a: ConnectedCityResponse | PlainMessage<ConnectedCityResponse> | undefined, b: ConnectedCityResponse | PlainMessage<ConnectedCityResponse> | undefined): boolean;
}

/**
 * GetWeatherByCoordinatesResponse is used for GetWeatherByCoordinates rpc calls. Contains Weather data.
 *
 * @generated from message elude.proto.GetWeatherByCoordinatesResponse
 */
export declare class GetWeatherByCoordinatesResponse extends Message<GetWeatherByCoordinatesResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Weather data from GetWeatherByCoordinates request.
   *
   * @generated from field: elude.proto.Weather weather = 2;
   */
  weather?: Weather;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<GetWeatherByCoordinatesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetWeatherByCoordinatesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWeatherByCoordinatesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWeatherByCoordinatesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWeatherByCoordinatesResponse;

  static equals(a: GetWeatherByCoordinatesResponse | PlainMessage<GetWeatherByCoordinatesResponse> | undefined, b: GetWeatherByCoordinatesResponse | PlainMessage<GetWeatherByCoordinatesResponse> | undefined): boolean;
}

/**
 * RegionResponse is used for Region rpc calls. Contains Regiond data.
 *
 * @generated from message elude.proto.RegionResponse
 */
export declare class RegionResponse extends Message<RegionResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Region data from region requests.
   *
   * @generated from field: elude.proto.Region region = 2;
   */
  region?: Region;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<RegionResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.RegionResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegionResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegionResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegionResponse;

  static equals(a: RegionResponse | PlainMessage<RegionResponse> | undefined, b: RegionResponse | PlainMessage<RegionResponse> | undefined): boolean;
}

/**
 * RegionsResponse is used for Regions rpc calls. Contains List of Regions data.
 *
 * @generated from message elude.proto.RegionsResponse
 */
export declare class RegionsResponse extends Message<RegionsResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of regions data from regions requests.
   *
   * @generated from field: repeated elude.proto.Region regions = 2;
   */
  regions: Region[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<RegionsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.RegionsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegionsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegionsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegionsResponse;

  static equals(a: RegionsResponse | PlainMessage<RegionsResponse> | undefined, b: RegionsResponse | PlainMessage<RegionsResponse> | undefined): boolean;
}

/**
 * LocationsResponse is used for Locations rpc calls. Contains List of Locations data.
 *
 * @generated from message elude.proto.LocationsResponse
 */
export declare class LocationsResponse extends Message<LocationsResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of locations data from locations requests.
   *
   * @generated from field: repeated elude.proto.Location locations = 2;
   */
  locations: Location[];

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * Used to paginate response data.
   *
   * @generated from field: elude.proto.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<LocationsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.LocationsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationsResponse;

  static equals(a: LocationsResponse | PlainMessage<LocationsResponse> | undefined, b: LocationsResponse | PlainMessage<LocationsResponse> | undefined): boolean;
}

/**
 * LocationResponse is used for Location rpc calls. Contains Location data.
 *
 * @generated from message elude.proto.LocationResponse
 */
export declare class LocationResponse extends Message<LocationResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Location data from location requests.
   *
   * @generated from field: elude.proto.Location location = 2;
   */
  location?: Location;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  constructor(data?: PartialMessage<LocationResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.LocationResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationResponse;

  static equals(a: LocationResponse | PlainMessage<LocationResponse> | undefined, b: LocationResponse | PlainMessage<LocationResponse> | undefined): boolean;
}

/**
 * GetLocationsByIdentifiersResponse is used for GetLocationsByIdentifiers rpc call. Contains Location data, List of Cites, Airports, Regions, Countries data.
 *
 * @generated from message elude.proto.GetLocationsByIdentifiersResponse
 */
export declare class GetLocationsByIdentifiersResponse extends Message<GetLocationsByIdentifiersResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Location data from location requests.
   *
   * @generated from field: elude.proto.Location location = 2;
   */
  location?: Location;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 3;
   */
  status?: Status;

  /**
   * List of cities data from GetLocationsByIdentifiers.
   *
   * @generated from field: repeated elude.proto.City cities = 4;
   */
  cities: City[];

  /**
   * List of airports data from GetLocationsByIdentifiers.
   *
   * @generated from field: repeated elude.proto.Airport airports = 5;
   */
  airports: Airport[];

  /**
   * List of regions data from GetLocationsByIdentifiers.
   *
   * @generated from field: repeated elude.proto.Region regions = 6;
   */
  regions: Region[];

  /**
   * List of countries data from GetLocationsByIdentifiers.
   *
   * @generated from field: repeated elude.proto.Country countries = 7;
   */
  countries: Country[];

  constructor(data?: PartialMessage<GetLocationsByIdentifiersResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetLocationsByIdentifiersResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLocationsByIdentifiersResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLocationsByIdentifiersResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLocationsByIdentifiersResponse;

  static equals(a: GetLocationsByIdentifiersResponse | PlainMessage<GetLocationsByIdentifiersResponse> | undefined, b: GetLocationsByIdentifiersResponse | PlainMessage<GetLocationsByIdentifiersResponse> | undefined): boolean;
}

/**
 * GetSearchLocationsResponse is used for Cities rpc calls. Contains List of Cities data.
 *
 * @generated from message elude.proto.GetSearchLocationsResponse
 */
export declare class GetSearchLocationsResponse extends Message<GetSearchLocationsResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of cities data from cities requests.
   *
   * @generated from field: repeated elude.proto.SearchLocation locations = 2;
   */
  locations: SearchLocation[];

  /**
   * List of cities data from cities requests.
   *
   * @generated from field: elude.proto.SearchLocation departure_location = 3;
   */
  departureLocation?: SearchLocation;

  /**
   * @generated from field: repeated elude.proto.ShardConnections shard_connections = 4;
   */
  shardConnections: ShardConnections[];

  /**
   * @generated from field: int32 total_days = 5;
   */
  totalDays: number;

  /**
   * @generated from field: int32 total_travelers = 6;
   */
  totalTravelers: number;

  /**
   * Required: status code.
   *
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 7;
   */
  status?: Status;

  constructor(data?: PartialMessage<GetSearchLocationsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetSearchLocationsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSearchLocationsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSearchLocationsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSearchLocationsResponse;

  static equals(a: GetSearchLocationsResponse | PlainMessage<GetSearchLocationsResponse> | undefined, b: GetSearchLocationsResponse | PlainMessage<GetSearchLocationsResponse> | undefined): boolean;
}

/**
 * GetPreferencesResponse is used for GetPreferences rpc call. Contains list of all preferences in database, list of User preferences
 *
 * @generated from message elude.proto.GetPreferencesResponse
 */
export declare class GetPreferencesResponse extends Message<GetPreferencesResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * List of all preferences data
   *
   * @generated from field: repeated elude.proto.Preference preferences = 2;
   */
  preferences: Preference[];

  /**
   * List of all user preferences data
   *
   * @generated from field: repeated elude.proto.Preference user_preferences = 3;
   */
  userPreferences: Preference[];

  /**
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 4;
   */
  status?: Status;

  constructor(data?: PartialMessage<GetPreferencesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetPreferencesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPreferencesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPreferencesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPreferencesResponse;

  static equals(a: GetPreferencesResponse | PlainMessage<GetPreferencesResponse> | undefined, b: GetPreferencesResponse | PlainMessage<GetPreferencesResponse> | undefined): boolean;
}

/**
 * UpdateUserPreferencesResponse is used for UpdateUserPreferences rpc call.
 *
 * @generated from message elude.proto.UpdateUserPreferencesResponse
 */
export declare class UpdateUserPreferencesResponse extends Message<UpdateUserPreferencesResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 2;
   */
  status?: Status;

  constructor(data?: PartialMessage<UpdateUserPreferencesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.UpdateUserPreferencesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserPreferencesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserPreferencesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserPreferencesResponse;

  static equals(a: UpdateUserPreferencesResponse | PlainMessage<UpdateUserPreferencesResponse> | undefined, b: UpdateUserPreferencesResponse | PlainMessage<UpdateUserPreferencesResponse> | undefined): boolean;
}

/**
 * GetRecommendedCitiesResponse is used for GetRecommendedCities rpc call.
 *
 * @generated from message elude.proto.GetRecommendedCitiesResponse
 */
export declare class GetRecommendedCitiesResponse extends Message<GetRecommendedCitiesResponse> {
  /**
   * Session information.
   *
   * @generated from field: elude.proto.SessionInfo session_info = 1;
   */
  sessionInfo?: SessionInfo;

  /**
   * Status of response.
   *
   * @generated from field: elude.proto.Status status = 2;
   */
  status?: Status;

  /**
   * List of recommended cities data.
   *
   * @generated from field: repeated elude.proto.City cities = 3;
   */
  cities: City[];

  constructor(data?: PartialMessage<GetRecommendedCitiesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.GetRecommendedCitiesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRecommendedCitiesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRecommendedCitiesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRecommendedCitiesResponse;

  static equals(a: GetRecommendedCitiesResponse | PlainMessage<GetRecommendedCitiesResponse> | undefined, b: GetRecommendedCitiesResponse | PlainMessage<GetRecommendedCitiesResponse> | undefined): boolean;
}

