// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/location/location_request.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3} from "@bufbuild/protobuf";
import {Auth} from "../commons/auth_pb.js";
import {SessionInfo} from "../commons/session_info_pb.js";
import {Options} from "../commons/options_pb.js";
import {Pagination} from "../commons/pagination_pb.js";
import {FilterOptions} from "../commons/filter_options_pb.js";
import {Airport, City} from "../models/city_pb.js";
import {Coordinates} from "../commons/coordinates_pb.js";
import {UpdateAirlineWithImageData, UpdateCityWithImageData} from "../commons/image_data_pb.js";
import {Country} from "../models/country_pb.js";
import {Airline} from "../models/airline_pb.js";
import {LocationIdentifier} from "../commons/flow_common_pb.js";
import {FeaturedLocation} from "../models/featured_location_pb.js";
import {ConnectedCity} from "../models/connected_city_pb.js";
import {Region} from "../models/region_pb.js";
import {SearchTypeEnum} from "../commons/enum_pb.js";
import {ItineraryRequest} from "../air_hotel_reservation_search/request_pb.js";

/**
 * GetCityRequest is used for GetCity rpc calls. Used to fetch a single city by ID from DB.
 *
 * @generated from message elude.proto.GetCityRequest
 */
export const GetCityRequest = proto3.makeMessageType(
  "elude.proto.GetCityRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetCitiesRequest is used for GetCities rpc calls. Used to fetch all cities from DB.
 *
 * @generated from message elude.proto.GetCitiesRequest
 */
export const GetCitiesRequest = proto3.makeMessageType(
  "elude.proto.GetCitiesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "filter_options", kind: "message", T: FilterOptions },
  ],
);

/**
 * CreateCityRequest is used for CreateCity rpc calls. Used to add a new city to DB.
 *
 * @generated from message elude.proto.CreateCityRequest
 */
export const CreateCityRequest = proto3.makeMessageType(
  "elude.proto.CreateCityRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "city", kind: "message", T: City },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateCityRequest is used for UpdateCity rpc calls. Used to update an existing city in DB.
 *
 * @generated from message elude.proto.UpdateCityRequest
 */
export const UpdateCityRequest = proto3.makeMessageType(
  "elude.proto.UpdateCityRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "city", kind: "message", T: City },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeleteCityRequest is used for DeleteCity rpc calls. Used to soft delete an existing city in DB.
 *
 * @generated from message elude.proto.DeleteCityRequest
 */
export const DeleteCityRequest = proto3.makeMessageType(
  "elude.proto.DeleteCityRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetCityByIPRequest is not used. Superseded by GetCityByCoordinatesRequest.
 *
 * @generated from message elude.proto.GetCityByIPRequest
 * @deprecated
 */
export const GetCityByIPRequest = proto3.makeMessageType(
  "elude.proto.GetCityByIPRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetCityByCoordinatesRequest is used in GetNearestConnectedCityByCoordinates rpc calls.
 * Clients should always use this to determine the closest connected city.
 *
 * @generated from message elude.proto.GetCityByCoordinatesRequest
 */
export const GetCityByCoordinatesRequest = proto3.makeMessageType(
  "elude.proto.GetCityByCoordinatesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "coordinates", kind: "message", T: Coordinates },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetMultipleCitiesRequest is used for GetMultipleCities rpc calls. Clients should use this to fetch multiple cities by IATA codes
 *
 * @generated from message elude.proto.GetMultipleCitiesRequest
 */
export const GetMultipleCitiesRequest = proto3.makeMessageType(
  "elude.proto.GetMultipleCitiesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "iata_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateCityWithImageRequest is used in UpdateCityWithImage rpc calls. Clients should use this when they want to add a new image to a city.
 *
 * @generated from message elude.proto.UpdateCityWithImageRequest
 */
export const UpdateCityWithImageRequest = proto3.makeMessageType(
  "elude.proto.UpdateCityWithImageRequest",
  () => [
    { no: 1, name: "updateReq", kind: "message", T: UpdateCityWithImageData, oneof: "data" },
    { no: 2, name: "chunk_data", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "data" },
  ],
);

/**
 * UpdateCityWithImageUnaryRequest is used in UpdateCityWithImageUnary rpc calls. Needed for web clients until grpc-web starts supporting
 * client-side streaming.
 *
 * @generated from message elude.proto.UpdateCityWithImageUnaryRequest
 */
export const UpdateCityWithImageUnaryRequest = proto3.makeMessageType(
  "elude.proto.UpdateCityWithImageUnaryRequest",
  () => [
    { no: 1, name: "updateReq", kind: "message", T: UpdateCityWithImageData },
    { no: 2, name: "image", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * GetCountryRequest is used for GetCountry rpc calls. Used to fetch a single country by ID from DB.
 *
 * @generated from message elude.proto.GetCountryRequest
 */
export const GetCountryRequest = proto3.makeMessageType(
  "elude.proto.GetCountryRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetCountriesRequest is used for GetCountries rpc calls. Used to fetch all countries from DB.
 *
 * @generated from message elude.proto.GetCountriesRequest
 */
export const GetCountriesRequest = proto3.makeMessageType(
  "elude.proto.GetCountriesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "filter_options", kind: "message", T: FilterOptions },
  ],
);

/**
 * CreateCountryRequest is used for CreateCountry rpc calls. Used to add a new country to DB.
 *
 * @generated from message elude.proto.CreateCountryRequest
 */
export const CreateCountryRequest = proto3.makeMessageType(
  "elude.proto.CreateCountryRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "country", kind: "message", T: Country },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateCountryRequest is used for UpdateCountry rpc calls. Used to update an existing country in DB.
 *
 * @generated from message elude.proto.UpdateCountryRequest
 */
export const UpdateCountryRequest = proto3.makeMessageType(
  "elude.proto.UpdateCountryRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "country", kind: "message", T: Country },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeleteCountryRequest is used for DeleteCountry rpc calls. Used to soft delete an existing country in DB.
 *
 * @generated from message elude.proto.DeleteCountryRequest
 */
export const DeleteCountryRequest = proto3.makeMessageType(
  "elude.proto.DeleteCountryRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetMultipleCountriesRequest is used for GetMultipleCountries rpc calls. Clients should use this to fetch multiple countries by ISO codes
 *
 * @generated from message elude.proto.GetMultipleCountriesRequest
 */
export const GetMultipleCountriesRequest = proto3.makeMessageType(
  "elude.proto.GetMultipleCountriesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "iso_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * @generated from message elude.proto.GetAverageCostRequest
 */
export const GetAverageCostRequest = proto3.makeMessageType(
  "elude.proto.GetAverageCostRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
  ],
);

/**
 * @generated from message elude.proto.GetDestinationCitiesRequest
 */
export const GetDestinationCitiesRequest = proto3.makeMessageType(
  "elude.proto.GetDestinationCitiesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
  ],
);

/**
 * @generated from message elude.proto.GetTopDestinationsRequest
 */
export const GetTopDestinationsRequest = proto3.makeMessageType(
  "elude.proto.GetTopDestinationsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
  ],
);

/**
 * @generated from message elude.proto.GetAffordableDestinationsRequest
 */
export const GetAffordableDestinationsRequest = proto3.makeMessageType(
  "elude.proto.GetAffordableDestinationsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetAirportRequest is used for GetAirport rpc calls. Used to fetch a single airport by ID from DB.
 *
 * @generated from message elude.proto.GetAirportRequest
 */
export const GetAirportRequest = proto3.makeMessageType(
  "elude.proto.GetAirportRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetAirportsRequest is used for GetAirports rpc calls. Used to fetch all airports from DB.
 *
 * @generated from message elude.proto.GetAirportsRequest
 */
export const GetAirportsRequest = proto3.makeMessageType(
  "elude.proto.GetAirportsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "filter_options", kind: "message", T: FilterOptions },
  ],
);

/**
 * CreateAirportRequest is used for CreateAirport rpc calls. Used to add a new airport to DB.
 *
 * @generated from message elude.proto.CreateAirportRequest
 */
export const CreateAirportRequest = proto3.makeMessageType(
  "elude.proto.CreateAirportRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "airport", kind: "message", T: Airport },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateAirportRequest is used for UpdateAirport rpc calls. Used to update an existing airport in DB.
 *
 * @generated from message elude.proto.UpdateAirportRequest
 */
export const UpdateAirportRequest = proto3.makeMessageType(
  "elude.proto.UpdateAirportRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "airport", kind: "message", T: Airport },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeleteAirportRequest is used for DeleteAirport rpc calls. Used to soft delete an existing airport in DB.
 *
 * @generated from message elude.proto.DeleteAirportRequest
 */
export const DeleteAirportRequest = proto3.makeMessageType(
  "elude.proto.DeleteAirportRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetMultipleAirportsRequest is used for GetMultipleAirports rpc calls. Clients should use this to fetch multiple airports by IATA codes
 *
 * @generated from message elude.proto.GetMultipleAirportsRequest
 */
export const GetMultipleAirportsRequest = proto3.makeMessageType(
  "elude.proto.GetMultipleAirportsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "iata_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetAirlineRequest is used for GetAirline rpc calls. Used to fetch a single airline by ID from DB.
 *
 * @generated from message elude.proto.GetAirlineRequest
 */
export const GetAirlineRequest = proto3.makeMessageType(
  "elude.proto.GetAirlineRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetAirlinesRequest is used for GetAirlines rpc calls. Used to fetch all airlines from DB.
 *
 * @generated from message elude.proto.GetAirlinesRequest
 */
export const GetAirlinesRequest = proto3.makeMessageType(
  "elude.proto.GetAirlinesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "filter_options", kind: "message", T: FilterOptions },
  ],
);

/**
 * CreateAirlineRequest is used for CreateAirline rpc calls. Used to add a new airline to DB.
 *
 * @generated from message elude.proto.CreateAirlineRequest
 */
export const CreateAirlineRequest = proto3.makeMessageType(
  "elude.proto.CreateAirlineRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "airline", kind: "message", T: Airline },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateAirlineRequest is used for UpdateAirline rpc calls. Used to update an existing airline in DB.
 *
 * @generated from message elude.proto.UpdateAirlineRequest
 */
export const UpdateAirlineRequest = proto3.makeMessageType(
  "elude.proto.UpdateAirlineRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "airline", kind: "message", T: Airline },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeleteAirlineRequest is used for DeleteAirline rpc calls. Used to soft delete an existing airline in DB.
 *
 * @generated from message elude.proto.DeleteAirlineRequest
 */
export const DeleteAirlineRequest = proto3.makeMessageType(
  "elude.proto.DeleteAirlineRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetMultipleAirlinesRequest is used for GetMultipleAirlines rpc calls. Clients should use this to fetch multiple airlines by IATA codes
 *
 * @generated from message elude.proto.GetMultipleAirlinesRequest
 */
export const GetMultipleAirlinesRequest = proto3.makeMessageType(
  "elude.proto.GetMultipleAirlinesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "iata_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateAirlineWithImageRequest is used in UpdateAirlineWithImage rpc calls.  Clients should use this when they want to add a new image to an airline.
 *
 * @generated from message elude.proto.UpdateAirlineWithImageRequest
 */
export const UpdateAirlineWithImageRequest = proto3.makeMessageType(
  "elude.proto.UpdateAirlineWithImageRequest",
  () => [
    { no: 1, name: "updateReq", kind: "message", T: UpdateAirlineWithImageData, oneof: "data" },
    { no: 2, name: "chunk_data", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "data" },
  ],
);

/**
 * UpdateAirlineWithImageUnaryRequest is used in UpdateAirlineWithImageUnary rpc calls. Needed for web clients until grpc-web starts supporting
 * client-side streaming.
 *
 * @generated from message elude.proto.UpdateAirlineWithImageUnaryRequest
 */
export const UpdateAirlineWithImageUnaryRequest = proto3.makeMessageType(
  "elude.proto.UpdateAirlineWithImageUnaryRequest",
  () => [
    { no: 1, name: "updateReq", kind: "message", T: UpdateAirlineWithImageData },
    { no: 2, name: "image", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * GetFeaturedLocationsByLocationRequest is used in GetFeaturedLocationsByLocation rpc calls. Clients should use this when they want to generate
 * featured locations based on a location ID.
 *
 * @generated from message elude.proto.GetFeaturedLocationsByLocationRequest
 */
export const GetFeaturedLocationsByLocationRequest = proto3.makeMessageType(
  "elude.proto.GetFeaturedLocationsByLocationRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "location", kind: "message", T: LocationIdentifier },
    { no: 4, name: "options", kind: "message", T: Options },
    { no: 5, name: "override_connected_city", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * GetFeaturedLocationsByCoordinatesRequest is used in GetFeaturedLocationsByCoordinates rpc calls. Clients should use this when they want to generate
 * featured locations based on coordinates.
 *
 * @generated from message elude.proto.GetFeaturedLocationsByCoordinatesRequest
 */
export const GetFeaturedLocationsByCoordinatesRequest = proto3.makeMessageType(
  "elude.proto.GetFeaturedLocationsByCoordinatesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "coordinates", kind: "message", T: Coordinates },
    { no: 4, name: "options", kind: "message", T: Options },
    { no: 5, name: "override_connected_city", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * GetFeaturedLocationRequest currently not used.
 *
 * @generated from message elude.proto.GetFeaturedLocationRequest
 * @deprecated
 */
export const GetFeaturedLocationRequest = proto3.makeMessageType(
  "elude.proto.GetFeaturedLocationRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetFeaturedLocationsRequest currently not used.
 *
 * @generated from message elude.proto.GetFeaturedLocationsRequest
 * @deprecated
 */
export const GetFeaturedLocationsRequest = proto3.makeMessageType(
  "elude.proto.GetFeaturedLocationsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * CreateFeaturedLocationRequest currently not used.
 *
 * @generated from message elude.proto.CreateFeaturedLocationRequest
 * @deprecated
 */
export const CreateFeaturedLocationRequest = proto3.makeMessageType(
  "elude.proto.CreateFeaturedLocationRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "featured_location", kind: "message", T: FeaturedLocation },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateFeaturedLocationRequest currently not used.
 *
 * @generated from message elude.proto.UpdateFeaturedLocationRequest
 * @deprecated
 */
export const UpdateFeaturedLocationRequest = proto3.makeMessageType(
  "elude.proto.UpdateFeaturedLocationRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "featured_location", kind: "message", T: FeaturedLocation },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeleteFeaturedLocationRequest currently not used.
 *
 * @generated from message elude.proto.DeleteFeaturedLocationRequest
 * @deprecated
 */
export const DeleteFeaturedLocationRequest = proto3.makeMessageType(
  "elude.proto.DeleteFeaturedLocationRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetConnectedCityRequest currently not used.
 *
 * @generated from message elude.proto.GetConnectedCityRequest
 * @deprecated
 */
export const GetConnectedCityRequest = proto3.makeMessageType(
  "elude.proto.GetConnectedCityRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetConnectedCitiesRequest currently not used.
 *
 * @generated from message elude.proto.GetConnectedCitiesRequest
 * @deprecated
 */
export const GetConnectedCitiesRequest = proto3.makeMessageType(
  "elude.proto.GetConnectedCitiesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * CreateConnectedCityRequest currently not used.
 *
 * @generated from message elude.proto.CreateConnectedCityRequest
 * @deprecated
 */
export const CreateConnectedCityRequest = proto3.makeMessageType(
  "elude.proto.CreateConnectedCityRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "connected_city", kind: "message", T: ConnectedCity },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateConnectedCityRequest currently not used.
 *
 * @generated from message elude.proto.UpdateConnectedCityRequest
 * @deprecated
 */
export const UpdateConnectedCityRequest = proto3.makeMessageType(
  "elude.proto.UpdateConnectedCityRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "connected_city", kind: "message", T: ConnectedCity },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeleteConnectedCityRequest currently not used.
 *
 * @generated from message elude.proto.DeleteConnectedCityRequest
 * @deprecated
 */
export const DeleteConnectedCityRequest = proto3.makeMessageType(
  "elude.proto.DeleteConnectedCityRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetConnectedCitiesForDepartureCityRequest currently not used.
 *
 * @generated from message elude.proto.GetConnectedCitiesForDepartureCityRequest
 * @deprecated
 */
export const GetConnectedCitiesForDepartureCityRequest = proto3.makeMessageType(
  "elude.proto.GetConnectedCitiesForDepartureCityRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
    { no: 5, name: "departure_city_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetWeatherByCoordinatesRequest is used in GetWeatherByCoordinates rpc calls. Clients should use this when they want to fetch only
 * current weather for given coordinates.
 *
 * @generated from message elude.proto.GetWeatherByCoordinatesRequest
 */
export const GetWeatherByCoordinatesRequest = proto3.makeMessageType(
  "elude.proto.GetWeatherByCoordinatesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "coordinates", kind: "message", T: Coordinates },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetRegionRequest is used for GetRegion rpc calls. Used to fetch a single region by ID from DB.
 *
 * @generated from message elude.proto.GetRegionRequest
 */
export const GetRegionRequest = proto3.makeMessageType(
  "elude.proto.GetRegionRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetRegionsRequest is used for GetRegions rpc calls. Used to fetch all regions from DB.
 *
 * @generated from message elude.proto.GetRegionsRequest
 */
export const GetRegionsRequest = proto3.makeMessageType(
  "elude.proto.GetRegionsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "filter_options", kind: "message", T: FilterOptions },
  ],
);

/**
 * CreateRegionRequest is used for CreateRegion rpc calls. Used to add a new region to DB.
 *
 * @generated from message elude.proto.CreateRegionRequest
 */
export const CreateRegionRequest = proto3.makeMessageType(
  "elude.proto.CreateRegionRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "region", kind: "message", T: Region },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateRegionRequest is used for UpdateRegion rpc calls. Used to update an existing region in DB.
 *
 * @generated from message elude.proto.UpdateRegionRequest
 */
export const UpdateRegionRequest = proto3.makeMessageType(
  "elude.proto.UpdateRegionRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "region", kind: "message", T: Region },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * DeleteRegionRequest is used for DeleteRegion rpc calls. Used to soft delete an existing region in DB.
 *
 * @generated from message elude.proto.DeleteRegionRequest
 */
export const DeleteRegionRequest = proto3.makeMessageType(
  "elude.proto.DeleteRegionRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetLocationsRequest is used for GetLocations rpc calls. Used to fetch locations based on the request.
 *
 * @generated from message elude.proto.GetLocationsRequest
 */
export const GetLocationsRequest = proto3.makeMessageType(
  "elude.proto.GetLocationsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "search_type", kind: "enum", T: proto3.getEnumType(SearchTypeEnum) },
    { no: 6, name: "pagination", kind: "message", T: Pagination },
  ],
);

/**
 * GetLocationByCoordinatesRequest is used in GetNearestLocationByCoordinates rpc calls.
 * Clients should always use this to determine the closest departure location.
 *
 * @generated from message elude.proto.GetLocationByCoordinatesRequest
 */
export const GetLocationByCoordinatesRequest = proto3.makeMessageType(
  "elude.proto.GetLocationByCoordinatesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "coordinates", kind: "message", T: Coordinates },
    { no: 4, name: "options", kind: "message", T: Options },
  ],
);

/**
 * GetLocationRequest is currently used only for GetNearestLocation rpc calls. Used to fetch the closest departure location
 * based on the city ID provided.
 *
 * @generated from message elude.proto.GetLocationRequest
 */
export const GetLocationRequest = proto3.makeMessageType(
  "elude.proto.GetLocationRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * GetLocationsByIdentifiersRequest is used for GetLocationsByIdentifiers rpc calls. Used to fetch all of the actual database
 * entities based on the location ids and location types
 *
 * @generated from message elude.proto.GetLocationsByIdentifiersRequest
 */
export const GetLocationsByIdentifiersRequest = proto3.makeMessageType(
  "elude.proto.GetLocationsByIdentifiersRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "location_identifiers", kind: "message", T: LocationIdentifier, repeated: true },
  ],
);

/**
 * GetSearchLocationsRequest is used for GetSearchLocations rpc calls. Used to fetch locations for search.
 *
 * @generated from message elude.proto.GetSearchLocationsRequest
 */
export const GetSearchLocationsRequest = proto3.makeMessageType(
  "elude.proto.GetSearchLocationsRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "request", kind: "message", T: ItineraryRequest },
    { no: 5, name: "cache_city_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 6, name: "cache_location_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ],
);

/**
 * GetPreferencesRequest is used for GetPreferences rpc calls. Used to fetch all preferences in database
 *
 * @generated from message elude.proto.GetPreferencesRequest
 */
export const GetPreferencesRequest = proto3.makeMessageType(
  "elude.proto.GetPreferencesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
  ],
);

/**
 * UpdateUserPreferencesRequest is used for UpdateUserPreferences rpc calls. Used to update user preferences
 *
 * @generated from message elude.proto.UpdateUserPreferencesRequest
 */
export const UpdateUserPreferencesRequest = proto3.makeMessageType(
  "elude.proto.UpdateUserPreferencesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
    { no: 4, name: "preference_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ],
);

/**
 * GetRecommendedCitiesRequest is used for GetRecommendedCities rpc calls. Used to get recommended cities by user preferences.
 *
 * @generated from message elude.proto.GetRecommendedCitiesRequest
 */
export const GetRecommendedCitiesRequest = proto3.makeMessageType(
  "elude.proto.GetRecommendedCitiesRequest",
  () => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "session_info", kind: "message", T: SessionInfo },
    { no: 3, name: "options", kind: "message", T: Options },
  ],
);

