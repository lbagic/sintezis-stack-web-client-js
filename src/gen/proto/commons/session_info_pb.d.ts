// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/commons/session_info.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {Timestamp} from "./timestamp_pb.js";

/**
 * Used in all requests and responses, contains information about the current session.
 *
 * @generated from message elude.proto.SessionInfo
 */
export declare class SessionInfo extends Message<SessionInfo> {
  /**
   * Internal reservation ID (redis elude backend) TODO errors if session ID is expired.
   *
   * @generated from field: string session_id = 1;
   */
  sessionId: string;

  /**
   * Expiration timestamp for session id.
   *
   * @generated from field: elude.proto.Timestamp expiration_ts = 2;
   */
  expirationTs?: Timestamp;

  constructor(data?: PartialMessage<SessionInfo>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.SessionInfo";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SessionInfo;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SessionInfo;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SessionInfo;

  static equals(a: SessionInfo | PlainMessage<SessionInfo> | undefined, b: SessionInfo | PlainMessage<SessionInfo> | undefined): boolean;
}

