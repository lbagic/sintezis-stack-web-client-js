// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/commons/auth.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * Auth is a message used in every request. Typically Auth is not set by clients but is populated internally
 * when rpc calls are made.
 *
 * @generated from message elude.proto.Auth
 */
export declare class Auth extends Message<Auth> {
  /**
   * Used for auth socials.
   *
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * Used for declaring if authorize is valid.
   *
   * @generated from field: bool is_valid = 2;
   */
  isValid: boolean;

  /**
   * User id for authorize.
   *
   * @generated from field: int32 user_id = 3;
   */
  userId: number;

  /**
   * User role for authorize.
   *
   * @generated from field: string role = 4;
   */
  role: string;

  /**
   * User email for authorize.
   *
   * @generated from field: string email = 5;
   */
  email: string;

  constructor(data?: PartialMessage<Auth>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.Auth";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Auth;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Auth;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Auth;

  static equals(a: Auth | PlainMessage<Auth> | undefined, b: Auth | PlainMessage<Auth> | undefined): boolean;
}

