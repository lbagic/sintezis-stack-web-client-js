// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/commons/status.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3} from "@bufbuild/protobuf";

/**
 * StatusCode is used in all service to service communication. We have attempted to use the core gRPC status
 * codes and names for consistency.
 * See this for inspiration: https://grpc.github.io/grpc/core/md_doc_statuscodes.html
 *
 * @generated from enum elude.proto.StatusCode
 */
export const StatusCode = proto3.makeEnum(
  "elude.proto.StatusCode",
  [
    {no: 0, name: "OK"},
    {no: 1, name: "CANCELLED"},
    {no: 2, name: "UNKNOWN"},
    {no: 3, name: "INVALID_ARGUMENT"},
    {no: 4, name: "DEADLINE_EXCEEDED"},
    {no: 5, name: "NOT_FOUND"},
    {no: 6, name: "ALREADY_EXISTS"},
    {no: 7, name: "PERMISSION_DENIED"},
    {no: 8, name: "RESOURCE_EXHAUSTED"},
    {no: 9, name: "FAILED_PRECONDITION"},
    {no: 10, name: "ABORTED"},
    {no: 11, name: "OUT_OF_RANGE"},
    {no: 12, name: "UNIMPLEMENTED"},
    {no: 13, name: "INTERNAL"},
    {no: 14, name: "UNAVAILABLE"},
    {no: 15, name: "DATA_LOSS"},
    {no: 16, name: "UNAUTHENTICATED"},
  ],
);

/**
 * Status wraps status code and message
 *
 * @generated from message elude.proto.Status
 */
export const Status = proto3.makeMessageType(
  "elude.proto.Status",
  () => [
    { no: 1, name: "status_code", kind: "enum", T: proto3.getEnumType(StatusCode) },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

