// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/commons/timestamp.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * Timestamp is a simple util implementation that allows either nanos (for compat with golang) or seconds.
 * Gets time from unix time.
 *
 * @generated from message elude.proto.Timestamp
 */
export declare class Timestamp extends Message<Timestamp> {
  /**
   * Number of seconds in a timestamp.
   *
   * @generated from field: int64 seconds = 1;
   */
  seconds: bigint;

  /**
   * Number of nano seconds in a timestamp.
   *
   * @generated from field: int32 nanos = 2;
   */
  nanos: number;

  constructor(data?: PartialMessage<Timestamp>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.Timestamp";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Timestamp;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Timestamp;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Timestamp;

  static equals(a: Timestamp | PlainMessage<Timestamp> | undefined, b: Timestamp | PlainMessage<Timestamp> | undefined): boolean;
}

