// @generated by protoc-gen-es v0.1.1 with parameter "target=js+dts"
// @generated from file proto/commons/filter_options.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * Filter is a key value pair that's used in to filter certain resources
 *
 * @generated from message elude.proto.Filter
 */
export declare class Filter extends Message<Filter> {
  /**
   * When setting key use pascal case, e.g. for iata_code use IataCode
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * Filter value
   *
   * @generated from field: string value = 2;
   */
  value: string;

  constructor(data?: PartialMessage<Filter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.Filter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Filter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Filter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Filter;

  static equals(a: Filter | PlainMessage<Filter> | undefined, b: Filter | PlainMessage<Filter> | undefined): boolean;
}

/**
 * FilterOptions is used in GetAll requests for resources that might need to be filtered
 *
 * @generated from message elude.proto.FilterOptions
 */
export declare class FilterOptions extends Message<FilterOptions> {
  /**
   * List of filter pairs
   *
   * @generated from field: repeated elude.proto.Filter filters = 1;
   */
  filters: Filter[];

  constructor(data?: PartialMessage<FilterOptions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "elude.proto.FilterOptions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FilterOptions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FilterOptions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FilterOptions;

  static equals(a: FilterOptions | PlainMessage<FilterOptions> | undefined, b: FilterOptions | PlainMessage<FilterOptions> | undefined): boolean;
}

