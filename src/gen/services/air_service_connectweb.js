// @generated by protoc-gen-connect-web v0.2.1 with parameter "target=js+dts"
// @generated from file services/air_service.proto (package elude.proto, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {CancelRequest, GetAbandonTripSearchRequest, GetPriceRequest, ItineraryRequest, ReservationRequest, RetrieveRequest, RevalidateItineraryRequest, SetSearchCacheRequest, TicketRequest, VoidTicketRequest} from "../proto/air_hotel_reservation_search/request_pb.js";
import {CancelResponse, GetAbandonTripSearchResponse, GetPriceResponse, ItineraryResponse, ReservationResponse, RetrieveResponse, RevalidateItineraryResponse, SetSearchCacheResponse, TicketResponse, VoidTicketResponse} from "../proto/air_hotel_reservation_search/response_pb.js";
import {MethodKind} from "@bufbuild/protobuf";

/**
 * It will send a request to multiple GDS provider and then stream back responses
 *
 * @generated from service elude.proto.AirController
 */
export const AirController = {
  typeName: "elude.proto.AirController",
  methods: {
    /**
     * @generated from rpc elude.proto.AirController.RunAirSearch
     */
    runAirSearch: {
      name: "RunAirSearch",
      I: ItineraryRequest,
      O: ItineraryResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc elude.proto.AirController.CreateReservation
     */
    createReservation: {
      name: "CreateReservation",
      I: ReservationRequest,
      O: ReservationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc elude.proto.AirController.StreamCreateReservation
     */
    streamCreateReservation: {
      name: "StreamCreateReservation",
      I: ReservationRequest,
      O: ReservationResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc elude.proto.AirController.CancelReservation
     */
    cancelReservation: {
      name: "CancelReservation",
      I: CancelRequest,
      O: CancelResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc elude.proto.AirController.TicketFlight
     */
    ticketFlight: {
      name: "TicketFlight",
      I: TicketRequest,
      O: TicketResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc elude.proto.AirController.VoidTicket
     */
    voidTicket: {
      name: "VoidTicket",
      I: VoidTicketRequest,
      O: VoidTicketResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc elude.proto.AirController.GetPrice
     */
    getPrice: {
      name: "GetPrice",
      I: GetPriceRequest,
      O: GetPriceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc elude.proto.AirController.RetrieveReservation
     */
    retrieveReservation: {
      name: "RetrieveReservation",
      I: RetrieveRequest,
      O: RetrieveResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc elude.proto.AirController.GetAbandonTripSearch
     */
    getAbandonTripSearch: {
      name: "GetAbandonTripSearch",
      I: GetAbandonTripSearchRequest,
      O: GetAbandonTripSearchResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc elude.proto.AirController.RevalidateItinerary
     */
    revalidateItinerary: {
      name: "RevalidateItinerary",
      I: RevalidateItineraryRequest,
      O: RevalidateItineraryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc elude.proto.AirController.SetSearchCache
     */
    setSearchCache: {
      name: "SetSearchCache",
      I: SetSearchCacheRequest,
      O: SetSearchCacheResponse,
      kind: MethodKind.Unary,
    },
  }
};

/**
 * Generic server that can work with all of the adapter
 *
 * @generated from service elude.proto.AirAdapter
 */
export const AirAdapter = {
  typeName: "elude.proto.AirAdapter",
  methods: {
    /**
     * @generated from rpc elude.proto.AirAdapter.GetFlightOption
     */
    getFlightOption: {
      name: "GetFlightOption",
      I: ItineraryRequest,
      O: ItineraryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc elude.proto.AirAdapter.CreateReservation
     */
    createReservation: {
      name: "CreateReservation",
      I: ReservationRequest,
      O: ReservationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc elude.proto.AirAdapter.CancelReservation
     */
    cancelReservation: {
      name: "CancelReservation",
      I: CancelRequest,
      O: CancelResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc elude.proto.AirAdapter.TicketFlight
     */
    ticketFlight: {
      name: "TicketFlight",
      I: TicketRequest,
      O: TicketResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc elude.proto.AirAdapter.VoidTicket
     */
    voidTicket: {
      name: "VoidTicket",
      I: VoidTicketRequest,
      O: VoidTicketResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc elude.proto.AirAdapter.GetPrice
     */
    getPrice: {
      name: "GetPrice",
      I: GetPriceRequest,
      O: GetPriceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc elude.proto.AirAdapter.RetrieveReservation
     */
    retrieveReservation: {
      name: "RetrieveReservation",
      I: RetrieveRequest,
      O: RetrieveResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc elude.proto.AirAdapter.GetAbandonTripSearch
     */
    getAbandonTripSearch: {
      name: "GetAbandonTripSearch",
      I: GetAbandonTripSearchRequest,
      O: GetAbandonTripSearchResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc elude.proto.AirAdapter.RevalidateItinerary
     */
    revalidateItinerary: {
      name: "RevalidateItinerary",
      I: RevalidateItineraryRequest,
      O: RevalidateItineraryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc elude.proto.AirAdapter.SetSearchCache
     */
    setSearchCache: {
      name: "SetSearchCache",
      I: SetSearchCacheRequest,
      O: SetSearchCacheResponse,
      kind: MethodKind.Unary,
    },
  }
};

