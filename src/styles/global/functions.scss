@function generate-color-palette($palette, $variants) {
  $output: ();
  @each $name, $value in $palette {
    $output: map-merge(
      $output,
      (
        "#{$name}": $value,
      )
    );
    @each $variant, $map in $variants {
      $alpha: map-get($map, "alpha") or 0%;
      $output: map-merge(
        $output,
        (
          "#{$name}-#{$variant}":
            adjust-color(
              $value,
              $lightness: map-get($map, "lightness") or 0%,
              $saturation: map-get($map, "saturation") or 0%,
              $alpha: map-get($map, "alpha") or 0%
            ),
        )
      );
    }
  }
  @return $output;
}

@mixin generate-css-variables($map, $parent-key: "") {
  @each $key, $value in $map {
    $current-key: "";
    @if $parent-key == "" {
      $current-key: $key;
    } @else {
      $current-key: #{$parent-key}-#{$key};
    }
    @if type-of($value) == "map" {
      @include generate-css-variables($value, $current-key);
    } @else {
      --#{$prefix}-#{$current-key}: #{$value};
    }
  }
}

