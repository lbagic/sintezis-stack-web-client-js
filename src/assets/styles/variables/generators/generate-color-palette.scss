@function generate-color-palette($palette, $variants) {
  $output: ();
  @each $base-name, $base-value in $palette {
    $color-map: (
      "base": $base-value,
      "contrast": color-contrast($base-value),
    );
    @each $variant-name, $map in $variants {
      // $variant-value: "";
      // @if str-index($variant-name, "opaque") {
      //   $variant-value: adjust-color(
      //     $base-value,
      //     $lightness: map-get($map, "lightness") or 0%,
      //     $saturation: map-get($map, "saturation") or 0%,
      //     $alpha: map-get($map, "alpha") or 0%
      //   );
      // } @else {
      //   $variant-value: scale-color(
      //     $base-value,
      //     $lightness: map-get($map, "lightness") or 0%,
      //     $saturation: map-get($map, "saturation") or 0%,
      //     $alpha: map-get($map, "alpha") or 0%
      //   );
      // }
      $variant-value: scale-color(
        $color: $base-value,
        $lightness: map-get($map, "lightness") or 0%,
        $saturation: map-get($map, "saturation") or 0%,
        $alpha: map-get($map, "alpha") or 0%,
      );
      $color-map: map-merge(
        $color-map,
        (
          "#{$variant-name}": $variant-value,
          "#{$variant-name}-contrast": color-contrast($variant-value),
        )
      );
    }
    $output: map-merge(
      $output,
      (
        "#{$base-name}": $color-map,
      )
    );
  }
  @return $output;
}
