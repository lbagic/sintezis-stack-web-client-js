syntax = "proto3";

package bunkerprice.proto;

option go_package = "api-service-go/gen;gen";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";
import "pagination.proto";
import "filter.proto";
import "coordinates.proto";
import "weather.proto";

message BunkerPrice {
  uint32 ID = 1;
  string port = 2;
  float port_display_order = 3;
  bool isPostedPrice = 4;
  bool isHolidayInPort = 5;
  string country = 6;
  string region = 7;
  float lat = 8;
  float lng = 9;
  string port_code = 10;
  string time_zone_name = 11;
  string time_zone_offset = 12;
  string last_updated_onUTC = 13;
  float price_at_last_update = 14;
  string grade = 15;
  float brent_movement_since_last_update = 16;
  float brent_at_last_update = 17;
  float current_price = 18;
  float average_over7_days = 19;
  bool is_calculated = 20;
  float total_sources = 21;
  string fuel_availability = 22;
  string portID = 23;
  string priceID = 24;
  float net_change = 25;
  bool is_higher_than_last = 26;
  uint32 bunker_price_statusID = 27;
}

message GroupedBunkerPrice {
  string port = 1;
  repeated BunkerPrice bunker_prices = 2;
}

message BunkerPrices {
  repeated BunkerPrice bunker_prices = 1;
  pagination.proto.Pagination pagination = 2;
}

message GetBunkerPrice {
  int32 ID = 1;
}

message GetBunkerPrices {
  pagination.proto.Pagination pagination = 1 [(validate.rules).message.required = true];
  filter.proto.FilterOptions filter_options = 2;
}

message DeleteBunkerPrice {
  int32 ID = 1;
}

message GetActiveBunkerPrices {
  pagination.proto.Pagination pagination = 1 [(validate.rules).message.required = true];
  filter.proto.FilterOptions filter_options = 2;
}

message GroupedBunkerPrices {
  repeated GroupedBunkerPrice ports = 1;
  pagination.proto.Pagination pagination = 2;
}

service BunkerPriceService {
  rpc Add(BunkerPrice) returns (BunkerPrice) {
    option (google.api.http) = {
      post: "/api/v1/bunker_prices"
      body: "*"
    };
  }
  rpc Edit(BunkerPrice) returns (BunkerPrice) {
    option (google.api.http) = {
      put: "/api/v1/bunker_prices/{ID}"
      body: "*"
    };
  }
  rpc Get(GetBunkerPrice) returns (BunkerPrice) {
    option (google.api.http) = {
      get: "/api/v1/bunker_prices/{ID}"
    };
  }
  rpc GetAll(GetBunkerPrices) returns (BunkerPrices) {
    option (google.api.http) = {
      get: "/api/v1/bunker_prices"
    };
  }
  rpc Delete(DeleteBunkerPrice) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/bunker_prices/{ID}"
    };
  }
  rpc GetAllActivePrices(GetActiveBunkerPrices) returns (GroupedBunkerPrices) {
    option (google.api.http) = {
      get: "/api/v1/active_bunker_prices"
    };
  }
  rpc GetWeatherByCoordinates(coordinates.proto.Coordinates) returns (weather.proto.Weather) {
    option (google.api.http) = {
      post: "/api/v1/get_weather_by_coordinates"
      body: "*"
    };
  }
}