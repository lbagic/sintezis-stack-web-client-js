syntax = "proto3";

package account.proto;

option go_package = "api-service-go/gen;gen";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";
import "user.proto";

message Auth {
    string token = 1;
    int64 expires_in = 2;
    user.proto.User user = 3;
}

message LoginRequest {
    string email = 1 [(validate.rules).string = {email: true, min_len: 1}];
    string password = 2 [(validate.rules).string = {min_len: 1}];
}

message RegisterRequest {
  string email = 1 [(validate.rules).string = {email: true, min_len: 1}];
  string password = 2 [(validate.rules).string = {min_len: 1}];
  string password_confirmation = 3 [(validate.rules).string = {min_len: 1}];
}

message VerifyAccountRequest {
  string email = 1 [(validate.rules).string = {email: true, min_len: 1}];
  string token = 2 [(validate.rules).string = {min_len: 1}];
}

message PasswordRecoverRequest {
  string email = 1 [(validate.rules).string = {email: true, min_len: 1}];
}

message PasswordResetRequest {
  string recovery_token = 1 [(validate.rules).string = {min_len: 1}];
  string email = 2 [(validate.rules).string = {email: true}];
  string password = 3 [(validate.rules).string = {min_len: 1}];
}

message VerifyRecoveryTokenRequest {
  string recovery_token = 1 [(validate.rules).string = {min_len: 1}];
  string email = 2 [(validate.rules).string = {email: true}];
}

service AccountService {
  rpc Login(LoginRequest) returns (Auth) {
    option (google.api.http) = {
      post: "/api/v1/login"
      body: "*"
    };
  }

  rpc Register(RegisterRequest) returns (Auth) {
    option (google.api.http) = {
      post: "/api/v1/register"
      body: "*"
    };
  }

  rpc VerifyAccount(VerifyAccountRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/verify"
      body: "*"
    };
  }

  rpc PasswordRecover(PasswordRecoverRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/recover_password"
      body: "*"
    };
  }

  rpc VerifyRecoveryToken(VerifyRecoveryTokenRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/recover_password/verify"
      body: "*"
    };
  }

  rpc PasswordReset(PasswordResetRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/reset_password"
      body: "*"
    };
  }
}