syntax = "proto3";

package elude.proto;

option go_package = "./;gen";

import "validate/validate.proto";
import "proto/commons/enum.proto";
import "proto/commons/timestamp.proto";
import "proto/commons/coordinates.proto";
import "proto/commons/metadata.proto";
import "proto/models/airline.proto";
import "proto/models/city.proto";
import "proto/models/traveller.proto";
import "proto/models/user.proto";
import "proto/models/region.proto";

// User specified budget
message Budget {
    int32 min_price = 1; // Min price for search.
    int32 max_price = 2; // Max price for search.
    int32 absolute_max_price = 3; // Currently not used.
    string currency = 4; // 3 letter currency code (eg, USD, EUR, HRK)
}

// Date used for departure date and return date pairs
message Date {
    int32 year = 1; // Year
    int32 month = 2; // Month
    int32 day = 3; // Day
    string timezone = 4; // TZ dataformat, example: Europe/Zagreb; https://stackoverflow.com/questions/40120056/get-a-list-of-valid-time-zones-in-go
}

// Contains departure and return dates
message Dates {
    Date departure = 1; // Trip departure date
    Date return = 2; // Trip return date
}

// GDS provider message to be used only in GDS rpc calls
message GDSBackend {
    GDSEnum name = 1 [(validate.rules).enum.defined_only = true]; // Gds name (Amadeus/Travelport/Sabre)
    int32 priority = 2; // Priority number (1 is first)
    int32 timeout_ms = 3; // Timeout for gds in milliseconds. Can find it in request options.
}

// Payment provider message to be used only in GDS rpc calls
message GDSPaymentProvider{
    PaymentProvidersEnum name = 1 [(validate.rules).enum.defined_only = true]; // Payment provider name (Stripe/Paypal)
}

// Currently not used.
message GDSOptions {
    repeated GDSBackend air_backends = 1;
    repeated GDSBackend hotel_backends = 2;
}

// Hotel message to be used only in GDS rpc calls.
message GDSHotel {
    int32 id = 1; // Hotel id.
    string name = 2; // Hotel name.
    string description = 3; // Hotel description.
    string address = 4; // Hotel address.
    string message = 5; // Hotel message. Not used in database.
    string code = 6; // Hotel chain code. Not used in database
    string chain = 7; // Hotel chain name. Not used in database.
    int32 rating = 8; // Hotel rating. (10 is the highest)
    Timestamp check_in_datetime = 9; // Hotel check in date time.
    Timestamp check_out_datetime = 10; // Hotel check out date time.
    Coordinates coordinates = 11; // Hotel longitude and latitude coordinates.
    repeated Telephone telephones = 12; // List of hotel telephones.
    repeated GDSAmenity amenities = 13; // List of hotel gds amenities.
    repeated string media = 14; // Hotel image urls.
    repeated GDSRoom rooms = 15; // List of gds rooms.
    GDSBackend gds = 16; // Gds hotel reservation.
    string confirmation_code = 17; // Gds hotel reservation code
    string rate_source = 18; // Gds hotel rate source. Default is 100.
    PriorityEnum priority = 19; // Based on priority search. Default is 1 (medium).
    HotelSearchTypeEnum hotel_search_type = 20; // Type of hotel search types. (regular,timezone,priority).
}

// Telephone message to be used only in GDS rpc calls.
message Telephone {
    string type = 1; // Telephone type (phone,tax).
    string number = 2; // Telephone number.
}

// Room message to be used only in GDS rpc calls.
message GDSRoom {
    int32 id = 1; // Room id.
    string name = 2; // Room name.
    string description = 3; // Room description.
    bool is_refundable = 4; // If true room can be refunded.
    bool breakfast_included = 5; // If true breakfast is included with room reservation.
    string payment_type = 6; // Room payment type. Currently default GUAR (Guaranteed Payment)
    repeated GDSAmenity amenities = 7; // List of gds amenities.
    Price price = 8; // Gds room price information.
}

// Amenity message to be used only in GDS rpc calls. Amenities are stored in database and listed by amenity codes.
message GDSAmenity {
    string name = 1; // Amenity name.
    string image_url = 2; // Amenity url is not fetched from gds but built inside app.
    int32 code = 3; // Gds amenity codes match amenity codes in database.
}

// Contains info for a specific traveller, to be used only in GDS rpc calls
message TravellerInfo {
    int32 id = 1; // Traveller id.
    // Enum with traveller types
    Price price = 3; // Traveller price is based on traveller type.
    TravellerTypeEnum traveller_type = 2; // Traveller type depends on age (adult/child/infant)
    string ticket_number = 4; // Used to ticket traveller.
}

// Contains quantity for each traveller type, to be used only in GDS rpc calls.
message Travellers {
    int32 adults = 1 [(validate.rules).int32 = {gte: 1}]; // Number of travellers age 12 and older.
    int32 children = 2; // Number of travellers between ages 2 (included) and 12.
    int32 infants = 3; // Number of travellers younger than 2.
}

// Flight message to be used only in GDS rpc calls. Contains all flight segments.
message GDSFlight {
    string duration = 1; // FLight duration in minutes. Calculated by adding all flight segment durations without breaks in between.
    repeated GDSFlightSegment flight_segments = 2; // List of all flight segments fetched from gds.
}

// Flight segment message to be used only in GDS rpc calls.
message GDSFlightSegment {
    Airline airline = 1; // Airline data for flight segment.
    string duration = 2; // Duration of a specific flight segment in minutes.
    string flight_number = 3; // Carrier operating number (e.g. 3623)
    Timestamp departure_datetime = 4; // Departure flight segment datetime timestamp. In database all timestamps are utc time.
    Timestamp arrival_datetime = 5; // Arrival flight segment datetime timestamp. In database all timestamps are utc time.
    Airport departure_airports = 6; // Departure airport data for flight segment.
    Airport arrival_airports = 7; // Arrival airport data for flight segment.
    string departure_utc_offset = 8; // Difference of departure location local time zone and utc.
    string arrival_utc_offset = 9; // Difference of arrival location local time zone and utc.
    string departure_terminal = 10; // Departure terminal.
    string arrival_terminal = 11; // Arrival terminal.
    string operating_airline_iata_code = 12; // Carrier airline iata code.
}

// Contains info on the flight options returned after a GDS flight search.
message FlightOption {
    int32 id = 1; // Flight option id.
    Dates dates = 2; // Departure and return flight dates.
    GDSFlight departure_flight = 3; // Departure flight data.
    GDSFlight return_flight = 4; // Arrival flight data.
    Price price = 5; // Total price information of flights.
    repeated TravellerInfo traveller_info = 6; // List of traveller information of all travellers.
    GDSBackend gds = 7; // Gds for ticketing a flight.
}

// Hotel requirements when making a GDS hotel search.
message HotelRequirements {
    int32 min_stars = 1; // Used to filter hotels with minimal stars.
    bool amenities = 2; // Used to check if hotel has amenities.
    bool disable = 3; // If true run search will skip hotel search.
    int32 max_stars = 4; // Used to filter hotels with maximum stars.
}

// Air requirements when making a GDS flight search.
message AirRequirements {
    BookingClassEnum booking_class = 1; // Booking class options (economy/business/first).
    repeated string disabled_airlines = 2; // Disabled airlines are listed on launch darkly, fetched and mapped to this string.
    bool disable = 3; // If true run search will skipp air search.
}

// Location identifier is used to unite different location types in one structure.
message LocationIdentifier {
    int32 id = 1; // Location identifier id.
    LocationTypeEnum location_type = 2; // Location type (metropolitan area/city/airport/region/country/location)
    string iata_code = 3; // Location identifier iata code.
    string location_name = 4; // Location identifier name.
    repeated string priority_hotels_sabre = 5; // List of hotels with top priority. Found from property gds.
    string image_url = 6; // Location identifier image url. Fetched from gds.
    string description = 7; // Location identifier description.
    bool hotel_address_search = 8; // If true sabre will find hotel address. If disabled sabre will find only iata code.
    LocationMetadata metadata = 9; // Contains location data. Depends on location type.
    int32 shard_id = 10; // Id for shard location belongs to
}

// Locations requirements when making a GDS search.
message LocationsRequirements {
    LocationIdentifier departure = 1; // Location identifier data for departure.
    repeated LocationIdentifier destinations = 2; // Location identifiers for search destinations.
    repeated string blacklisted_cities = 3; // Currently not used.
}

// Price quote is a fixed price from gds.
message PriceQuote {
    int32 identifier = 1 [(validate.rules).int32 = {gte: 1}]; // Price quote number.
}

// Price of an Itinerary.
message Price {
    string currency = 1 [(validate.rules).string.min_len = 1]; // 3 letter currency code (eg, USD, EUR, HRK)
    float total = 2 [(validate.rules).float.gt = 0]; // Price amount after tax.
    float base = 3; // Price amount before tax.
    float tax = 4; // Price amount after tax - Price amount before tax
    float agent_fee = 5; // Total price * (percentage) + fixed fee
    float base_price_difference = 6; // Base price - real price
}

// Contains information about a complete GDS itinerary.
message GDSItinerary {
    FlightOption flight_option = 1; // Itinerary flight data.
    GDSHotel hotel = 2; // Itinerary hotel data.
    Price price = 3; // Itinerary price data.
    repeated GDSTraveller travellers = 4; // List of itinerary travellers data.
    GDSUser user = 5; // Itinerary user.
    Dates dates = 6; // Beginning and end trip dates.
    LocationIdentifier departure_location = 7; // Location identifier for departure trip location.
    LocationIdentifier destination_location = 8; // Location identifier for destination trip location.
    repeated PriceQuote price_quotes = 9; // List of itinerary price quotes.
}

// Traveller message to be used only in GDS rpc calls.
message GDSTraveller {
    int32 id = 1; // Traveller id.
    string first_name = 2; // Traveller name.
    string last_name = 3; // Travellers last name.
    string date_of_birth = 4; // Traveller date of birth (e.g. 2022-06-08).
    string email = 6; // Traveller email.
    string title = 7; // Traveller title.
    string traveler_type = 8; // Traveller type.
}

// User message to be used only in GDS rpc calls.
message GDSUser {
    int32 id = 1; // User id.
    string first_name = 2; // User first name.
    string last_name = 3; // User last name.
    string date_of_birth = 4; // User date of birth (e.g. 2022-06-08).
    string email = 6; // User email.
    string phone = 7; // User phone number.
    string address = 8; // User address.
    string title = 9; // User title.
    string country_code = 10; // User country code.
    string country_iso = 11; // User country iso.
}

// Ticker info is used to track travellers ticket document numbers.
message TicketInfo {
    int32 traveller_id = 1; // Traveller id.
    string document_number = 2; // Traveller ticket identifier.
}

// Search location is used as basic location structure while searching other locations.
message SearchLocation {
    string name = 1; // Location name.
    string description = 2; // Location Description.
    string image_url = 3; // Location url built inside app with media path.
    string iata_code = 4; // Location iata code.
    LocationTypeEnum location_type = 5; // Location type (metropolitan area/city/airport/region/country/location)
    repeated Property properties = 6; // Used for connected cities. Part of a city message.
    repeated SearchLocation sublocations = 7; // Every location can have multiple sub locations.
    string connected_city_iata_code = 8; // Location iata code for the next connected city.
    int32 id = 9; // Location id. Depends on Location type.
    LocationMetadata metadata = 10; // Contains location data. Depends on location type.
    bool connected_location = 11; // If true than next connected locations exists. If false this is the last location in a row.
    int32 median_hotel_price = 12; // Median price for one night in a hotel
    int32 shard_id = 13; // Id for shard location belongs to
}
