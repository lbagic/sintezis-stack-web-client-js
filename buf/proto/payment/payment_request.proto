syntax = "proto3";

package elude.proto;

option go_package = "./;gen";

import "validate/validate.proto";
import "proto/commons/pagination.proto";
import "proto/commons/auth.proto";
import "proto/commons/session_info.proto";
import "proto/commons/options.proto";
import "proto/commons/flow_common.proto";
import "proto/models/user.proto";
import "proto/models/payment_provider.proto";
import "proto/commons/filter_options.proto";
import "proto/models/promotion_code.proto";

// MakePaymentRequest is used in internal MakePayment rpc calls. Clients should not be using this.
message MakePaymentRequest {
    Auth auth = 1; // Used to authorize the request.
    Options options = 2; // Common options for request.
    int32 payment_method_id = 3; // Payment method id.
    Price price = 4; // Payment method price information.
    User user = 5; // Payment method user data.
    SessionInfo session_info = 6 [(validate.rules).message.required = true]; // Session information.
}

// AddPaymentMethodRequest is used in AddPaymentMethod rpc calls. Clients should use this when adding a new payment
// method for a user.
message AddPaymentMethodRequest {
    Auth auth = 1; // Used to authorize the request.
    Options options = 2; // Common options for request.
    GDSPaymentProvider provider = 3 [(validate.rules).message.required = true]; // Gds payment provider data.
    string token = 4 [(validate.rules).string.min_len = 1]; // Payment provider token.
    int32 is_default = 5; // 1 equals true.
    User user = 6; // Payment method user data.
    SessionInfo session_info = 7; // Session information.
    // TODO: remove this
    int32 payment_provider_id = 8; // Not used.
}

// CreateChargeRequest is used in internal CreateCharge rpc calls. Clients should not be using this.
message CreateChargeRequest {
    Auth auth = 1; // Used to authorize the request.
    Options options = 2; // Common options for request.
    GDSPaymentProvider provider = 3 [(validate.rules).message.required = true]; // Payment provider data for create charge.
    PaymentMethod payment_method = 4 [(validate.rules).message.required = true]; // Payment method data for create charge.
    Price price = 5 [(validate.rules).message.required = true]; // Price information for create charge.
    GDSUser user = 6 [(validate.rules).message.required = true]; // Create charge user data.
    SessionInfo session_info = 7 [(validate.rules).message.required = true]; // Session information.
    string elude_reference = 8 [(validate.rules).string.min_len = 1]; // Elude pnr. Saved in database bookings table.
    PromotionCode promotion_code = 9; // Promotion code for payment discount.
}

// CaptureChargeRequest is used in internal CaptureCharge rpc calls. Clients should not be using this.
message CaptureChargeRequest {
    Auth auth = 1; // Used to authorize the request.
    Options options = 2; // Common options for request.
    GDSPaymentProvider provider = 3 [(validate.rules).message.required = true]; // Payment provider data for capture charge.
    string charge_id = 4 [(validate.rules).string.min_len = 1]; // Payment provider charge id for capture charge.
    GDSUser user = 5; // Capture charge user data.
    SessionInfo session_info = 6 [(validate.rules).message.required = true]; // Session information.
    string hotel_reservation_code = 7; // Gds hotel reservation code. Saved in database bookings table.
    string flight_reservation_code = 8; // Gds flight reservation code. Saved in database bookings table.
    PromotionCode promotion_code = 9; // Promotion code used for discount.
}

// RefundChargeRequest is used in internal RefundCharge rpc calls. Clients should not be using this.
message RefundChargeRequest {
    Auth auth = 1; // Used to authorize the request.
    Options options = 2; // Common options for request.
    GDSPaymentProvider provider = 3 [(validate.rules).message.required = true]; // Payment provider data for refund charge.
    string charge_id = 4 [(validate.rules).string = {pattern: "^[a-zA-Z0-9 ]*$", min_len: 1}]; // Payment provider charge id for refund charge.
    GDSUser user = 5; // Refund charge user data.
    SessionInfo session_info = 6; // Session information.
}

// GetPaymentMethodsRequest is used for GetPaymentMethods rpc calls. Used to fetch all payment methods from DB.
message GetPaymentMethodsRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    int32 userId = 3; // Payment method user id. Used to get all payment methods for this user.
    Pagination pagination = 4; // Used to paginate response data.
    Options options = 5; // Common options for request.
    string search = 6; // Used to filter by payment method name.
    FilterOptions filter_options = 7; // Used to filter response data.
}

// GetPaymentMethodRequest is used for GetPaymentMethod rpc calls. Used to fetch a single payment method by ID from DB.
message GetPaymentMethodRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    int32 id = 3 [(validate.rules).int32 = {gte: 1}]; // Payment method for get payment methods in database payment_methods table.
    Options options = 4; // Common options for request.
}

// CreatePaymentMethodRequest is used for CreatePaymentMethod rpc calls. Used to add a new payment method to DB.
message CreatePaymentMethodRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    PaymentMethod payment_method = 3 [(validate.rules).message.required = true]; // Payment method data for create payment method.
    Options options = 4; // Common options for request.
}

// UpdatePaymentMethodRequest is used for UpdatePaymentMethod rpc calls. Used to update an existing payment method in DB.
message UpdatePaymentMethodRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    PaymentMethod payment_method = 3; // Payment method data for update payment method.
    Options options = 4; // Common options for request.
}

// DeletePaymentMethodRequest is used for DeletPaymentMethod rpc calls. Used to soft delete an existing payment method in DB.
message DeletePaymentMethodRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    int32 id = 3 [(validate.rules).int32 = {gte: 1}]; // Payment method id for delete payment method.
    Options options = 4; // Common options for request.
}

// GetPaymentProvidersRequest is used for GetPaymentProviders rpc calls. Used to fetch all payment providers from DB.
message GetPaymentProvidersRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Pagination pagination = 3; // Used to paginate response data.
    Options options = 4; // Common options for request.
    string search = 5; // Used to filter by payment provider name.
}

// GetPaymentProviderRequest is used for GetPaymentProvider rpc calls. Used to fetch a single payment provider by ID from DB.
message GetPaymentProviderRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    int32 id = 3 [(validate.rules).int32 = {gte: 1}]; // Payment provider id for get payment provider in database payment_providers table.
    Options options = 4; // Common options for request.
}

// CreatePaymentProviderRequest is used for CreatePaymentProvider rpc calls. Used to add a new payment provider to DB.
message CreatePaymentProviderRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    PaymentProvider payment_provider = 3 [(validate.rules).message.required = true]; // Payment provider data for create payment provider.
    Options options = 4; // Common options for request.
}

// UpdatePaymentProviderRequest is used for UpdatePaymentProvider rpc calls. Used to update an existing payment provider in DB.
message UpdatePaymentProviderRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    PaymentProvider payment_provider = 3; // Payment provider data for update payment provider.
    Options options = 4; // Common options for request.
}

// DeletePaymentProviderRequest is used for DeletPaymentProvider rpc calls. Used to soft delete an existing payment provider in DB.
message DeletePaymentProviderRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    int32 id = 3 [(validate.rules).int32 = {gte: 1}]; // Payment provider id for delete payment provider.
    Options options = 4; // Common options for request.
}

// GetPromotionCodesRequest is used for GetPromotionCodes rpc calls. Used to fetch all promotion codes from stripe.
message GetPromotionCodesRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Pagination pagination = 3; // Used to paginate response data.
    Options options = 4; // Common options for request.
    string search = 5; // Used to filter by promotion code name.
}

// GetPromotionCodeRequest is used for GetPromotionCode rpc calls. Used to fetch a single promotion code by ID from stripe.
message GetPromotionCodeRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    int32 id = 3; // Promotion Code id for get promotion code from stripe.
    Options options = 4; // Common options for request.
}

// CreatePromotionCodeRequest is used for CreatePromotionCode rpc calls. Used to add a new promotion code to stripe.
message CreatePromotionCodeRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    PromotionCode promotion_code = 3 [(validate.rules).message.required = true]; // Promotion Code data for create promotion code.
    Options options = 4; // Common options for request.
}

// UpdatePromotionCodeRequest is used for UpdatePromotionCode rpc calls. Used to update an existing promotion code from stripe.
message UpdatePromotionCodeRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    PromotionCode promotion_code = 3; // Promotion Code data for update promotion code.
    Options options = 4; // Common options for request.
}

// DeletePromotionCodeRequest is used for DeletePromotionCode rpc calls. Used to soft delete an existing promotion code from stripe.
message DeletePromotionCodeRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    int32 id = 3; // PromotionCode id for delete promotion code.
    Options options = 4; // Common options for request.
}