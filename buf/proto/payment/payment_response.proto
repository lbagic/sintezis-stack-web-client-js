syntax = "proto3";

package elude.proto;

option go_package = "./;gen";

import "proto/commons/status.proto";
import "proto/commons/pagination.proto";
import "proto/commons/auth.proto";
import "proto/commons/session_info.proto";
import "proto/commons/flow_common.proto";
import "proto/models/user.proto";
import "proto/models/payment_provider.proto";
import "proto/models/promotion_code.proto";

// MakePaymentResponse is used in internal MakePayment rpc calls.
message MakePaymentResponse {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    // Required: status code.
    Status status = 3; // Status of response.
}

// AddPaymentMethodResponse is used in AddPaymentMethod rpc calls.
message AddPaymentMethodResponse {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    // Required: status code.
    Status status = 3; // Status of response.
    PaymentMethod payment_method = 4; // Payment method from payment method requests.
}

message CreateChargeResponse {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    // Required: status code.
    Status status = 3; // Status of response.
    string charge_id = 4; // Payment provider charge id for create charge.
    GDSPaymentProvider provider = 5; // Payment provider data for create charge.
    PaymentMethod payment_method = 6; // Payment method data for create charge.
    int32 discounted_total_amount = 7; // Discount on total amount.
    PromotionCode promotion_code = 8; // Promotion code used for discount.
}

message CaptureChargeResponse {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    // Required: status code.
    Status status = 3; // Status of response.
    string charge_id = 4; // Payment provider charge id for capture charge.
    PromotionCode promotion_code = 5; // Promotion code id for discount.
}

message RefundChargeResponse {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    // Required: status code.
    Status status = 3; // Status of response.
    string refund_id = 4; // Payment provider refund id for capture charge.
}

message PaymentMethodsResponse {
    SessionInfo session_info = 1; // Session information.
    repeated PaymentMethod payment_methods = 2; // List of payment methods data from payment methods requests.
    Pagination pagination = 3; // Used to paginate response data.
    // Required: status code.
    Status status = 4; // Status of response.
}

message PaymentMethodResponse {
    SessionInfo session_info = 1; // Session information.
    PaymentMethod payment_method = 2; // Payment method data from payment method requests.
    // Required: status code.
    Status status = 3; // Status of response.
}

message PaymentProvidersResponse {
    SessionInfo session_info = 1; // Session information.
    repeated PaymentProvider payment_providers = 2; // List of payment providers data from payment providers requests.
    Pagination pagination = 3; // Used to paginate response data.
    // Required: status code.
    Status status = 4; // Status of response.
}

message PaymentProviderResponse {
    SessionInfo session_info = 1; // Session information.
    PaymentProvider payment_provider = 2; // Payment provider data from payment provider requests.
    // Required: status code.
    Status status = 3; // Status of response.
}

message PromotionCodesResponse {
    SessionInfo session_info = 1; // Session information.
    repeated PromotionCode promotion_codes = 2; // List of promotion codes data from promotion codes requests.
    Pagination pagination = 3; // Used to paginate response data.
    // Required: status code.
    Status status = 4; // Status of response.
}

message PromotionCodeResponse {
    SessionInfo session_info = 1; // Session information.
    PromotionCode promotion_code = 2; // Promotion Code data from promotion code requests.
    // Required: status code.
    Status status = 3; // Status of response.
}