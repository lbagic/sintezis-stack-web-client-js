syntax = "proto3";

package elude.proto;

option go_package = "./;gen";

import "proto/commons/flow_common.proto";
import "proto/commons/status.proto";
import "proto/commons/session_info.proto";
import "proto/commons/auth.proto";
import "proto/commons/timestamp.proto";
import "proto/commons/enum.proto";
import "proto/models/city.proto";
import "proto/models/location.proto";

// ItineraryResponse is used in all internal and external GDS search rpc calls. Used in different calls to return booking information.
message ItineraryResponse {
    // TODO include list of GDS uses, for error messages.
    SessionInfo session_info = 1; // Session information.
    Location departure_location = 2; // Departure Location.
    Location arrival_location = 3; // Arrival Location.
    repeated FlightOption flight_options = 4; // List of available flights after gds search.
    repeated GDSHotel hotels = 5; // List of available hotels after gds search.
    // Required: status code.
    Status status = 6; // Status of response.
    HotelSearchTypeEnum hotel_search_type = 7; // Type of hotel search.
}

// ReservationResponse is used in all internal and external GDS reservation rpc calls. Contains information about reservation.
message ReservationResponse {
    SessionInfo session_info = 1; // Session information.
    int32 booking_id = 2; // Booking id after successful reservation in database bookings table.
    string hotel_reservation_identifier = 3; // Hotel identifiers from gds. Saved in database.
    string air_reservation_identifier = 4; // Air identifiers from gds. Saved in database.
    GDSItinerary itinerary = 5; // Information about gds itinerary.
    // Required: status code.
    Status status = 6; // Status of response.
    string elude_reference = 7; // Elude Pnr. Saved in database.
    string airline_reservation_identifier = 8; // Airline ref identifier from gds. Saved in database.
}

// CancelResponse is used in CancelReservation requests.
message CancelResponse {
    SessionInfo session_info = 1; // Session information.
    int32 booking_id = 2; // Booking id for cancel reservation in database bookings table.
    // Required: status code.
    Status status = 5; // Status of response.
}

// TicketResponse is used only in internal GDS rpc calls. TicketResponse is used in Ticket requests.
message TicketResponse {
    SessionInfo session_info = 1; // Session information.
    Price price = 2; // Itinerary price information.
    Timestamp issued_at_datetime = 3; // Used to mark when was the ticket ticketed.
    repeated TicketInfo ticket_infos = 4; // Ticket information.
    // Required: status code.
    Status status = 5; // Status of response.
}

// VoidTicketResponse is used only in internal GDS rpc calls. Used in VoidTicket request.
message VoidTicketResponse {
    SessionInfo session_info = 1; // Session information.
    Timestamp cancel_at_datetime = 2; // Used to mark when was the ticket canceled.
    string document_number = 3; // Ticket document number for void ticket.
    // Required: status code.
    Status status = 4; // Status of response.
}

// GetPriceResponse is used only in internal GDS rpc calls. Used to return hotel/air price requests.
message GetPriceResponse {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Price hotel_price = 3; // Hotel price.
    Price flight_price = 4; // Flight price.
    // Required: status code.
    Status status = 5; // Status of response.
}

// RetrieveResponse is used in all internal and external GDS RetrieveReservation rpc calls. Used to retrieve hotel/air reservations.
message RetrieveResponse {
    SessionInfo session_info = 1; // Session information.
    int32 booking_id = 2; // Booking id for retrieve reservation in database bookings table.
    GDSItinerary itinerary = 3;
    // Required: status code.
    Status status = 4; // Status of response.
}

// GetAbandonTripSearchResponse is used in GetAbandonTripSearch rpc calls. Used to return a search request based on abandon trip information.
message GetAbandonTripSearchResponse {
    SessionInfo session_info = 1; // Session information.
    bool is_cached = 2; // If true means Itinerary is cached.
    ItineraryResponse itinerary_response = 3; // Itinerary response data.
    Status status = 4; // Status of response.
}

// RevalidateItineraryResponse is used in all internal and external GDS RevalidateItinerary rpc calls.
message RevalidateItineraryResponse {
    // TODO include list of GDS uses, for error messages.
    SessionInfo session_info = 1; // Session information.
    float flight_price_difference = 2; // Price difference while revalidating flight prices.
    float hotel_price_difference = 3; // Price difference while revalidating hotel prices.
    // Required: status code.
    Status status = 4; // Status of response.
}

// HotelDetailsResponse is used in all internal and external GDS GetHotelDetails rpc calls.
message HotelDetailsResponse {
    SessionInfo session_info = 1; // Session information.
    GDSHotel hotel = 2; // Hotel data from gds.
    // Required: status code.
    Status status = 3; // Status of response.
}

// AbandonTripResponse is used in AbandonTrip rpc calls.
message AbandonTripResponse {
    SessionInfo session_info = 1; // Session information.
    Status status = 2; // Status of response.
}

// BuildHotelResponse is used in internal GDS BuildHotel rpc calls. Travelport gds currently not used.
message BuildHotelResponse {
    SessionInfo session_info = 1;
    GDSHotel hotel = 2;
    // Required: status code.
    Status status = 3;
}

// SetSearchCacheResponse is used in internal GDS SeatSearchCache rpc calls. Currently not used.
message SetSearchCacheResponse {
    SessionInfo session_info = 1;
    // Required: status code.
    Status status = 2;
}

// AveragePriceResponse .
message AveragePriceResponse {
    // TODO include list of GDS uses, for error messages.
    SessionInfo session_info = 1; // Session information.
    int32 average_flight_price = 2; // Flight average price.
    int32 median_hotel_price = 3; // Median hotel price
    Status status = 4; // Status of response.
}
