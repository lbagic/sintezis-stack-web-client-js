syntax = "proto3";

package elude.proto;

option go_package = "./;gen";

import "proto/models/media.proto";
import "proto/models/country.proto";
import "proto/models/region.proto";
import "proto/models/gds.proto";
import "proto/models/property_chain.proto";
import "proto/models/property_type.proto";
import "proto/commons/weather.proto";
import "validate/validate.proto";

// City message is returned in most of the city CRUD operations and as an association for multiple different messages. Contains all the info for a specific city.
message City {
  int32 id = 1; // City id.
  string name = 2 [(validate.rules).string = {pattern: "^[a-zA-Z0-9 !@&*()-_/,.]*$",min_len: 1}]; // City name.
  string description = 3 [(validate.rules).string = {pattern: "^[a-zA-Z0-9 `!@&*()-_/,.]*$",min_len: 1}]; // City description.
  string iata_code = 4 [(validate.rules).string = {pattern: "^[A-Z0-9^&-_+:;.?]*$",len: 3}]; // City iata code.
  bool is_connected = 5; // If true city is connected. For now only connected cities are used.
  string lat = 6 [(validate.rules).string = {pattern: "^[0-9.-]*$"}]; // City latitude coordinate.
  string long = 7 [(validate.rules).string = {pattern: "^[0-9.-]*$"}]; // City longitude coordinate.
  int32 country_id = 8 [(validate.rules).int32 = {gte: 1}]; // City country id.
  Country country= 9; // City country data.
  int32 image_id = 10; // City image id in database media table.
  Media media= 11; // City media data.
  int32 region_id = 12; // City region id.
  Region region= 13; // City region data.
  repeated Airport airports = 14; // List od city airports data.
  Weather weather = 15; // City weather. Not used in DB.
  City nearest_connected_city = 16; // Nearest connected city data.
  float distance_mi = 17; // Distance in miles. Currently not used. Not used in DB.
  repeated Property properties = 18; // List of city properties data.
  bool is_recommended = 19; // If true city is prioritised in package search and shown as featured location.
}

// Airport message is returned in most of the airport CRUD operations and as an association for multiple different messages. Contains all the info for a specific airport.
message Airport {
  int32 id = 1; // Airport id.
  string name = 2 [(validate.rules).string = {pattern: "^[a-zA-Z0-9 `!@&*()-_/,.]*$",min_len: 1}]; // Airport name.
  string iata_code = 3 [(validate.rules).string = {pattern: "^[A-Z0-9^&-_+:;.?]*$",len: 3}]; // Airport iata code.
  string identity = 4 [(validate.rules).string = {pattern: "^[A-Z0-9- ]*$",min_len: 1}]; // Airport identity. Short airport code (e.g. FNBG).
  string elevation = 5 [(validate.rules).string = {pattern: "^[0-9-.]*$"min_len: 1}]; // Airport elevation. In feet.
  string gps_code = 6 [(validate.rules).string = {pattern: "^[A-Z0-9 ]*$",min_len: 1}]; // Airport gds code. Short code (e.g. KCNY).
  string lat = 7 [(validate.rules).string = {pattern: "^[0-9.-]*$"}]; // Airport latitude coordinate.
  string long = 8 [(validate.rules).string = {pattern: "^[0-9.-]*$"}]; // Airport longitude coordinate.
  string type = 9; // Airport type (e.g. small_airport, seaplane_base).
  bool is_active = 10; // If true airport is active.
  int32 city_id = 11 [(validate.rules).int32 = {gte: 1}]; // Airport city id.
  City city = 12; // Airport city data.
}

// Property message is returned as a part of a City message. Contains information on a recommended property for a connected city. Used in budget tier searches.
message Property {
  int32 id = 1; // Property id.
  string name = 2 [(validate.rules).string = {pattern: "^[a-zA-Z0-9 `!@&*()-_/,.]*$",min_len: 1}]; // Property name.
  string address = 3 [(validate.rules).string = {pattern: "^[a-zA-Z0-9 `!@&*()-_/,.]*$",min_len: 1}]; // Property address.
  string iata_code = 4; // Property iata code.
  string postal_code = 5; // Property postal code.
  string rating = 6; // Property rating (10 is highest).
  int32 city_id = 7 [(validate.rules).int32 = {gte: 1}]; // Property city id.
  City city = 8; // Property city data.
  int32 property_type_id = 9 [(validate.rules).int32 = {gte: 1}]; // Property type id.
  PropertyType property_type = 10; // Property type data.
  int32 property_chain_id = 11 [(validate.rules).int32 = {gte: 1}]; // Property chain id.
  PropertyChain property_chain = 12; // Property chain data.
  repeated PropertyGds property_gds = 13; // List of property gds data.
}

// PropertyGds is returned as part of a property message. Contains a unique identifier for a property and GDS provider pair.
message PropertyGds {
  int32 id = 1; // Property id.
  int32 property_id = 2 [(validate.rules).int32 = {gte: 1}]; // Property id.
  Property property = 3; // Property data.
  int32 gds_id = 4 [(validate.rules).int32 = {gte: 1}]; // Property gds id.
  Gds gds = 5; // Property gds data.
  string identifier = 6 [(validate.rules).string = {pattern: "^[0-9]*$",min_len: 1}]; // Property identifier (e.g. 100012584).
}