syntax = "proto3";

package elude.proto;

option go_package = "./;gen";

import "validate/validate.proto";
import "proto/models/city.proto";
import "proto/models/traveller.proto";
import "proto/models/gds.proto";
import "proto/models/airline.proto";
import "proto/models/flight.proto";
import "proto/models/user.proto";
import "proto/models/booking_status.proto";
import "proto/models/tag.proto";
import "proto/commons/timestamp.proto";

// Booking is returned in GetBooking and all the different GetBookings calls on the bookings service. It contains all the aggregated information
// about a booking that gets created during StreamCreateReservation rpc call.
message Booking {
    int32 id = 1; // Booking id.
    string session_id = 2; // Booking cache session id.
    string elude_reference = 3; // Booking elude pnr.
    string departure_date = 4  [deprecated = true]; // Booking beginning date.
    string return_date = 5  [deprecated = true]; // Booking end date.
    string currency = 6; // 3 letter currency code (eg, USD, EUR, HRK)
    string hotel_reservation_code = 7; // Booking hotel gds reservation code.
    string hotel_provider_code = 8; // Booking hotel provider code.
    string flight_reservation_code = 9; // Booking flight gds reservation code.
    string flight_reservation_companyId = 10; // Booking flight reservation company id.
    string stripe_charge_id = 11; // Booking stripe charge id.
    int32 adults = 12; // Number of travellers age 12 and older.
    int32 children = 13; // Number of travellers between ages 2 (included) and 12.
    int32 infants = 14; // Number of travellers younger than 2.
    int32 price = 15; // Total price.
    int32 base_price_difference = 16; // Base price - real price.
    int32 agent_fee = 17;  // Total price * (percentage) + fixed fee
    int32 total_amount = 18; // Price amount after tax.
    int32 tax_amount = 19; // Price amount after tax - Price amount before tax
    int32 base_amount = 20; // Price amount before tax.
    int32 user_id  = 21; // Booking user id.
    int32 payment_method_id  = 22; // Booking payment method id.
    int32 departure_city_id  = 23; // Booking departure city id. If hotel only reservation this is null.
    int32 arrival_city_id  = 24; // Booking arrival city id. If hotel only reservation this is hotel city.
    int32 booking_status_id  = 25; // Booking status id.
    int32 flight_gds_id  = 26; // Booking flight reservation gds id.
    int32 hotel_gds_id  = 27; // Booking hotel reservation gds id.
    Itinerary itinerary = 28; // Booking itinerary data.
    City departure_city = 29; // Booking departure city data. If hotel only reservation this is null.
    City arrival_city = 30; // Booking arrival city data. If hotel only reservation this is hotel city.
    PaymentMethod payment_method = 31; // Booking payment method data.
    repeated Traveller travellers = 32; // List of booking travellers data.
    Gds flight_gds = 33; // Booking flight reservation gds data.
    Gds hotel_gds = 34; // Booking hotel reservation gds data.
    User user = 35; // Booking user data.
    BookingStatus booking_status = 36; // Booking status data.
    repeated Tag tags = 37; // List of booking tags data.
    repeated BookingTraveller booking_travellers = 38; // List of booking travellers for specific booking.
    Timestamp departure_date_timestamp = 39; // Booking beginning date.
    Timestamp return_date_timestamp = 40; // Booking end date.
    Timestamp created_at = 41; // Booking created at timestamp.
    string airline_reservation_code = 42; // Booking airline reservation code.
    string stripe_booking_url = 43; // Stripe payment link.
    bool action_required = 44; // If booking pnr has updated and needs manual action.
}

// Itinerary is usually returned as part of a Booking message. Contains info about the flight and the hotel for a booking.
message Itinerary {
    int32 id = 1; // Itinerary id.
    int32 airline_id = 2; // Itinerary airline id.
    int32 booking_id = 3; // Itinerary booking id.
    int32 departure_flight_id = 4; // Itinerary departure flight id.
    int32 return_flight_id = 5; // Itinerary return flight id.
    string currency = 6; // Itinerary currency, 3 letter currency code (eg, USD, EUR, HRK).
    float total_amount = 7; // Price amount after tax - Price amount before tax
    float tax_amount = 8; // Price amount after tax - Price amount before tax
    float base_amount = 9; // Price amount before tax.
    string main_ticket_number = 10; // Itinerary ticket number.
    Hotel hotel = 11; // Itinerary hotel data.
    Flight departure_flight = 12; // Itinerary departure flight data.
    Flight return_flight = 13; // Itinerary departure flight data.
    Airline airline = 14; // Itinerary airline data.
    Booking booking = 15; // Itinerary booking data.
}

// Hotel is usually returned as part of Itinerary message. Contains info about the hotel that was booked.
message Hotel {
    int32 id = 1; // Hotel id.
    string address = 2 [(validate.rules).string = {pattern: "^[a-zA-Z0-9 `!@&*()-_/,.]*$",min_len: 1}]; // Hotel address.
    string name = 3 [(validate.rules).string = {pattern: "^[a-zA-Z0-9 `!@&*()-_/,.]*$",min_len: 1}]; // Hotel name.
    string confirmation_code = 4; // Hotel reservation code
    string description = 5 [(validate.rules).string = {pattern: "^[a-zA-Z0-9 `!@&*()-_/,.]*$",min_len: 1}]; // Hotel description.
    string check_in_date = 6 [deprecated = true]; // Hotel check in date.
    string check_out_date = 7 [deprecated = true]; // Hotel check out date.
    string currency = 8; // Hotel 3 letter currency code (eg, USD, EUR, HRK).
    float total_amount = 9; // Price amount after tax.
    float tax_amount = 10; // Price amount after tax - Price amount before tax
    float base_amount = 11; // Price amount before tax.
    int32 rating = 12; // Hotel rating (10 is highest).
    int32 stars = 13; // Number of hotel stars.
    int32 itinerary_id = 14; // Hotel itinerary id.
    int32 city_id = 15 [(validate.rules).int32 = {gte: 1}]; // Hotel city id.
    Itinerary itinerary = 16; // Hotel itinerary data.
    City city = 17; // Hotel city data.
    float latitude = 18; // Hotel latitude coordinate.
    float longitude = 19; // Hotel longitude coordinate.
    repeated Room rooms = 20; // List of hotel rooms data.
    string image_url = 21; // Hotel image url.
    Timestamp check_in_date_timestamp = 22; // Hotel check in date.
    Timestamp check_out_date_timestamp = 23; // Hotel check out date.
}

// Room is usually returned as part of Hotel message. Contains info about the specific room that was booked.
message Room {
    int32 id = 1; // Room id.
    string type = 2; // Room type (e.g. Luxury room).
    string name = 3 [(validate.rules).string = {pattern: "^[a-zA-Z0-9 `!@&*()-_/,.]*$",min_len: 1}]; // Room name
    string description = 4 [(validate.rules).string = {pattern: "^[a-zA-Z0-9 `!@&*()-_/,.]*$",min_len: 1}]; // Room description.
    bool meal = 5; // If room has meal. Currently is set to false.
    int32 hotel_id = 6 [(validate.rules).int32 = {gte: 1}]; // Room hotel id.
    Hotel hotel = 7; // Room hotel data.
}

// BookingTraveller is usually returned as part of a Booking message. Contains info about the travelers for a specific booking.
message BookingTraveller {
    int32 id = 1; // Booking traveller id.
    int32 traveller_id = 2; // Traveller id for booking traveller.
    int32 booking_id = 3; // Booking id for booking traveller.
    Traveller traveller = 4; // Traveller data.
    string ticket_number = 5; // Ticket number for booking traveller.
}