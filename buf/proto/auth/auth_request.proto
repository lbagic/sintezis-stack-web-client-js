syntax = "proto3";

package elude.proto;

option go_package = "./;gen";

import "validate/validate.proto";
import "proto/commons/pagination.proto";
import "proto/commons/auth.proto";
import "proto/commons/session_info.proto";
import "proto/commons/options.proto";
import "proto/commons/filter_options.proto";
import "proto/commons/enum.proto";
import "proto/models/auth_provider.proto";
import "proto/models/user.proto";
import "proto/models/role.proto";

// AuthRequest is used in Authorize rpc calls. Auth message should always contain a JWT token.
message AuthRequest {
    Auth auth = 1; // Used to authorize the request.
    Options options = 2; // Common options for request.
    SessionInfo session_info = 3; // Session information.
}

// CheckPermissionRequest is used in internal permission check rpc calls.
message CheckPermissionRequest {
    string token = 1; // Used to get user from token.
    string permission = 2; // Used to check permission.
    Options options = 3; // Common options for request.
    SessionInfo session_info = 4; // Session information.
}

// CheckAdditionalPermissionRequest is used in internal permission check rpc calls.
message CheckAdditionalPermissionRequest {
    string role = 1; // Used to check role.
    string permission = 2; // Used to check permission.
    Options options = 3; // Common options for request.
    SessionInfo session_info = 4; // Session information.
}

// RegisterRequest is used for Rergister rpc calls. Conatins all necessary information to sign up a new user.
message RegisterRequest {
    reserved 6;
    string first_name = 1 [(validate.rules).string = {pattern: "^[a-zA-Z '.-]*$", ignore_empty: true}]; // First name for sign up.
    string last_name = 2 [(validate.rules).string = {pattern: "^[a-zA-Z '.-]*$", ignore_empty: true}]; // Last name for sign up.
    string email = 3 [(validate.rules).string = {email: true, ignore_empty: true}]; // Email for sign up.
    string password = 4 [(validate.rules).string = {min_len: 8, ignore_empty: true}]; // Password for sign up.
    string password_confirmation = 5 [(validate.rules).string = {min_len: 8, ignore_empty: true}]; // Confirmation password for sign up.
    AuthProviderEnum provider = 11 [(validate.rules).enum.defined_only = true]; // Auth provider for sign up.
    string token = 7; // Token used for social sign up.
    string token_secret = 8; // Token secret for twitter sign up.
    Auth auth = 9;  // Used to authorize the request.
    SessionInfo session_info = 10; // Session information.
    Options options = 12; // Common options for request.
    DeviceTypeEnum device_type = 13 [(validate.rules).enum.defined_only = true]; // Enum that specifies the type of user device from which he sent the GRPC call. Clients shouldn't set this.
}


// LoginRequest is used for Login rpc calls. Client should send this message for login regardless of auth provider used.
message LoginRequest {
    reserved 1;
    AuthProviderEnum provider = 8 [(validate.rules).enum.defined_only = true]; // Auth provider for log in.
    string password = 2 [(validate.rules).string = {min_len: 8, ignore_empty: true}]; // Password for log in.
    string email = 3 [(validate.rules).string = {email: true, ignore_empty: true}]; // Email for log in.
    string token = 4; // Token used for social log in.
    string token_secret = 5; // Token secret used for twitter log in.
    Auth auth = 6;  // Used to authorize the request.
    SessionInfo session_info = 7; // Session information.
    Options options = 9; // Common options for request.
}

// VerifyEmailRequest is used for VerifyEmail rpc calls. Clients should send this to validate a new user.
message VerifyEmailRequest {
    Auth auth = 1; // Used to authorize the request.
    string token = 2 [(validate.rules).string = {min_len: 1}]; // Verify token used for verify email.
    SessionInfo session_info = 3; // Session information.
    Options options = 4; // Common options for request.
}

// PasswordRecoverRequest is used for PasswordRecover rpc calls. Used to generate password recovery token for user.
message PasswordRecoverRequest {
    Auth auth = 1; // Used to authorize the request.
    string email = 2 [(validate.rules).string = {email: true}]; // Email used for recover user password.
    SessionInfo session_info = 3; // Session information.
    Options options = 4; // Common options for request.
}

// PasswordResetRequest is used for PasswordReset rpc calls. Used to change password for user that has an active recovery token.
message PasswordResetRequest {
    Auth auth = 1; // Used to authorize the request.
    string recovery_token = 2 [(validate.rules).string = {min_len: 1}]; // Recovery token used for reset user password.
    string email = 3 [(validate.rules).string = {email: true}]; // Email used for reset user password.
    string password = 4 [(validate.rules).string = {min_len: 8}]; // New user password.
    SessionInfo session_info = 5; // Session information.
    Options options = 6; // Common options for request.
}

// VerifyRecoveryTokenRequest is used for VerifyRecoveryToken rpc calls. Used to verify recovery token for user.
message VerifyRecoveryTokenRequest {
    Auth auth = 1; // Used to authorize the request.
    string recovery_token = 2 [(validate.rules).string = {min_len: 1}]; // Recovery token used for verify recovery token from user.
    string email = 3 [(validate.rules).string = {email: true}]; // Email used for verify recovery token from user.
    SessionInfo session_info = 4; // Session information.
    Options options = 5; // Common options for request.
}

// GetUsersRequest is used for GetUsers rpc calls. Used to fetch all users from DB.
message GetUsersRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Pagination pagination = 4; // Used to paginate response data.
    FilterOptions filter_options = 5; // Used to filter response data.
    Options options = 6; // Common options for request.
}

// GetUserRequest is used for GetUser rpc calls. Used to fetch a single user by ID from DB.
message GetUserRequest {
    Auth auth = 1; // Used to authorize the request.
    int32 id = 2 [(validate.rules).int32 = {gte: 1}]; // User id for get user in database user table.
    SessionInfo session_info = 3; // Session information.
    Options options = 4; // Common options for request.
}

// CreateUserRequest is used for CreateUser rpc calls. Used to add a new user to DB.
message CreateUserRequest {
    Auth auth = 1; // Used to authorize the request.
    User user = 2 [(validate.rules).message.required = true]; // Create user data.
    SessionInfo session_info = 3; // Session information.
    Options options = 4; // Common options for request.
}

// UpdateUserRequest is used for UpdateUser rpc calls. Used to update an existing user in DB.
message UpdateUserRequest {
    Auth auth = 1; // Used to authorize the request.
    User user = 2 [(validate.rules).message.required = true]; // Create update data.
    SessionInfo session_info = 3; // Session information.
    Options options = 4; // Common options for request.
}

// DeleteUserRequest is used for DeletUser rpc calls. Used to soft delete an existing user in DB.
message DeleteUserRequest {
    Auth auth = 1; // Used to authorize the request.
    int32 id = 2 [(validate.rules).int32 = {gte: 1}]; // User id for delete user in database user table.
    SessionInfo session_info = 3; // Session information.
    Options options = 4; // Common options for request.
}

// ChangePasswordRequest is used for ChangePassword rpc calls. Used to directly change the user password.
message ChangePasswordRequest {
    Auth auth = 1; // Used to authorize the request.
    int32 id = 2 [(validate.rules).int32 = {gte: 1}]; // User id for change password in database user table.
    string current_password = 3; // Password for verifying user password.
    string password = 4 [(validate.rules).string = {min_len: 8}]; // New password for user.
    string password_confirmation = 5 [(validate.rules).string = {min_len: 8}]; // Confirmation new password for user.
    SessionInfo session_info = 6; // Session information.
    Options options = 7; // Common options for request.
}

// AddSocialRequest is used for AddSocial rpc calls. Clients should send this when adding a new social account to existing user.
message AddSocialRequest {
    reserved 1;
    AuthProviderEnum provider = 2 [(validate.rules).enum.defined_only = true]; // Auth provider for add social.
    string token = 3; // Token for add user social.
    string token_secret = 4; // Token for add user twitter social.
    Auth auth = 5; // Used to authorize the request.
    SessionInfo session_info = 6; // Session information.
    Options options = 7; // Common options for request.
}

// GetTitlesRequest is used for GetTitles rpc calls. Used to fetch all titles from DB.
message GetTitlesRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
}

// GetRoleRequest is used for GetRole rpc calls. Used to fetch a single role by ID from DB.
message GetRoleRequest {
    Auth auth = 1; // Used to authorize the request.
    int32 id = 2 [(validate.rules).int32 = {gte: 1}]; // Role id for get user in database roles table.
    SessionInfo session_info = 3; // Session information.
    Options options = 4; // Common options for request.
}

// GetRolesRequest is used for GetRoles rpc calls. Used to fetch all roles from DB.
message GetRolesRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
}

// CreateRoleRequest is used for CreateRoleRequest rpc calls. Used to add a new role to DB.
message CreateRoleRequest {
    Auth auth = 1; // Used to authorize the request.
    Role role = 2 [(validate.rules).message.required = true]; // Create role data.
    SessionInfo session_info = 3; // Session information.
    Options options = 4; // Common options for request.
}

// UpdateRoleRequest is used for UpdateRole rpc calls. Used to update an existing role in DB.
message UpdateRoleRequest {
    Auth auth = 1; // Used to authorize the request.
    Role role = 2 [(validate.rules).message.required = true]; // Update role data.
    SessionInfo session_info = 3; // Session information.
    Options options = 4; // Common options for request.
}

// DeleteRoleRequest is used for DeleteRole rpc calls. Used to soft delete an existing role in DB.
message DeleteRoleRequest {
    Auth auth = 1; // Used to authorize the request.
    int32 id = 2 [(validate.rules).int32 = {gte: 1}]; // Role id for delete user in database roles table.
    SessionInfo session_info = 3; // Session information.
    Options options = 4; // Common options for request.
}

// GetPermissionsRequest is used for GetPermissions rpc calls. Used to fetch all permissions from DB.
message GetPermissionsRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
}

// ValidateJwtTokenRequest is used for ValidateJwtToken rpc calls. Used to validate an existing generated JWT token.
message ValidateJwtTokenRequest {
    Auth auth = 1; // Used to authorize the request.
    Options options = 2; // Common options for request.
    SessionInfo session_info = 3; // Session information.
}

// ResendConfirmationEmailRequest is used in rpc calls for resending user confirmation mail.
message ResendConfirmationEmailRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    int32 user_id = 4; // User id for send user emails.
}
