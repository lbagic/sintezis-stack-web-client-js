syntax = "proto3";

package elude.proto;

option go_package = "./;gen";

import "validate/validate.proto";
import "proto/commons/status.proto";
import "proto/commons/pagination.proto";
import "proto/commons/auth.proto";
import "proto/commons/session_info.proto";
import "proto/commons/options.proto";
import "proto/models/traveller.proto";
import "proto/models/sticker.proto";
import "proto/commons/filter_options.proto";
import "proto/models/amenity.proto";
import "proto/commons/image_data.proto";
import "proto/models/gds.proto";
import "proto/models/meal_plan.proto";
import "proto/models/room_view_type.proto";
import "proto/models/flight_type.proto";

// GetBookingsRequest is used for all rpc calls that return multiple bookings based on a user ID. Currently used in GetBookings,
// GetCompletedBookings, GetUpcomingBookings, GetCurrentBookings, GetHomeBookings.
message GetBookingsRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    int32 user_id = 4; // Bookings user id.
}

// GetBookingRequest is used for GetBooking rpc calls. Used to fetch a single booking by ID from DB.
message GetBookingRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    int32 id = 4 [(validate.rules).int32 = {gte: 1}]; // Booking id for get booking in database bookings table.
}

// ChangeBookingStatusRequest is used in ChangeBookingStatus rpc calls.
message ChangeBookingStatusRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    int32 id = 4 [(validate.rules).int32 = {gte: 1}]; // Booking id for change booking in database bookings table.
    int32 booking_status_id = 5 [(validate.rules).int32 = {gte: 1}]; // Booking status id for change booking status in booking statuses table.
}

// GetBookingByEludeReferenceRequest is used for GetBooking rpc calls. Used to fetch a single booking by ID from DB.
message GetBookingByEludeReferenceRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    string elude_reference = 4 [(validate.rules).string.min_len = 1]; // Elude pnr for get booking by elude pnr in database bookings table.
}

// GetTravelStatsRequest is used in GetTravelStats rpc calls. Clients should use this to get all travel stats for a single user.
message GetTravelStatsRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    int32 user_id = 4 [(validate.rules).int32 = {gte: 1}]; // User id for get travel stats in database users table.
}

// SendEmailsRequest is used in all rpc calls that dump emails for testing purposes
message SendEmailsRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    int32 id = 4; // Booking id for send booking emails in database bookings table.
}

// GetTravellersRequest is used for GetTravellers rpc calls. Used to fetch all travellers from DB.
message GetTravellersRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    int32 userId = 3; // User id for get travellers in database users table.
    Options options = 4; // Common options for request.
    Pagination pagination = 5; // Used to paginate response data.
    FilterOptions filter_options = 6; // Used to filter response data.
}

// GetTravellerRequest is used for GetTraveller rpc calls. Used to fetch a single traveller by ID from DB.
message GetTravellerRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    int32 id = 3 [(validate.rules).int32 = {gte: 1}]; // Travellers id for get travellers in database travellers table.
    Options options = 4; // Common options for request.
}

// CreateTravellerRequest is used for CreateTraveller rpc calls. Used to add a new traveller to DB.
message CreateTravellerRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Traveller traveller = 3 [(validate.rules).message.required = true]; // Traveller data for create traveller.
    Options options = 4; // Common options for request.
}

// UpdateTravellerRequest is used for UpdateTraveller rpc calls. Used to update an existing traveller in DB.
message UpdateTravellerRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Traveller traveller = 3 [(validate.rules).message.required = true]; // Traveller data for update traveller.
    Options options = 4; // Common options for request.
}

// DeleteTravellerRequest is used for DeleteTraveller rpc calls. Used to soft delete an existing traveller in DB.
message DeleteTravellerRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    int32 id = 3 [(validate.rules).int32 = {gte: 1}]; // Traveller id for delete traveller in database travellers table.
    Options options = 4; // Common options for request.
}

// GetStickerRequest is used for GetSticker rpc calls. Used to fetch a single sticker by ID from DB.
message GetStickerRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    int32 id = 4 [(validate.rules).int32 = {gte: 1}]; // Sticker id for get sticker in database stickers table.
}

// GetStickersRequest is used for GetStickers rpc calls. Used to fetch all stickers from DB.
message GetStickersRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    Pagination pagination = 4; // Used to paginate response data.
    string search = 5; // Used to filter by sticker name.
    FilterOptions filter_options = 6; // Used to filter response data.
}

// GetStickersForUserRequest is used for GetStickersForUser rpc calls. Clients should always use this when fetching
// stickers for a specific user
message GetStickersForUserRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    int32 user_id = 4; // User id for get stickers for user in database sticker_user table
}

// CreateStickerRequest is used for CreateSticker rpc calls. Used to add a new sticker to DB.
message CreateStickerRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Sticker sticker = 3 [(validate.rules).message.required = true]; // Sticker data for create sticker.
    Options options = 4; // Common options for request.
}

// UpdateStickerRequest is used for UpdateSticker rpc calls. Used to update an existing sticker in DB.
message UpdateStickerRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Sticker sticker = 3 [(validate.rules).message.required = true]; // Sticker data for update sticker.
    Options options = 4; // Common options for request.
}

// DeleteStickerRequest is used for DeleteSticker rpc calls. Used to soft delete an existing sticker in DB.
message DeleteStickerRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    int32 id = 3 [(validate.rules).int32 = {gte: 1}]; // Sticker id for delete sticker.
    Options options = 4; // Common options for request.
}

// UpdateStickerWithImageRequest is used in UpdateStickerWithImage rpc calls.
// Clients should use this when they want to add a new image to a sticker.
message UpdateStickerWithImageRequest {
    oneof data {
        option (validate.required) = true;
        UpdateStickerWithImageData updateReq = 1; // Update request data for update sticker with image.
        bytes chunk_data = 2; // Image data in byte chunks.
    };
}

// UpdateStickerWithImageUnaryRequest is used in UpdateStickerWithImageUnary rpc calls. Needed for web clients until grpc-web starts supporting
// client-side streaming.
message UpdateStickerWithImageUnaryRequest {
    UpdateStickerWithImageData updateReq = 1; // Update request for update sticker with image unary.
    bytes image = 2; // Image data in bytes.
}

// GetAmenityRequest is used for GetAmenity rpc calls. Used to fetch a single amenity by ID from DB.
message GetAmenityRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    int32 id = 4 [(validate.rules).int32 = {gte: 1}]; // Amenity id for get amenity in database amenities table.
}

// GetAmenitiesRequest is used for GetAmenities rpc calls. Used to fetch all amenities from DB.
message GetAmenitiesRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    Pagination pagination = 4; // Used to paginate response data.
    string search = 5; // Used to filter by amenity name.
}

// CreateAmenityRequest is used for CreateAmenity rpc calls. Used to add a new amenity to DB.
message CreateAmenityRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Amenity amenity = 3 [(validate.rules).message.required = true]; // Amenity data for create amenity.
    Options options = 4; // Common options for request.
}

// UpdateAmenityRequest is used for UpdateAmenity rpc calls. Used to update an existing amenity in DB.
message UpdateAmenityRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Amenity amenity = 3 [(validate.rules).message.required = true]; // Amenity data for update amenity.
    Options options = 4; // Common options for request.
}

// DeleteAmenityRequest is used for DeleteAmenity rpc calls. Used to soft delete an existing amenity in DB.
message DeleteAmenityRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    int32 id = 3 [(validate.rules).int32 = {gte: 1}]; // Amenity id for delete amenity.
    Options options = 4; // Common options for request.
}

// UpdateAmenityWithImageRequest is used in UpdateAmenityWithImage rpc calls.
// Clients should use this when they want to add a new image to an amenity.
message UpdateAmenityWithImageRequest {
    oneof data {
        option (validate.required) = true;
        UpdateAmenityWithImageData updateReq = 1; // Update request data for update amenity with image.
        bytes chunk_data = 2; // Image data in byte chunks.
    };
}

// UpdateAmenityWithImageUnaryRequest is used in UpdateAmenityWithImageUnary rpc calls. Needed for web clients until grpc-web starts supporting
// client-side streaming.
message UpdateAmenityWithImageUnaryRequest {
    UpdateAmenityWithImageData updateReq = 1; // Update request for update amenity with image unary.
    bytes image = 2; // Image data in bytes.
}

// GetGdsRequest is used for GetGds rpc calls. Used to fetch a single gds by ID from DB.
message GetGdsRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    int32 id = 4 [(validate.rules).int32 = {gte: 1}]; // Gds id for get gds in database gds table.
}

// GetAllGdsRequest is used for GetAllGds rpc calls. Used to fetch all gds from DB.
message GetAllGdsRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    Pagination pagination = 4; // Used to paginate response data.
    string search = 5; // Used to filter by gds name.
}

// CreateGdsRequest is used for CreateGds rpc calls. Used to add a new gds to DB.
message CreateGdsRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Gds gds = 3 [(validate.rules).message.required = true]; // Gds data for create gds.
    Options options = 4; // Common options for request.
}

// UpdateGdsRequest is used for UpdateGds rpc calls. Used to update an existing gds in DB.
message UpdateGdsRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Gds gds = 3 [(validate.rules).message.required = true]; // Gds data for update gds.
    Options options = 4; // Common options for request.
}

// DeleteGdsRequest is used for DeleteGds rpc calls. Used to soft delete an existing gds in DB.
message DeleteGdsRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    int32 id = 3 [(validate.rules).int32 = {gte: 1}]; // Gds id for delete gds.
    Options options = 4; // Common options for request.
}

// GetMealPlanRequest is used for GetMealPlan rpc calls. Used to fetch a single meal plan by ID from DB.
message GetMealPlanRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    int32 id = 4 [(validate.rules).int32 = {gte: 1}]; // Meal plan id for get meal plan in database meal_plans table.
}

// GetMealPlansRequest is used for GetMealPlans rpc calls. Used to fetch all meal plans from DB.
message GetMealPlansRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    Pagination pagination = 4; // Used to paginate response data.
    string search = 5; // Used to filter meal plan name.
}

// CreateMealPlanRequest is used for CreateMealPlan rpc calls. Used to add a new meal plan to DB.
message CreateMealPlanRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    MealPlan meal_plan = 3 [(validate.rules).message.required = true]; // Meal plan data for create meal plan.
    Options options = 4; // Common options for request.
}

// UpdateMealPlanRequest is used for UpdateMealPlan rpc calls. Used to update an existing meal lan in DB.
message UpdateMealPlanRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    MealPlan meal_plan = 3 [(validate.rules).message.required = true]; // Meal plan data for update meal plan.
    Options options = 4; // Common options for request.
}

// DeleteMealPlanRequest is used for DeleteMealPlan rpc calls. Used to soft delete an existing meal plan in DB.
message DeleteMealPlanRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    int32 id = 3 [(validate.rules).int32 = {gte: 1}]; // Meal plan id for delete meal plan.
    Options options = 4; // Common options for request.
}

// GetRoomViewTypeRequest is used for GetRoomViewType rpc calls. Used to fetch a single room view type by ID from DB.
message GetRoomViewTypeRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    int32 id = 4 [(validate.rules).int32 = {gte: 1}]; // Room view type id for get room view type in database room_view_types table.
}

// GetRoomViewTypesRequest is used for GetRoomViewTypes rpc calls. Used to fetch all room view types from DB.
message GetRoomViewTypesRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    Pagination pagination = 4; // Used to paginate response data.
    string search = 5; // Used to filter room view type name.
}

// CreateRoomViewTypeRequest is used for CreateRoomViewType rpc calls. Used to add a new room view type to DB.
message CreateRoomViewTypeRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    RoomViewType room_view_type = 3 [(validate.rules).message.required = true]; // Room view type data for create room view type.
    Options options = 4; // Common options for request.
}

// UpdateRoomViewTypeRequest is used for UpdateRoomViewType rpc calls. Used to update an existing room view type in DB.
message UpdateRoomViewTypeRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    RoomViewType room_view_type = 3 [(validate.rules).message.required = true]; // Room view type data for update room view type.
    Options options = 4; // Common options for request.
}

// DeleteRoomViewTypeRequest is used for DeleteRoomViewType rpc calls. Used to soft delete an existing room view type in DB.
message DeleteRoomViewTypeRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    int32 id = 3 [(validate.rules).int32 = {gte: 1}]; // Room view type id for delete room view type.
    Options options = 4; // Common options for request.
}

// GetFlightTypeRequest is used for GetFlightType rpc calls. Used to fetch a single flight type by ID from DB.
message GetFlightTypeRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    int32 id = 4 [(validate.rules).int32 = {gte: 1}]; // Flight type id for get flight type in database flight_types table.
}

// GetFlightTypesRequest is used for GetFlightTypes rpc calls. Used to fetch all flight types from DB.
message GetFlightTypesRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    Options options = 3; // Common options for request.
    Pagination pagination = 4; // Used to paginate response data.
    string search = 5; // Used to filter flight type name.
}

// CreateFlightTypeRequest is used for CreateFlightType rpc calls. Used to add a new flight type to DB.
message CreateFlightTypeRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    FlightType flight_type = 3 [(validate.rules).message.required = true]; // Flight type data for create flight type.
    Options options = 4; // Common options for request.
}

// UpdateFlightTypeRequest is used for UpdateFlightType rpc calls. Used to update an existing flight type in DB.
message UpdateFlightTypeRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    FlightType flight_type = 3 [(validate.rules).message.required = true]; // Flight type data for update flight type.
    Options options = 4; // Common options for request.
}

// DeleteFlightTypeRequest is used for DeletFlightType rpc calls. Used to soft delete an existing flight type in DB.
message DeleteFlightTypeRequest {
    Auth auth = 1; // Used to authorize the request.
    SessionInfo session_info = 2; // Session information.
    int32 id = 3 [(validate.rules).int32 = {gte: 1}];// Flight type id for delete flight type.
    Options options = 4; // Common options for request.
}