syntax = "proto3";

package elude.proto;

option go_package = "./;gen";

import "validate/validate.proto";
import "proto/commons/status.proto";
import "proto/commons/pagination.proto";
import "proto/commons/auth.proto";
import "proto/commons/session_info.proto";
import "proto/models/traveller.proto";
import "proto/models/sticker.proto";
import "proto/models/sticker_user.proto";
import "proto/models/booking.proto";
import "proto/models/amenity.proto";
import "proto/models/gds.proto";
import "proto/models/meal_plan.proto";
import "proto/models/room_view_type.proto";
import "proto/models/flight_type.proto";

// BookingResponse is used for all rpc calls that return booking. 
message BookingResponse {
    SessionInfo session_info = 1; // Session information.
    Booking booking = 2; // Booking data from booking requests.
    // Required: status code.
    Status status = 3; // Status of response.
}

// BookingResponse is used for all rpc calls that return multiple bookings.
message GetBookingsResponse {
    SessionInfo session_info = 1; // Session information.
    // Required: status code.
    Status status = 2; // Status of response.
    repeated Booking bookings = 3; // List of Bookings data from bookings requests.
}

message GetHomeBookingsResponse {
    SessionInfo session_info = 1; // Session information.
    // Required: status code.
    Status status = 2; // Status of response.
    Booking current_booking = 3; // Current booking data.
    Booking upcoming_booking = 4; // Upcoming booking data.
}

message GetTravelStatsResponse {
    SessionInfo session_info = 1; // Session information.
    // Required: status code.
    Status status = 2; // Status of response.
    int32 total_trips = 3; // Number of completed trips.
    float miles_traveled = 4; // Total miles traveled.
    int32 countries_visited = 5; // Number of countries visited.
}

// Empty response for all rpc calls that dump emails for testing purposes
message SendEmailsResponse {
    SessionInfo session_info = 1; // Session information.
    // Required: status code.
    Status status = 2; // Status of response.
}

message TravellersResponse {
    SessionInfo session_info = 1; // Session information.
    repeated Traveller travellers = 2; // List of traveller data from travellers requests.
    // Required: status code.
    Status status = 3; // Status of response.
    Pagination pagination = 4; // Used to paginate response data.
}

message TravellerResponse {
    SessionInfo session_info = 1; // Session information.
    Traveller traveller = 2; // Traveller data from traveller requests.
    // Required: status code.
    Status status = 3; // Status of response.
}

message StickerResponse {
    SessionInfo session_info = 1; // Session information.
    Sticker sticker = 2; // Sticker data from sticker requests.
    // Required: status code.
    Status status = 3; // Status of response.
}

message StickersResponse {
    SessionInfo session_info = 1; // Session information.
    repeated Sticker stickers = 2; // List of stickers data from stickers requests.
    // Required: status code.
    Status status = 3; // Status of response.
    Pagination pagination = 4; // Used to paginate resposne data.
}

message StickerUserResponse {
    SessionInfo session_info = 1; // Session information.
    repeated StickerUser stickers = 2; // List of sticker users from sticker users requests.
    // Required: status code.
    Status status = 3; // Status of response.
    Pagination pagination = 4; // Used to paginate response data.
}

message AmenityResponse {
    SessionInfo session_info = 1; // Session information.
    Amenity amenity = 2; // Amenity data from amenity requests.
    // Required: status code.
    Status status = 3; // Status of response.
}

message AmenitiesResponse {
    SessionInfo session_info = 1; // Session information.
    repeated Amenity amenities = 2; // List amenities data from amenities requests.
    // Required: status code.
    Status status = 3; // Status of response.
    Pagination pagination = 4; // Used to paginate response data.
}

message GdsResponse {
    SessionInfo session_info = 1; // Session information.
    Gds gds = 2; // Gds data from gds requests.
    // Required: status code.
    Status status = 3; // Status of response.
}

message AllGdsResponse {
    SessionInfo session_info = 1; // Session information.
    repeated Gds gds = 2; // List all gds data from all gds requests.
    // Required: status code.
    Status status = 3; // Status of response.
    Pagination pagination = 4; // Used to paginate response data.
}

message FlightTypeResponse {
    SessionInfo session_info = 1; // Session information.
    FlightType flight_type = 2; // Flight type data from flight type requests.
    // Required: status code.
    Status status = 3; // Status of response.
}

message FlightTypesResponse {
    SessionInfo session_info = 1; // Session information.
    repeated FlightType flight_types = 2; // List flight types data from flight types requests.
    // Required: status code.
    Status status = 3; // Status of response.
    Pagination pagination = 4; // Used to paginate response data.
}

message MealPlanResponse {
    SessionInfo session_info = 1; // Session information.
    MealPlan meal_plan = 2; // Meal plan data from meal plan requests.
    // Required: status code.
    Status status = 3; // Status of response.
}

message MealPlansResponse {
    SessionInfo session_info = 1; // Session information.
    repeated MealPlan meal_plans = 2; // List meal plans data from meal plans requests.
    // Required: status code.
    Status status = 3; // Status of response.
    Pagination pagination = 4; // Used to paginate response data.
}

message RoomViewTypeResponse {
    SessionInfo session_info = 1; // Session information.
    RoomViewType room_view_type = 2; // Room view type data from room view type requests.
    // Required: status code.
    Status status = 3; // Status of response.
}

message RoomViewTypesResponse {
    SessionInfo session_info = 1; // Session information.
    repeated RoomViewType room_view_types = 2; // List room view types data from room view types requests.
    // Required: status code.
    Status status = 3; // Status of response.
    Pagination pagination = 4; // Used to paginate response data.
}
