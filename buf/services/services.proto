syntax = "proto3";

package elude.proto;

option go_package = "./;gen";

option java_multiple_files = true;
option java_outer_classname = "ServiceProto";
option java_package = "co.sintezis.elude";

import "proto/air_hotel_reservation_search/request.proto";
import "proto/air_hotel_reservation_search/response.proto";
import "proto/auth/auth_request.proto";
import "proto/auth/auth_response.proto";
import "proto/booking/booking_request.proto";
import "proto/booking/booking_response.proto";
import "proto/location/location_request.proto";
import "proto/location/location_response.proto";
import "proto/payment/payment_request.proto";
import "proto/payment/payment_response.proto";

service GatewayController {

  rpc RunSearch(ItineraryRequest) returns (stream ItineraryResponse) {} // RunSearch method runs a Hotel and/or Flight search based on Hotel and Air requirements taking in account budget, budget tiers and locations.

  rpc RunSearchGroupResponses(ItineraryRequest) returns (stream ItineraryResponse) { // RunSearchGroupResponses method is currently not supported, use RunSearch.
    option deprecated = true;
  };

  rpc GetHotelDetails(HotelDetailsRequest) returns (HotelDetailsResponse) {} // GetHotelDetails method fetches hotel details of the hotel from gds.

  rpc GetAbandonTripSearch(GetAbandonTripSearchRequest) returns (GetAbandonTripSearchResponse) {} // GetAbandonTripSearch method returns ItineraryResponse based on AbandonTrip parameters.

  rpc AbandonTrip(AbandonTripRequest) returns (AbandonTripResponse) {} // AbandonTrip method sends a email for GetAbandonTripSearch with search parameters (hotel id, flight id, city ids...).

  // Auth controller
  rpc Authorize(AuthRequest) returns (AuthResponse) {} // Authorize method authorizes a request. It is used in every rpc call.

  rpc Register(RegisterRequest) returns (AccountResponse) {} // Register method is used to SignUp a new User.

  rpc Login(LoginRequest) returns (AccountResponse) {} // Login method is used to log in an existing user.

  rpc VerifyEmail(VerifyEmailRequest) returns (AccountResponse) {} // VerifyEmail method is used to verify email for a new user.

  rpc PasswordRecover(PasswordRecoverRequest) returns (AccountResponse) {} // PasswordRecover method is used to send password recovery email.

  rpc VerifyRecoveryToken(VerifyRecoveryTokenRequest) returns (AccountResponse) {} // VerifyRecoveryToken method is used to verify user's recovery token.

  rpc PasswordReset(PasswordResetRequest) returns (AccountResponse) {} // PasswordReset method is used to reset user password.

  rpc GetUsers(GetUsersRequest) returns (UsersResponse) {} // GetUsers method is used to get all users from database.

  rpc GetUser(GetUserRequest) returns (UserResponse) {} // GetUser method is used to get user by id from database.

  rpc CreateUser(CreateUserRequest) returns (UserResponse) {} // CreateUser method is used to create a new user.

  rpc UpdateUser(UpdateUserRequest) returns (UserResponse) {} // UpdateUser method is used to update an existing user.

  rpc DeleteUser(DeleteUserRequest) returns (UserResponse) {} // DeleteUser method is used to delete an existing user.

  rpc GetTitles(GetTitlesRequest) returns (TitlesResponse) {} // GetTitles method is used to get all titles from database.

  rpc ChangePassword(ChangePasswordRequest) returns (AccountResponse) {} // ChangePassword method is used to change users password.

  rpc AddSocial(AddSocialRequest) returns (AddSocialResponse) {} // AddSocial method is used to get social for a user.

  rpc GetRoles(GetRolesRequest) returns (RolesResponse) {} // GetRoles method is used to get all roles from database.

  rpc GetRole(GetRoleRequest) returns (RoleResponse) {} // GetRole method is used to get role by id from database.

  rpc CreateRole(CreateRoleRequest) returns (RoleResponse) {} // CreateRole method is used to create a new role.

  rpc UpdateRole(UpdateRoleRequest) returns (RoleResponse) {} // UpdateRole method is used to update an existing role.

  rpc DeleteRole(DeleteRoleRequest) returns (RoleResponse) {} // DeleteRole method is used to delete an existing role.

  rpc GetPermissions(GetPermissionsRequest) returns (PermissionsResponse) {} // GetPermissions method is used to get all permissions from database.

  rpc ValidateJwtToken(ValidateJwtTokenRequest) returns (ValidateJwtTokenResponse) {} // ValidateJwtToken method is used to validate a Jwt auth token.

  rpc ResendConfirmationEmail(ResendConfirmationEmailRequest) returns (SendEmailsResponse) {}  // ResendConfirmationEmail method is used to resend user confirmation email.

  // Reservation controller
  rpc CreateReservation(ReservationRequest) returns (ReservationResponse) { // CreateReservation method is used to create hotel and/or flight reservations.
    option deprecated = true;
  };

  rpc StreamCreateReservation(ReservationRequest) returns (stream ReservationResponse) {} // StreamCreateReservation method uses CreateReservation and returns response as a stream.

  rpc CancelReservation(CancelRequest) returns (CancelResponse) {} // CancelReservation method is used to cancel an existing hotel and/or flight reservations.

  rpc RetrieveReservation(RetrieveRequest) returns (RetrieveResponse) {} // RetrieveReservation method is used to retrieve an existing hotel and/or flight reservations.

  rpc RevalidateItinerary(RevalidateItineraryRequest) returns (RevalidateItineraryResponse) {} // RevalidateItinerary method is used to revalidate a hotel and/or flight itinerary.

  // Payment controller
  rpc AddPaymentMethod(AddPaymentMethodRequest) returns (AddPaymentMethodResponse) {} // AddPaymentMethod method is used by user for adding a new payment method.

  rpc CreateCharge(CreateChargeRequest) returns (CreateChargeResponse) {} // CreateCharge method is used to create a new charge.

  rpc CaptureCharge(CaptureChargeRequest) returns (CaptureChargeResponse) {} // CaptureCharge method captures a charge created with CreateCharge method.

  rpc RefundCharge(RefundChargeRequest) returns (RefundChargeResponse) {} // RefundCharge method is used to refund already captured charge.

  // City controller
  rpc GetCity(GetCityRequest) returns (CityResponse){} // GetCity method is used to get city by id from database from database.

  rpc GetCities(GetCitiesRequest) returns (CitiesResponse){} // GetCities method is used to get all cities from cache or database.

  rpc CreateCity(CreateCityRequest) returns (CityResponse){} // CreateCity method is used to create a new city.

  rpc UpdateCity(UpdateCityRequest) returns (CityResponse){} // UpdateCity method is used to update an existing city.

  rpc DeleteCity(DeleteCityRequest) returns (CityResponse){} // DeleteCity method is used to delete an existing city.

  rpc GetCityWithWeather(GetCityRequest) returns (CityResponse){} // GetCityWithWeather method is used to get city with weather by id from database.

  rpc GetDepartureCities(GetCitiesRequest) returns (CitiesResponse){} // GetDepartureCities method is used to get all departure cities from cache or database.

  rpc GetLocations(GetLocationsRequest) returns (LocationsResponse){} // GetLocations method is used to get all city or airport locations from database.

  rpc GetNearestConnectedCity(GetCityRequest) returns (CityResponse) { // GetNearestConnectedCity is method is currently not supported, use GetNearestLocation.
    option deprecated = true;
  };

  rpc GetNearestConnectedCityByCoordinates(GetCityByCoordinatesRequest) returns (CityResponse) { // GetNearestConnectedCityByCoordinates method is currently not supported, use GetNearestLocationByCoordinates.
    option deprecated = true;
  };

  rpc GetNearestLocation(GetLocationRequest) returns (LocationResponse) {}; // GetNearestLocation method is used to get the nearest location for provided airport.

  rpc GetNearestLocationByCoordinates(GetLocationByCoordinatesRequest) returns (LocationResponse) {}; // GetNearestLocationByCoordinates method is used to get nearest connected city by coordinates.

  rpc GetLocationsByIdentifiers(GetLocationsByIdentifiersRequest) returns (GetLocationsByIdentifiersResponse){} // GetLocationsByIdentifiers method is used to get all database entities corresponding to provided locations.

  rpc GetMultipleCities(GetMultipleCitiesRequest) returns (CitiesResponse){} // GetMultipleCities method is used to get multiple cities by iata codes from database.

  rpc GetMultipleCitiesWithWeather(GetMultipleCitiesRequest) returns (CitiesResponse){} // GetMultipleCitiesWithWeather  method is used to get multiple cities by iata codes with weather.

  rpc UpdateCityWithImage(stream UpdateCityWithImageRequest) returns (CityResponse){} // UpdateCityWithImage method is currently not supported. Use UpdateCityWithImageUnary instead.

  rpc UpdateCityWithImageUnary(UpdateCityWithImageUnaryRequest) returns (CityResponse){} // UpdateCityWithImageUnary method is used to upload city images.

  rpc GetWeatherByCoordinates(GetWeatherByCoordinatesRequest) returns (GetWeatherByCoordinatesResponse){} // GetWeatherByCoordinates method is used to get weather by coordinates.

  // Featured location controller
  rpc GetFeaturedLocationsByLocation(GetFeaturedLocationsByLocationRequest) returns (FeaturedLocationsResponse){} // GetFeaturedLocationsByLocation method is used to get featured location by city id.

  rpc GetFeaturedLocationsByCoordinates(GetFeaturedLocationsByCoordinatesRequest) returns (FeaturedLocationsResponse){} // GetFeaturedLocationsByCoordinates method is used to get featured location by coordinates.

  rpc GetFeaturedLocationsWithoutDepartureLocation(GetFeaturedLocationsWithoutDepartureLocationRequest) returns (FeaturedLocationsResponse){} // GetFeaturedLocationsWithoutDepartureLocation method is used to get featured locations.

  // Airport controller
  rpc GetAirport(GetAirportRequest) returns (AirportResponse){} // GetAirport method is used to get airport by id from database.

  rpc GetAirports(GetAirportsRequest) returns (AirportsResponse){} // GetAirports method is used to get all airports from cache or database.

  rpc CreateAirport(CreateAirportRequest) returns (AirportResponse){} // CreateAirport method is used to create a new airport.

  rpc UpdateAirport(UpdateAirportRequest) returns (AirportResponse){} // UpdateAirport method is used to update an existing airport.

  rpc DeleteAirport(DeleteAirportRequest) returns (AirportResponse){} // DeleteAirport method is used to delete an existing airport.

  rpc GetMultipleAirports(GetMultipleAirportsRequest) returns (AirportsResponse){} // GetMultipleAirports method is used to get multiple airports by iata codes from database.

  // Airlines controller
  rpc GetAirline(GetAirlineRequest) returns (AirlineResponse){} // GetAirline method is used to get airline by id from database.

  rpc GetAirlines(GetAirlinesRequest) returns (AirlinesResponse){} // GetAirlines method is used to get all airlines from cache or database.

  rpc CreateAirline(CreateAirlineRequest) returns (AirlineResponse){} // CreateAirline method is used to create a new airline.

  rpc UpdateAirline(UpdateAirlineRequest) returns (AirlineResponse){} // UpdateAirline method is used to update an existing airline.

  rpc DeleteAirline(DeleteAirlineRequest) returns (AirlineResponse){} // DeleteAirline method is used to delete an existing airline.

  rpc GetMultipleAirlines(GetMultipleAirlinesRequest) returns (AirlinesResponse){} // GetMultipleAirlines method is used to get multiple airlines by iata codes from database.

  rpc UpdateAirlineWithImage(stream UpdateAirlineWithImageRequest) returns (CityResponse){} // UpdateAirlineWithImage method is currently not supported. Use UpdateAirlineWithImageUnary instead.

  rpc UpdateAirlineWithImageUnary(UpdateAirlineWithImageUnaryRequest) returns (AirlineResponse){} // UpdateAirlineWithImageUnary method is used to upload airline images.

  // Country controller

  rpc GetCountry(GetCountryRequest) returns (CountryResponse){} // GetCountry method is used to get country by id from database.

  rpc GetCountries(GetCountriesRequest) returns (CountriesResponse){} // GetCountries method is used to get all countries from cache or database.

  rpc CreateCountry(CreateCountryRequest) returns (CountryResponse){} // CreateCountry method is used to create a new country.

  rpc UpdateCountry(UpdateCountryRequest) returns (CountryResponse){} // UpdateCountry method is used to update an existing country.

  rpc DeleteCountry(DeleteCountryRequest) returns (CountryResponse){} // DeleteCountry method is used to delete an existing country.

  rpc GetMultipleCountries(GetMultipleCountriesRequest) returns (CountriesResponse){} // GetMultipleCountries method is used to get multiple countries by iso codes from database.

  // Booking controller
  rpc GetBookings(GetBookingsRequest) returns (GetBookingsResponse){} // GetBookings method is used to get all bookings from database.

  rpc GetCompletedBookings(GetBookingsRequest) returns (GetBookingsResponse){} // GetCompletedBookings method is used to get all completed bookings by user id from database.

  rpc GetUpcomingBookings(GetBookingsRequest) returns (GetBookingsResponse){} // GetUpcomingBookings method is used to get all upcoming bookings by user id from database.

  rpc GetCurrentBookings(GetBookingsRequest) returns (GetBookingsResponse){} // GetCurrentBookings method is used to get all current bookings by user id from database.

  rpc GetHomeBookings(GetBookingsRequest) returns (GetHomeBookingsResponse){} // GetHomeBookings method is used to get GetHomeCurrentBooking and GetHomeUpcomingBooking by user id from database.

  rpc GetBooking(GetBookingRequest) returns (BookingResponse){} // GetBooking method is used to get a booking by booking id from database.

  rpc ChangeBookingStatus(ChangeBookingStatusRequest) returns (BookingResponse){} // ChangeBookingStatus method is used to update a status on an existing booking.

  rpc GetBookingByEludeReference(GetBookingByEludeReferenceRequest) returns (BookingResponse){} // GetBookingByEludeReference method is used to get a booking by elude reference from database.

  rpc GetTravelStats(GetTravelStatsRequest) returns (GetTravelStatsResponse) {} // GetTravelStats method is used to calculate travel stats from user bookings.

  rpc SendEmailsForUserBookings(SendEmailsRequest) returns (SendEmailsResponse) {} // SendEmailsForUserBookings method is used to send booking emails for all user bookings.

  rpc SendEmailsForBooking(SendEmailsRequest) returns (SendEmailsResponse) {} // SendEmailsForBooking method is used to send booking emails by booking id.

  rpc UpdateBooking(UpdateBookingRequest) returns (BookingResponse){} // UpdateBooking method is used to update a booking by booking id from database.

  // Traveller controller
  rpc GetTravellers(GetTravellersRequest) returns (TravellersResponse){} // GetTravellers method is used to get all travellers by user id from database.

  rpc GetTraveller(GetTravellerRequest) returns (TravellerResponse) {} // GetTraveller method is used to get a traveller by traveller id from database.

  rpc CreateTraveller(CreateTravellerRequest) returns (TravellerResponse) {} // CreateTraveller method is used to create a new traveller.

  rpc UpdateTraveller(UpdateTravellerRequest) returns (TravellerResponse) {} // UpdateTraveller method is used to update an existing traveller.

  rpc DeleteTraveller(DeleteTravellerRequest) returns (TravellerResponse) {} // DeleteTraveller method is used to delete an existing traveller .

  // Payment method controller

  rpc GetPaymentMethod(GetPaymentMethodRequest) returns (PaymentMethodResponse){} // GetPaymentMethod method is used to get a payment method by payment method id from database.

  rpc GetPaymentMethods(GetPaymentMethodsRequest) returns (PaymentMethodsResponse){} // GetPaymentMethods method is used to get all payment methods by user id from database.

  rpc CreatePaymentMethod(CreatePaymentMethodRequest) returns (PaymentMethodResponse){} // CreatePaymentMethod method is used to create a new payment method.

  rpc UpdatePaymentMethod(UpdatePaymentMethodRequest) returns (PaymentMethodResponse){} // UpdatePaymentMethod method is used to update an existing payment method.

  rpc DeletePaymentMethod(DeletePaymentMethodRequest) returns (PaymentMethodResponse){} // DeletePaymentMethod method is used to delete an existing payment method.

  // Payment providers controller

  rpc GetPaymentProvider(GetPaymentProviderRequest) returns (PaymentProviderResponse){} // GetPaymentProvider method is used to get a payment provider by payment provider id from database.

  rpc GetPaymentProviders(GetPaymentProvidersRequest) returns (PaymentProvidersResponse){} // GetPaymentProviders method is used to get all payment providers from database.

  rpc CreatePaymentProvider(CreatePaymentProviderRequest) returns (PaymentProviderResponse){} // CreatePaymentProvider method is used to create a new payment provider.

  rpc UpdatePaymentProvider(UpdatePaymentProviderRequest) returns (PaymentProviderResponse){} // UpdatePaymentProvider method is used to update an existing payment provider.

  rpc DeletePaymentProvider(DeletePaymentProviderRequest) returns (PaymentProviderResponse){} // DeletePaymentProvider method is used to delete an existing payment provider.

  // Stickers controller

  rpc GetSticker(GetStickerRequest) returns (StickerResponse){} // GetSticker method is used to get a sticker by sticker id from database.

  rpc GetStickers(GetStickersRequest) returns (StickersResponse){} // GetStickers method is used to get all stickers from database.

  rpc CreateSticker(CreateStickerRequest) returns (StickerResponse){} // CreateSticker method is used to create a new sticker.

  rpc UpdateSticker(UpdateStickerRequest) returns (StickerResponse){} // UpdateSticker method is used to update an existing sticker.

  rpc DeleteSticker(DeleteStickerRequest) returns (StickerResponse){} // DeleteSticker method is used to delete an existing sticker.

  rpc GetStickersForUser(GetStickersForUserRequest) returns (StickerUserResponse){} // GetStickersForUser method is used to get StickerUsers by user id from database.

  rpc UpdateStickerWithImage(stream UpdateStickerWithImageRequest) returns (StickerResponse){} // UpdateStickerWithImage method is currently not supported. Use UpdateStickerWithImageUnary instead.

  rpc UpdateStickerWithImageUnary(UpdateStickerWithImageUnaryRequest) returns (StickerResponse){} // UpdateStickerWithImageUnary is used to upload sticker image.

  // Amenities controller

  rpc GetAmenity(GetAmenityRequest) returns (AmenityResponse){} // GetAmenity method is used to get a amenity by amenity id from database.

  rpc GetAmenities(GetAmenitiesRequest) returns (AmenitiesResponse){} // GetAmenities method is used to get all amenities from database.

  rpc CreateAmenity(CreateAmenityRequest) returns (AmenityResponse){} // CreateAmenity method is used to create a new amenity.

  rpc UpdateAmenity(UpdateAmenityRequest) returns (AmenityResponse){} // UpdateAmenity method is used to update an existing amenity.

  rpc DeleteAmenity(DeleteAmenityRequest) returns (AmenityResponse){} // DeleteAmenity method is used to delete an existing amenity.

  rpc UpdateAmenityWithImage(stream UpdateAmenityWithImageRequest) returns (AmenityResponse){} // UpdateAmenityWithImage method is currently not supported. Use UpdateAmenityWithImageUnary instead.

  rpc UpdateAmenityWithImageUnary(UpdateAmenityWithImageUnaryRequest) returns (AmenityResponse){} // UpdateAmenityWithImageUnary is used to upload amenity image.

  // Regions controller

  rpc GetRegion(GetRegionRequest) returns (RegionResponse){} // GetRegion method is used to get a region by region id from database.

  rpc GetRegions(GetRegionsRequest) returns (RegionsResponse){} // GetRegions method is used to get all regions from database.

  rpc CreateRegion(CreateRegionRequest) returns (RegionResponse){} // CreateRegion method is used to create a new region.

  rpc UpdateRegion(UpdateRegionRequest) returns (RegionResponse){} // UpdateRegion method is used to update an existing region.

  rpc DeleteRegion(DeleteRegionRequest) returns (RegionResponse){} // DeleteRegion method is used to delete an existing region.

  // Gds controller

  rpc GetGds(GetGdsRequest) returns (GdsResponse){} // GetGds method is used to get gds by gds id from database.

  rpc GetAllGds(GetAllGdsRequest) returns (AllGdsResponse){} // GetAllGds method is used to get all gds from database.

  rpc CreateGds(CreateGdsRequest) returns (GdsResponse){} // CreateGds method is used to create a new gds.

  rpc UpdateGds(UpdateGdsRequest) returns (GdsResponse){} // UpdateGds method is used to update an existing gds.

  rpc DeleteGds(DeleteGdsRequest) returns (GdsResponse){} // DeleteGds method is used to delete an existing gds.
  
  // MealPlans controller

  rpc GetMealPlan(GetMealPlanRequest) returns (MealPlanResponse){} // GetMealPlan method is used to get a meal plan by meal plan id from database.

  rpc GetMealPlans(GetMealPlansRequest) returns (MealPlansResponse){} // GetMealPlans method is used to get all meal plans from database.

  rpc CreateMealPlan(CreateMealPlanRequest) returns (MealPlanResponse){} // CreateMealPlan method is used to create a new meal plan.

  rpc UpdateMealPlan(UpdateMealPlanRequest) returns (MealPlanResponse){} // UpdateMealPlan method is used to update an existing meal plan.

  rpc DeleteMealPlan(DeleteMealPlanRequest) returns (MealPlanResponse){} // DeleteMealPlan method is used to delete an existing meal plan.

  // RoomViewTypes controller

  rpc GetRoomViewType(GetRoomViewTypeRequest) returns (RoomViewTypeResponse){} // GetRoomViewType method is used to get a room view type by room view type id from database.

  rpc GetRoomViewTypes(GetRoomViewTypesRequest) returns (RoomViewTypesResponse){} // GetRoomViewTypes method is used to get all room view types from database.

  rpc CreateRoomViewType(CreateRoomViewTypeRequest) returns (RoomViewTypeResponse){} // CreateRoomViewType method is used to create a new room view type.

  rpc UpdateRoomViewType(UpdateRoomViewTypeRequest) returns (RoomViewTypeResponse){} // UpdateRoomViewType method is used to update an existing room view type.

  rpc DeleteRoomViewType(DeleteRoomViewTypeRequest) returns (RoomViewTypeResponse){} // DeleteRoomViewType method is used to delete an existing room view type.

  // FlightTypes controller

  rpc GetFlightType(GetFlightTypeRequest) returns (FlightTypeResponse){} // GetFlightType method is used to get a flight type by flight type id from database.

  rpc GetFlightTypes(GetFlightTypesRequest) returns (FlightTypesResponse){} // GetFlightTypes method is used to get all flight types from database.

  rpc CreateFlightType(CreateFlightTypeRequest) returns (FlightTypeResponse){} // CreateFlightType method is used to create a new flight type.

  rpc UpdateFlightType(UpdateFlightTypeRequest) returns (FlightTypeResponse){} // UpdateFlightType method is used to update an existing flight type.

  rpc DeleteFlightType(DeleteFlightTypeRequest) returns (FlightTypeResponse){} // DeleteFlightType method is used to delete an existing flight type.

  // Promotion code controller

  rpc GetPromotionCode(GetPromotionCodeRequest) returns (PromotionCodeResponse){} // GetPromotionCode method is used to get a promotion code by promotion code from stripe.

  rpc GetPromotionCodes(GetPromotionCodesRequest) returns (PromotionCodesResponse){} // GetPromotionCodes method is used to get all promotion code by user id from stripe.

  rpc CreatePromotionCode(CreatePromotionCodeRequest) returns (PromotionCodeResponse){} // CreatePromotionCode method is used to create a new promotion code.

  rpc UpdatePromotionCode(UpdatePromotionCodeRequest) returns (PromotionCodeResponse){} // UpdatePromotionCode method is used to update an existing promotion code.

  rpc DeletePromotionCode(DeletePromotionCodeRequest) returns (PromotionCodeResponse){} // DeletePromotionCode method is used to delete an existing promotion code.

  rpc ValidatePromotionCode(ValidatePromotionCodeRequest) returns (ValidatePromotionCodeResponse){} // ValidatePromotionCode method is used to validate promotion code before reservation.

  // Preference controller

  rpc GetPreferences(GetPreferencesRequest) returns (GetPreferencesResponse){} // GetPreferences method is used to get all preferences from database and current user preferences.

  rpc UpdateUserPreferences(UpdateUserPreferencesRequest) returns (UpdateUserPreferencesResponse){} // UpdateUserPreferences method is used to update user preferences.
}
